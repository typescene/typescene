{"version":"0.9","title":"Typescene toolkit","toc":["overview","start","samples","reference"],"items":[{"name":"Async","id":"Async","textParent":"reference","textSort":"01","items":[{"id":"Async.ObservableArray","name":"ObservableArray","isClass":true,"file":"dist/core/typings/Async/ObservableArray.d.ts","line":0,"code":"class ObservableArray<T>\ninterface ObservableArray<T> extends Array<T>","doc":"<p>[1]. Encapsulates <code>Array</code> with observable properties; the result works exactly like a regular array, but setting elements outside the bounds of the array (&gt;= length) does NOT work: length must be set first.</p>\n<p>[2]. Type definition to declare Array methods mixin.</p>\n","typeParams":["T"],"items":[{"id":"Async.ObservableArray.fromArray","name":"fromArray","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/core/typings/Async/ObservableArray.d.ts","line":2,"code":"static fromArray<T>(array: Array<T>): ObservableArray<T>;","doc":"<p>Create an <code>ObservableArray</code> out of a regular Array.</p>\n","typeParams":["T"],"declType":"ObservableArray<T>"},{"id":"Async.ObservableArray.fromObservableValue","name":"fromObservableValue","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/core/typings/Async/ObservableArray.d.ts","line":4,"code":"static fromObservableValue<T>(observableValue: ObservableValue<T[] | T | undefined>, lazy?: boolean): ObservableArray<T>;","doc":"<p>Create an <code>ObservableArray</code> that takes array elements from the array in given <code>ObservableValue</code>, or the value itself as a single element if it is not an array, or an empty array if the value is null or undefined; changes in array elements and/or observable values are reflected asynchronously; use the <code>lazy</code> argument to defer initialization of array elements until the <code>.length</code> property is accessed.</p>\n","typeParams":["T"],"declType":"ObservableArray<T>"},{"id":"Async.ObservableArray.constructor","name":"new ObservableArray","hasParams":false,"isCtor":true,"file":"dist/core/typings/Async/ObservableArray.d.ts","line":6,"code":"constructor();","doc":"<p>Create a new empty <code>ObservableArray</code> instance.</p>\n"},{"id":"Async.ObservableArray/flattenAsync","name":"flattenAsync","hasParams":true,"isMethod":true,"file":"dist/core/typings/Async/ObservableArray.d.ts","line":12,"code":"flattenAsync(removeGaps?: boolean, lazy?: boolean): ObservableArray<T>;","doc":"<p>Create a read-only observable array that contains all values from the original array and all nested (observable) arrays, optionally removing gaps (i.e. undefined or null elements); the resulting array and its length <em>always</em> change asynchronously with the contents of the original array, even if not subscribed to a value or the length property; use the <code>lazy</code> argument to defer initialization of array elements until the <code>.length</code> property is accessed.</p>\n","declType":"ObservableArray<T>"},{"id":"Async.ObservableArray/mapAsync","name":"mapAsync","hasParams":true,"isMethod":true,"file":"dist/core/typings/Async/ObservableArray.d.ts","line":8,"code":"mapAsync<U>(callback: (value: T, index: number, array: T[]) => (ObservableValue<U> | U), thisArg?: any, lazy?: boolean): ObservableArray<U>;","doc":"<p>Create a read-only <code>ObservableArray</code> with each value of the original array mapped to the result of the given getter function; observable values used in the map function are not observed (like <code>ObservableValue#map</code>); the getter is called for combinations of value and index (i.e. deleting a value in the middle of the source array will trigger changes for all elements after it; if the index is not important then use <code>.mapAsyncValues</code> instead); the resulting array length changes along with the original array length; use the <code>lazy</code> argument to defer initialization of array elements until the <code>.length</code> property is accessed.</p>\n","typeParams":["U"],"declType":"ObservableArray<U>"},{"id":"Async.ObservableArray/mapAsyncValues","name":"mapAsyncValues","hasParams":true,"isMethod":true,"file":"dist/core/typings/Async/ObservableArray.d.ts","line":10,"code":"mapAsyncValues<U>(callback: (value: T) => (ObservableValue<U> | U), thisArg?: any, lazy?: boolean): ObservableArray<U>;","doc":"<p>Create a read-only ObservableArray with each value of the original array mapped to the result of the given function; observable values used in the map function are not observed (like ObservableValue map method); the resulting array length changes along with the original array length; this method is slightly more expensive than mapAsync for larger arrays, especially in non-ES6 environments, but is overall more efficient because it avoids unnecessary callbacks when subscribed to; use the <code>lazy</code> argument to defer initialization of array elements until the <code>.length</code> property is accessed.</p>\n","typeParams":["U"],"declType":"ObservableArray<U>"},{"id":"Async.ObservableArray/toJSON","name":"toJSON","hasParams":false,"isMethod":true,"file":"dist/core/typings/Async/ObservableArray.d.ts","line":14,"code":"toJSON(): T[];","doc":"<p>Represent observable arrays as regular JSON arrays.</p>\n","declType":"T[]"}],"count":2},{"id":"Async.ObservableObject","name":"ObservableObject","isClass":true,"file":"dist/core/typings/Async/ObservableObject.d.ts","line":1,"code":"class ObservableObject","doc":"<p>Represents an object with (some) observable members; may be extended into a derived class, or use <code>makeObjectObservable</code> function to mix into any object [requires ES5+ target].</p>\n","items":[{"id":"Async.ObservableObject.constructor","name":"new ObservableObject","hasParams":false,"isCtor":true,"file":"dist/core/typings/Async/ObservableObject.d.ts","line":3,"code":"constructor();","doc":"<p>Create an object with (some) observable members.</p>\n"},{"id":"Async.ObservableObject/addObservableProperty","name":"addObservableProperty","hasParams":true,"isMethod":true,"file":"dist/core/typings/Async/ObservableObject.d.ts","line":7,"code":"addObservableProperty(name: string | number, value: any): void;","doc":"<p>Add an observable property with given name and value; any existing (observable) properties with this name are removed first.</p>\n","declType":"void"},{"id":"Async.ObservableObject/hasObservableProperty","name":"hasObservableProperty","hasParams":true,"isMethod":true,"file":"dist/core/typings/Async/ObservableObject.d.ts","line":5,"code":"hasObservableProperty(name: string | number): boolean;","doc":"<p>Returns true if property with given name is observable.</p>\n","declType":"boolean"},{"id":"Async.ObservableObject/PropertyChange","name":"PropertyChange","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/Async/ObservableObject.d.ts","line":9,"code":"readonly PropertyChange: Signal.Emittable<string>;","doc":"<p>Signal that is emitted when any property changes (but does not subscribe to any properties, i.e. only changes to properties already subscribed to, and properties with plain values [not getters] will trigger this signal).</p>\n","declType":"Signal.Emittable<string>","isSignal":true}]},{"id":"Async.ObservableValue","name":"ObservableValue","isClass":true,"file":"dist/core/typings/Async/Observable.d.ts","line":3,"code":"class ObservableValue<T>","doc":"<p>Represents an observable value (with the value itself in <code>.value</code>).</p>\n","typeParams":["T"],"items":[{"id":"Async.ObservableValue.fromPromise","name":"fromPromise","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/core/typings/Async/Observable.d.ts","line":9,"code":"static fromPromise<T>(valuePromise: PromiseLike<T>): ObservableValue<T>;","doc":"<p>Encapsulate given promised value as an ObservableValue; the observed value will start out as <code>undefined</code> but then changes to the <code>Promise</code> result when resolved; or if promise was rejected, hangs on to the error and throws it when retrieving the observable value.</p>\n","typeParams":["T"],"declType":"ObservableValue<T>"},{"id":"Async.ObservableValue.fromSignal","name":"fromSignal","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/core/typings/Async/Observable.d.ts","line":11,"code":"static fromSignal<T>(signal: Signal.Emittable<T>): ObservableValue<T>;","doc":"<p>Connect to given <code>Signal</code>, and create a read-only observable value that always contains the last emitted signal value (initially undefined; the value is only set after the next time the signal is emitted).</p>\n","typeParams":["T"],"declType":"ObservableValue<T>"},{"id":"Async.ObservableValue.fromValue","name":"fromValue","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/core/typings/Async/Observable.d.ts","line":7,"code":"static fromValue<T>(value: T): ObservableValue<T>;","doc":"<p>Encapsulate given value as an ObservableValue.</p>\n","typeParams":["T"],"declType":"ObservableValue<T>"},{"id":"Async.ObservableValue.isObserving","name":"isObserving","hasParams":false,"isStatic":true,"isMethod":true,"file":"dist/core/typings/Async/Observable.d.ts","line":5,"code":"static isObserving(): boolean;","doc":"<p>Returns true if currently running in a subscribed-to observable context (i.e. evaluating an observable value, recording dependencies on other observable values being accessed from this context).</p>\n","declType":"boolean"},{"id":"Async.ObservableValue.constructor","name":"new ObservableValue","hasParams":true,"isCtor":true,"file":"dist/core/typings/Async/Observable.d.ts","line":13,"code":"constructor(getter?: () => T, setter?: (value: T) => void);","doc":"<p>Create a new (single) observed value using optional getter and setter functions; note that getters <em>should</em> be pure functions without side effects, creating or setting other observables from the getter will result in an error; getter is not called immediately but only when being subscribed to or when obtaining the value itself (from <code>.value</code>).</p>\n"},{"id":"Async.ObservableValue/clear","name":"clear","hasParams":false,"isMethod":true,"file":"dist/core/typings/Async/Observable.d.ts","line":41,"code":"clear(): void;","doc":"<p>Clear value and remove getter/setter functions, unsubscribe from dependencies.</p>\n","declType":"void"},{"id":"Async.ObservableValue/getLastValue","name":"getLastValue","hasParams":false,"isMethod":true,"file":"dist/core/typings/Async/Observable.d.ts","line":25,"code":"getLastValue(): T | undefined;","doc":"<p>Returns last value set, does not re-evaluate and/or add dependency.</p>\n","declType":"T | undefined"},{"id":"Async.ObservableValue/getter","name":"getter","hasParams":true,"isMethod":true,"file":"dist/core/typings/Async/Observable.d.ts","line":15,"code":"getter(f: () => T): this;","doc":"<p>Set a getter function for the observable value, which should return a current value, or another ObservableValue instance, or set <code>.value</code> directly; note that getters <em>should</em> be pure functions without side effects, creating or setting other observables from the getter will result in an error; the getter is only invoked (asynchronously) if a value had been set previously and needs to be updated; reading <code>.value</code> from the getter results in the value previously set, no recursion occurs; returns this.</p>\n","declType":"this"},{"id":"Async.ObservableValue/map","name":"map","hasParams":true,"isMethod":true,"file":"dist/core/typings/Async/Observable.d.ts","line":27,"code":"map<U>(callback: (value: T) => U): ObservableValue<U>;","doc":"<p>Transform this observable value using given function, into a new ObservableValue instance; note that the transformation function is not necessarily invoked after each value change, if the new observable is not subscribed to and/or multiple changes occur (asynchronously) before the transformation is evaluated; observables used by the given function itself are not automatically subscribed to (wrap given function in observe(…) to observe dependencies as well).</p>\n","typeParams":["U"],"declType":"ObservableValue<U>"},{"id":"Async.ObservableValue/next","name":"next","hasParams":false,"isMethod":true,"file":"dist/core/typings/Async/Observable.d.ts","line":33,"code":"next(): Promise<T>;","doc":"<p>Start listening for changes to this observable value and all of its dependencies asynchronously, and return a promise for the next (different) value of the observable; does <em>not</em> force evaluation of the current value (i.e. getters are not called); stops subscribing immediately after the promise is resolved.</p>\n","declType":"Promise<T>","isAsync":true},{"id":"Async.ObservableValue/setter","name":"setter","hasParams":true,"isMethod":true,"file":"dist/core/typings/Async/Observable.d.ts","line":17,"code":"setter(f: (value: T) => void): this;","doc":"<p>Set a setter function for the observable value; setting <code>.value</code> directly from the setter results in changing the underlying observable value (which can also be read by the getter, or the setter itself), no recursion occurs; returns this.</p>\n","declType":"this"},{"id":"Async.ObservableValue/shallow","name":"shallow","isProperty":true,"file":"dist/core/typings/Async/Observable.d.ts","line":39,"code":"shallow?: boolean;","doc":"<p>Set to true to stop this observablue value instance from converting arrays and objects to observables, and reading values from observable value instances.</p>\n","declType":"boolean"},{"id":"Async.ObservableValue/subscribe","name":"subscribe","hasParams":false,"isMethod":true,"file":"dist/core/typings/Async/Observable.d.ts","line":29,"code":"subscribe(): this;\nsubscribe(callback: (value: T) => any): this;","doc":"<p>[1]. Start listening for changes to this observable value and all of its dependencies asynchronously; returns this.</p>\n<p>[2]. Start listening for changes to this observable value and all of its dependencies asynchronously, and schedule given function for every new value (including the current value, or undefined if none has been set); returns this.</p>\n","declType":"this | this","count":2},{"id":"Async.ObservableValue/subscribed","name":"subscribed","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/Async/Observable.d.ts","line":35,"code":"readonly subscribed: boolean;","doc":"<p>True if this observable value is currently subscribed to, either directly or from dependent observables.</p>\n","declType":"boolean"},{"id":"Async.ObservableValue/toString","name":"toString","hasParams":false,"isMethod":true,"file":"dist/core/typings/Async/Observable.d.ts","line":23,"code":"toString(): string;","doc":"<p>Returns .value as a string (observable if used within an observable getter).</p>\n","declType":"string"},{"id":"Async.ObservableValue/update","name":"update","hasParams":false,"isMethod":true,"file":"dist/core/typings/Async/Observable.d.ts","line":43,"code":"update(): void;","doc":"<p>Manually invoke the getter function synchronously, if any; can be used only if not currently evaluating another observable value (otherwise, wrap in a call to <code>unobserved</code>); calling this method is normally not necessary, and should only be used if external factors outside of observables change in such a way that the result of the getter function changes; if so, then subsequent retrieval of <code>.value</code> results in the new value, and dependent observable values are scheduled to update automatically (asynchronously).</p>\n","declType":"void"},{"id":"Async.ObservableValue/value","name":"value","isProperty":true,"file":"dist/core/typings/Async/Observable.d.ts","line":19,"code":"value: T | undefined;","doc":"<p>Observable value, (re-) evaluated only if necessary; when set to an <code>ObservableValue</code> instance, this property returns that instance’s value, until this property is set to another value (except if the <code>ObservableValue</code> has a setter, which is called first); plain Array values are turned into <code>ObservableArray</code> instances, and plain Object instances into <code>ObservableObject</code> instances — unless <code>.shallow</code> is set to true.</p>\n","declType":"T | undefined"},{"id":"Async.ObservableValue/valueOf","name":"valueOf","hasParams":false,"isMethod":true,"file":"dist/core/typings/Async/Observable.d.ts","line":21,"code":"valueOf(): T | undefined;","doc":"<p>Returns .value (observable if used within an observable getter).</p>\n","declType":"T | undefined"},{"id":"Async.ObservableValue/writable","name":"writable","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/Async/Observable.d.ts","line":37,"code":"readonly writable: boolean;","doc":"<p>True if this observable value is writable (not only a getter defined).</p>\n","declType":"boolean"}]},{"id":"Async.Promise","name":"Promise","isClass":true,"file":"dist/core/typings/Async/Promise.d.ts","line":0,"code":"class Promise<T> implements PromiseLike<T>","doc":"<p>Represents a value to be resolved at any time in the future.</p>\n","typeParams":["T"],"items":[{"id":"Async.Promise.all","name":"all","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/core/typings/Async/Promise.d.ts","line":13,"code":"static all<ValueT>(promises: PromiseLike<ValueT>[]): Promise<ValueT[]>;","doc":"<p>Return a promise that is fulfilled when all given promises are fulfilled and is immediately rejected when one of the promises is rejected.</p>\n","typeParams":["ValueT"],"declType":"Promise<ValueT[]>","isAsync":true},{"id":"Async.Promise.defer","name":"defer","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/core/typings/Async/Promise.d.ts","line":5,"code":"static defer<T>(f: (...args: any[]) => T, args?: any[]): Promise<T>;","doc":"<p>Defer the execution of a callback but return a promise for its result.</p>\n","typeParams":["T"],"declType":"Promise<T>","isAsync":true},{"id":"Async.Promise.delay","name":"delay","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/core/typings/Async/Promise.d.ts","line":1,"code":"static delay<T>(f: (...args: any[]) => T, ms: number, args?: any[]): Promise<T>;","doc":"<p>Delay the execution of a callback but return a promise for its result.</p>\n","typeParams":["T"],"declType":"Promise<T>","isAsync":true},{"id":"Async.Promise.fn","name":"fn","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/core/typings/Async/Promise.d.ts","line":7,"code":"static fn<T>(callback: (f: (err: any, result: T) => void) => void): Promise<T>;","doc":"<p>Executes given callback, providing it with a Node.js-style (err, result) =&gt; {…} handler that immediately resolves or rejects the resulting promise when called; (use as e.g. <code>Promise.fn(f =&gt; fs.readFile('/etc/passwd', f)).then(...))</code>.</p>\n","typeParams":["T"],"declType":"Promise<T>","isAsync":true},{"id":"Async.Promise.race","name":"race","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/core/typings/Async/Promise.d.ts","line":15,"code":"static race<T>(promises: PromiseLike<T>[]): Promise<T>;","doc":"<p>Return a promise that is resolved or rejected exactly like the first of the given promises that is resolved or rejected.</p>\n","typeParams":["T"],"declType":"Promise<T>","isAsync":true},{"id":"Async.Promise.reject","name":"reject","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/core/typings/Async/Promise.d.ts","line":11,"code":"static reject(error: Error): Promise<{}>;","doc":"<p>Return a rejected promise.</p>\n","declType":"Promise<{}>","isAsync":true},{"id":"Async.Promise.resolve","name":"resolve","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/core/typings/Async/Promise.d.ts","line":9,"code":"static resolve<T>(value: T): Promise<T>;","doc":"<p>Return a resolved promise.</p>\n","typeParams":["T"],"declType":"Promise<T>","isAsync":true},{"id":"Async.Promise.sleep","name":"sleep","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/core/typings/Async/Promise.d.ts","line":3,"code":"static sleep<T>(ms: number, value?: T): Promise<T>;","doc":"<p>Return a promise that will be resolved after a delay.</p>\n","typeParams":["T"],"declType":"Promise<T>","isAsync":true},{"id":"Async.Promise.constructor","name":"new Promise","hasParams":true,"isCtor":true,"file":"dist/core/typings/Async/Promise.d.ts","line":17,"code":"constructor(executor?: (resolve: (value: PromiseLike<T> | T) => void, reject: (error: Error) => void) => void);","doc":"<p>Create a new Promise instance by running the given callback function, which is given callbacks to resolve and/or reject the promise; the promise is also rejected if the callback function throws an exception.</p>\n"},{"id":"Async.Promise/catch","name":"catch","hasParams":true,"isMethod":true,"file":"dist/core/typings/Async/Promise.d.ts","line":23,"code":"catch<O>(onRejected?: (error: Error) => (PromiseLike<O> | O)): Promise<O>;\ncatch<O>(onRejected?: (error: Error) => void): Promise<O>;","doc":"<p>Catch rejections and return a new promise.</p>\n","typeParams":["O"],"declType":"Promise<O> | Promise<O>","isAsync":true},{"id":"Async.Promise/then","name":"then","hasParams":true,"isMethod":true,"file":"dist/core/typings/Async/Promise.d.ts","line":19,"code":"then<O>(onFulfilled?: (value: T) => (PromiseLike<O> | O), onRejected?: (error: Error) => (PromiseLike<O> | O)): Promise<O>;\nthen<O>(onFulfilled?: (value: T) => (PromiseLike<O> | O), onRejected?: (error: Error) => void): Promise<O>;","doc":"<p>Run one of the callbacks as soon as the promise is fulfilled or rejected.</p>\n","typeParams":["O"],"declType":"Promise<O> | Promise<O>","isAsync":true}]},{"id":"Async.Signal","name":"Signal","isClass":true,"file":"dist/core/typings/Async/Signal.d.ts","line":8,"code":"class Signal<T>","doc":"<p>Encapsulates a signal that can be used to trigger one or more handlers asynchronously; do <em>not</em> construct <code>Signal</code> classes directly, use the static <code>.create</code> method to create derived classes which can be instantiated and emitted.</p>\n","typeParams":["T"],"items":[{"id":"Async.Signal.Emittable","name":"Emittable","isInterface":true,"file":"dist/core/typings/Async/Signal.d.ts","line":42,"code":"interface Emittable<T>","doc":"<p>Type definition for a callable (emittable) signal <em>class</em>; matches the result of <code>.create</code> with the same type parameter.</p>\n","isStatic":true,"typeParams":["T"],"items":[{"id":"Async.Signal.Emittable.constructor","name":"new","hasParams":true,"isCtor":true,"file":"dist/core/typings/Async/Signal.d.ts","line":44,"code":"new (data: T): Signal<T>;","doc":"<p>Instantiate a signal with given value, ready to be emitted.</p>\n","declType":"Signal<T>"},{"id":"Async.Signal.Emittable.-call","name":"<call>","hasParams":true,"isMethod":true,"file":"dist/core/typings/Async/Signal.d.ts","line":46,"code":"(data: T): void;","doc":"<p>Emit a signal with given value; does not instantiate this class unless there are actually handlers connected to it.</p>\n","declType":"void"},{"id":"Async.Signal.Emittable/connect","name":"connect","hasParams":true,"isMethod":true,"file":"dist/core/typings/Async/Signal.d.ts","line":48,"code":"connect(handler: (data: T) => any): SignalConnection;\nconnect(method: string, target: object): SignalConnection;","doc":"<p>[1]. Add a handler to be invoked when this signal is emitted; returns an encapsulation of the connection with a disconnect method.</p>\n<p>[2]. Add a handler to be invoked when this signal is emitted: a method with given name on given target object (resolved only when needed); returns an encapsulation of the connection with a disconnect method.</p>\n","declType":"SignalConnection | SignalConnection","count":2},{"id":"Async.Signal.Emittable/connectOnce","name":"connectOnce","hasParams":true,"isMethod":true,"file":"dist/core/typings/Async/Signal.d.ts","line":52,"code":"connectOnce(handler: (data: T) => any): void;\nconnectOnce(method: string, target: object): void;","doc":"<p>[1]. Add a handler to be invoked the next time this signal is emitted.</p>\n<p>[2]. Add a handler to be invoked the next time this signal is emitted: a method with given name on given target object (resolved only when needed).</p>\n","declType":"void | void","count":2},{"id":"Async.Signal.Emittable/disconnectAll","name":"disconnectAll","hasParams":false,"isMethod":true,"file":"dist/core/typings/Async/Signal.d.ts","line":56,"code":"disconnectAll(): this;","doc":"<p>Remove all handlers.</p>\n","declType":"this"},{"id":"Async.Signal.Emittable/isConnected","name":"isConnected","hasParams":false,"isMethod":true,"file":"dist/core/typings/Async/Signal.d.ts","line":58,"code":"isConnected(): boolean;","doc":"<p>Returns true if this signal has any handlers connected to it.</p>\n","declType":"boolean"},{"id":"Async.Signal.Emittable/observe","name":"observe","hasParams":false,"isMethod":true,"file":"dist/core/typings/Async/Signal.d.ts","line":60,"code":"observe(): ObservableValue<T>;","doc":"<p>Create a read-only observable value that contains the last emitted value (initially undefined, only contains a value after the first time this signal is emitted).</p>\n","declType":"ObservableValue<T>"}]},{"id":"Async.Signal.VoidEmittable","name":"VoidEmittable","isInterface":true,"file":"dist/core/typings/Async/Signal.d.ts","line":63,"code":"interface VoidEmittable","doc":"<p>Type definition for a callable (emittable) signal <em>class</em>; matches the result of <code>.create</code> without a type parameter.</p>\n","isStatic":true,"items":[{"id":"Async.Signal.VoidEmittable.constructor","name":"new","hasParams":false,"isCtor":true,"file":"dist/core/typings/Async/Signal.d.ts","line":65,"code":"new (): Signal<void>;","doc":"<p>Instantiate a signal, ready to be emitted.</p>\n","declType":"Signal<void>"},{"id":"Async.Signal.VoidEmittable.-call","name":"<call>","hasParams":false,"isMethod":true,"file":"dist/core/typings/Async/Signal.d.ts","line":67,"code":"(): void;","doc":"<p>Emit a signal; does not instantiate this class unless there are actually handlers connected to it.</p>\n","declType":"void"},{"id":"Async.Signal.VoidEmittable/connect","name":"connect","hasParams":true,"isMethod":true,"file":"dist/core/typings/Async/Signal.d.ts","line":69,"code":"connect(handler: () => any): SignalConnection;\nconnect(method: string, target: object): SignalConnection;","doc":"<p>[1]. Add a handler to be invoked when this signal is emitted; returns an encapsulation of the connection with a disconnect method.</p>\n<p>[2]. Add a handler to be invoked when this signal is emitted: a method with given name on given target object (resolved only when needed); returns an encapsulation of the connection with a disconnect method.</p>\n","declType":"SignalConnection | SignalConnection","count":2},{"id":"Async.Signal.VoidEmittable/connectOnce","name":"connectOnce","hasParams":true,"isMethod":true,"file":"dist/core/typings/Async/Signal.d.ts","line":73,"code":"connectOnce(handler: () => any): void;\nconnectOnce(method: string, target: object): void;","doc":"<p>[1]. Add a handler to be invoked the next time this signal is emitted.</p>\n<p>[2]. Add a handler to be invoked the next time this signal is emitted: a method with given name on given target object (resolved only when needed).</p>\n","declType":"void | void","count":2},{"id":"Async.Signal.VoidEmittable/disconnectAll","name":"disconnectAll","hasParams":false,"isMethod":true,"file":"dist/core/typings/Async/Signal.d.ts","line":77,"code":"disconnectAll(): this;","doc":"<p>Remove all handlers.</p>\n","declType":"this"},{"id":"Async.Signal.VoidEmittable/isConnected","name":"isConnected","hasParams":false,"isMethod":true,"file":"dist/core/typings/Async/Signal.d.ts","line":79,"code":"isConnected(): boolean;","doc":"<p>Returns true if this signal has any handlers connected to it.</p>\n","declType":"boolean"}]},{"id":"Async.Signal.create","name":"create","hasParams":false,"isStatic":true,"isMethod":true,"file":"dist/core/typings/Async/Signal.d.ts","line":10,"code":"static create(): Signal.VoidEmittable;\nstatic create<DataT>(): Signal.Emittable<DataT>;","doc":"<p>[1]. Create a new emittable signal class without payload.</p>\n<p>[2]. Create a new emittable signal class with given payload type.</p>\n","declType":"Signal.VoidEmittable | Signal.Emittable<DataT>","count":2},{"id":"Async.Signal.onHandlerConnected","name":"onHandlerConnected","isStatic":true,"isProperty":true,"file":"dist/core/typings/Async/Signal.d.ts","line":24,"code":"protected static onHandlerConnected?: () => void;","doc":"<p>Static method that is called synchronously when a first handler is connected (and when a new handler is connected after all had been disconnected); override this in a signal base class, e.g. to add a delayed initialization method.</p>\n","isProtected":true,"declType":"() => void"},{"id":"Async.Signal.onHandlersDisconnected","name":"onHandlersDisconnected","isStatic":true,"isProperty":true,"file":"dist/core/typings/Async/Signal.d.ts","line":26,"code":"protected static onHandlersDisconnected?: () => void;","doc":"<p>Static method that is called synchronously when no more handlers are connected; override this in a signal base class, e.g. to add a delayed deallocation method.</p>\n","isProtected":true,"declType":"() => void"},{"id":"Async.Signal.constructor","name":"new Signal","hasParams":true,"isCtor":true,"file":"dist/core/typings/Async/Signal.d.ts","line":28,"code":"constructor(data: T);","doc":"<p>Create a signal with given payload data, ready to be emitted.</p>\n"},{"id":"Async.Signal/catch","name":"catch","hasParams":true,"isMethod":true,"file":"dist/core/typings/Async/Signal.d.ts","line":34,"code":"catch<O>(onRejected?: (error: Error) => O): Promise<O>;","doc":"<p>Catch errors that occur during execution of all handlers; returns a Promise that resolves to the return value of the callback itself.</p>\n","typeParams":["O"],"declType":"Promise<O>","isAsync":true},{"id":"Async.Signal/data","name":"data","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/Async/Signal.d.ts","line":38,"code":"readonly data: T;","doc":"<p>The payload data for this signal instance.</p>\n","declType":"T"},{"id":"Async.Signal/emit","name":"emit","hasParams":true,"isMethod":true,"file":"dist/core/typings/Async/Signal.d.ts","line":30,"code":"emit(noResults?: boolean): this;","doc":"<p>Invoke all handlers and capture promises of their return values in .results (unless argument is true); works only once; returns this.</p>\n","declType":"this"},{"id":"Async.Signal/results","name":"results","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/Async/Signal.d.ts","line":36,"code":"readonly results: Promise<any>[];","doc":"<p>Array of Promises that resolve to return values of all handlers.</p>\n","declType":"Promise<any>[]","isAsync":true},{"id":"Async.Signal/then","name":"then","hasParams":true,"isMethod":true,"file":"dist/core/typings/Async/Signal.d.ts","line":32,"code":"then<O>(onFulfilled?: (results: any[]) => O, onRejected?: (error: Error) => O): Promise<O>;","doc":"<p>Invoke given callback(s) with return values of all handlers, or any exception that occurred during execution of all handlers; returns a Promise that resolves to the return value of the callback(s) itself.</p>\n","typeParams":["O"],"declType":"Promise<O>","isAsync":true}],"isNamespace":true},{"id":"Async.SignalConnection","name":"SignalConnection","isInterface":true,"file":"dist/core/typings/Async/Signal.d.ts","line":1,"code":"interface SignalConnection","doc":"<p>Encapsulates a handler connected to a signal.</p>\n","items":[{"id":"Async.SignalConnection/disconnect","name":"disconnect","hasParams":false,"isMethod":true,"file":"dist/core/typings/Async/Signal.d.ts","line":3,"code":"disconnect(): void;","doc":"<p>Disconnect the connected handler from this signal.</p>\n","declType":"void"},{"id":"Async.SignalConnection/disconnected","name":"disconnected","isProperty":true,"file":"dist/core/typings/Async/Signal.d.ts","line":5,"code":"disconnected: boolean;","doc":"<p>True if connection has been disconnected.</p>\n","declType":"boolean"}]},{"id":"Async.defer","name":"defer","hasParams":true,"isFunction":true,"file":"dist/core/typings/Async/Defer.d.ts","line":0,"code":"function defer(f: (...args: any[]) => void, args?: any[] | IArguments): void;","doc":"<p>Execute given function only when idle, with given arguments (array or <code>arguments</code> object) if any.</p>\n","declType":"void"},{"id":"Async.deleteObservableProperty","name":"deleteObservableProperty","hasParams":true,"isFunction":true,"file":"dist/core/typings/Async/ObservableObject.d.ts","line":16,"code":"function deleteObservableProperty(obj: object, member: string | number): void;","doc":"<p>Delete the property with given name and clear its observable value.</p>\n","declType":"void"},{"id":"Async.inject","name":"inject","hasParams":true,"isFunction":true,"file":"dist/core/typings/Async/Inject.d.ts","line":1,"code":"function inject<SpecT extends { [name: string]: any; }>(targetClass: Function, spec: SpecT): SpecT;","doc":"<p>Set given injectable observable properties (decorated with <code>injectable</code>) on <em>all</em> instances of given class and derived classes to the given values, except for instances where the property has been overwritten directly; may be called multiple times even with the same properties to redefine their injected value; returns an object that contains the previous injected values (for e.g. overriding an injected function that calls into the previously injected function; when injecting into a derived class, these properties use accessors to return latest overridden injected values on base class(es) dynamically).</p>\n","typeParams":["SpecT extends {\n    [name: string]: any;\n}"],"declType":"SpecT"},{"id":"Async.isObservableProperty","name":"isObservableProperty","hasParams":true,"isFunction":true,"file":"dist/core/typings/Async/ObservableObject.d.ts","line":18,"code":"function isObservableProperty(obj: object, member: string | number): boolean;","doc":"<p>Returns true if property with given name is defined and is observable.</p>\n","declType":"boolean"},{"id":"Async.makeObjectObservable","name":"makeObjectObservable","hasParams":true,"isFunction":true,"file":"dist/core/typings/Async/ObservableObject.d.ts","line":12,"code":"function makeObjectObservable<T extends object>(obj: T): T & ObservableObject;","doc":"<p>Returns a new <code>ObservableObject</code> with properties copied from given object; <code>ObservableValue</code> instances are referenced directly (including getter and setter), Array properties are turned into <code>ObservableArray</code> instances, and plain Object instances into <code>ObservableObject</code> instances; also seals the new instance if the object parameter was sealed, and freezes it if the object parameter was frozen.</p>\n","typeParams":["T extends object"],"declType":"T & ObservableObject"},{"id":"Async.makePropertyObservable","name":"makePropertyObservable","hasParams":true,"isFunction":true,"file":"dist/core/typings/Async/ObservableObject.d.ts","line":14,"code":"function makePropertyObservable(obj: object, member: string | number, instance?: ObservableValue<any>): void;","doc":"<p>Make the property with given name observable; use given observable value instance, if any, otherwise use a new observable value instance that holds the current property value and/or uses the current property getter and setter [requires ES5+ target].</p>\n","declType":"void"},{"id":"Async.observe","name":"observe","hasParams":true,"isFunction":true,"file":"dist/core/typings/Async/Observable.d.ts","line":46,"code":"function observe<T>(f: () => T): ObservableValue<T>;\nfunction observe<T>(promise: PromiseLike<T>): ObservableValue<T>;\nfunction observe<T>(obj: Array<T>): ObservableArray<T>;\nfunction observe<T extends object>(obj: T): T & ObservableObject;","doc":"<p>[1]. Create a (single) observable that holds the return value of the given function, re-evaluated (when subscribed to) whenever one of the observable values used in the getter function change, <em>or</em> (also when not subscribed to) when <code>ObservableValue#value</code> is read after one of the observables used in the getter function (may have) changed its value; note that getters <em>should</em> be pure functions without side effects, creating or setting other observables from the getter will result in an error.</p>\n<p>[2]. Encapsulate given promise as an observable value that is set when the promise resolves; if the promise is already resolved, the observable value is set to the promise’s value immediately; if or when the promise is rejected, the error is stored and will be thrown when trying to obtain the observable value.</p>\n<p>[3]. Returns a new ObservableArray with elements copied from given array; (same as <code>ObservableArray.fromArray</code>; does not observe values of a given <code>ObservableArray</code>, see <code>observeArray</code> instead).</p>\n<p>[4]. Returns a new ObservableObject with properties copied from given object.</p>\n","typeParams":["T"],"declType":"ObservableValue<T> | ObservableValue<T> | ObservableArray<T> | T & ObservableObject","count":4,"textSeeAlso":"Async.unobserved, Async.observable, Async.unobservable","text":[],"sourceIdx":13},{"id":"Async.observeArray","name":"observeArray","hasParams":true,"isFunction":true,"file":"dist/core/typings/Async/ObservableArray.d.ts","line":20,"code":"function observeArray<T>(f: () => (T[] | T | undefined)): ObservableArray<T>;","doc":"<p>Returns an ObservableArray instance based on the result of given function: if the returned value is an array, then all elements are copied to the result; if the returned value is an observable array, all elements are proxied; if the returned value is not an array, the result contains this value as a single element; if the returned value is null or undefined, the result will be an empty array; changes in values/elements are reflected asynchronously.</p>\n","typeParams":["T"],"declType":"ObservableArray<T>","text":[{"title":"Example","content":"<pre><code class=\"language-typescript\">// define a class with a property that *may* be a list of strings\nclass Foo {\n    @Async.observable\n    public bar?: string[];\n}\nvar myFoo = new Foo();\n\n// this becomes an empty array if the `bar` property was undefined:\nvar myObservableArray = Async.observeArray(() =&gt; myFoo.bar);\n\n// so this is always a valid list of uppercase strings:\nvar myMap = myObservableArray.mapObservable(v =&gt; v.toUpperCase());\n</code></pre>\n"}],"sourceIdx":14},{"id":"Async.runYield","name":"runYield","hasParams":true,"isFunction":true,"file":"dist/core/typings/Async/Defer.d.ts","line":1,"code":"function runYield(yieldAll?: boolean): boolean;","doc":"<p>Run a batch of deferred functions; returns true if there are still more deferred functions in the queue, or false if there are none or if already running; set argument to true to run <em>all</em> deferred functions that are currently in the queue (but not those that get added after the call to <code>runYield</code>).</p>\n","declType":"boolean"},{"id":"Async.sleep","name":"sleep","hasParams":true,"isFunction":true,"file":"dist/core/typings/Async/Promise.d.ts","line":28,"code":"function sleep<PromiseT>(ms: number, value?: PromiseT): Promise<PromiseT>;","doc":"<p>Return a promise that will be resolved after a delay.</p>\n","typeParams":["PromiseT"],"declType":"Promise<PromiseT>","isAsync":true},{"id":"Async.unobserved","name":"unobserved","hasParams":true,"isFunction":true,"file":"dist/core/typings/Async/Observable.d.ts","line":54,"code":"function unobserved<T>(f: ((...args: any[]) => T), ...args: any[]): T;","doc":"<p>Invoke given function without recording dependencies on currently evaluating observable values; passes on the <code>this</code> value given to this function, returns the function’s return value.</p>\n","typeParams":["T"],"declType":"T","text":[{"title":"Usage","content":"<p>This function is particularly useful if an observable value getter executes methods or constructors that are not in the scope of the current module, and may or may not create/evaluate further observable values. Since an observable value getter cannot have any side effects, you will need to wrap the code in a call to <code>unobserved</code>.</p>\n<p>E.g. if you are caching an instance of another module’s class on first access of an observable value, you need to use <code>unobserved</code>. See the example below:</p>\n<pre><code class=\"language-typescript\">// this is defined elsewhere: ...\nclass Label {\n    constructor(text: string) { /* ... side effects? ... */ }\n    setText(text: string) { /* ... */ }\n}\n\n// cache a Label instance for an observable value\nvar text = Async.ObservableValue.fromValue(&quot;Hello, world!&quot;);\nvar _label: Label;\nvar label = Async.observe(() =&gt; {\n    var t = text;\n    if (!t) {\n        // forget the cached Label instance, if any\n        _label = undefined;\n    }\n    else if (!_label) {\n        // create a Label, unobserved\n        _label = Async.unobserved(() =&gt; new Label(t));\n    }\n    else {\n        // use the existing instance\n        Async.unobserved(() =&gt; _label.setText(t));\n    }\n    return _label;\n});\n</code></pre>\n<p>However, usually such constructs are better expressed using the <a href=\"~/Async.ObservableValue/map\"><code>.map</code></a> method, since the callback given to this method is always run within <code>unobserved</code> while still depending on the input observable:</p>\n<pre><code class=\"language-typescript\">var _label: Label;\nvar label = Async.observe(() =&gt; text)  // or just &quot;text&quot;.\n    .map(t =&gt; {\n        if (!t) _label = undefined;\n        else if (!_label) _label = new Label(t);\n        else _label.setText(t);\n        return _label;\n    });\n</code></pre>\n"}],"sourceIdx":12},{"id":"Async.injectable","name":"injectable","hasParams":true,"isFunction":true,"file":"dist/core/typings/Async/Inject.d.ts","line":0,"code":"function injectable(target: Object, key: string, descriptor?: PropertyDescriptor): any;","doc":"<p><em>Property decorator</em>, makes a property observable on every instance, with a read-only value shared across all instances taken from an (earlier OR later) call to <code>inject</code>, <em>until</em> the property is directly assigned to [requires ES5+ target] [decorator].</p>\n","isDecorator":true},{"id":"Async.observable","name":"observable","hasParams":true,"isFunction":true,"file":"dist/core/typings/Async/ObservableObject.d.ts","line":24,"code":"function observable(target: Object, key: string, descriptor?: PropertyDescriptor): any;","doc":"<p><em>Property/accessor decorator</em>, makes a property observable on every instance [requires ES5+ target] [decorator].</p>\n","isDecorator":true,"textSeeAlso":"Async.unobservable","text":[{"content":"<p><strong>Note:</strong> properties that are decorated with <code>@observable</code> will <em>not</em> be enumerable on the instance object, because getters and setters are defined on the prototype object. If you need properties to be enumerable, call <code>makePropertyObservable(...)</code> from the constructor instead.</p>\n<p><strong>Note:</strong> values assigned to properties decorated with <code>@observable</code> will be treated specially, if they are arrays or objects created with an object literal:</p>\n<ol>\n<li>Arrays are replaced with instances of <code>ObservableArray</code>; by nature of this class, the array elements are <em>also</em> treated recursively;</li>\n<li>Objects that derive directly from <code>Object</code> are replaced with instances of <code>ObservableObject</code> through <code>makeObjectObservable(...)</code>. By nature of this function, all enumerable properties of the original object will <em>also</em> be treated recursively.</li>\n</ol>\n<p>This recursive behavior makes it easy to implement observable state objects where all properties of the state are observable, but it may lead to performance issues with large data structures. If you only need to observe the object reference itself, use <code>observable_shallow</code>.</p>\n"},{"title":"Example","type":"example","content":"<pre><code class=\"language-typescript\">/** An example class with an observable property */\nclass MyWrapper {\n    @Async.observable\n    value = 0;\n\n    // this method uses the observable value\n    hasValue() {\n        console.log(&quot;Checking... &quot;, this.value);\n        return this.value &gt; 0\n    }\n}\n\n// now, subscribe to changes\nvar wrapper = new MyWrapper();\nvar observable = Async.observe(() =&gt; wrapper.hasValue());\nobservable.subscribe(yesno =&gt; {\n    if (yesno) console.log(&quot;Value is set&quot;);\n    else console.log(&quot;No value set&quot;);\n});\n\n// A bit later, make some changes...\nAsync.sleep(500)\n    .then(() =&gt; { wrapper.value = 2 })\n    .then(() =&gt; Async.sleep(500))\n    .then(() =&gt; { wrapper.value = 3 })\n    .then(() =&gt; Async.sleep(500))\n    .then(() =&gt; { wrapper.value = 0 });\n</code></pre>\n"}],"sourceIdx":3},{"id":"Async.observable_freeze","name":"observable_freeze","hasParams":true,"isFunction":true,"file":"dist/core/typings/Async/ObservableObject.d.ts","line":36,"code":"function observable_freeze(target: Object, key: string, descriptor?: PropertyDescriptor): any;","doc":"<p><em>Property/accessor decorator</em>, makes a property observable on every instance and enforces that values are not undefined or null when read (throws TypeError) and that only instances of Object can be set, which are frozen automatically [requires ES5+ target] [decorator].</p>\n","isDecorator":true,"textSeeAlso":"Async.observable","text":[],"sourceIdx":5},{"id":"Async.observable_not_null","name":"observable_not_null","hasParams":true,"isFunction":true,"file":"dist/core/typings/Async/ObservableObject.d.ts","line":32,"code":"function observable_not_null(target: Object, key: string, descriptor?: PropertyDescriptor): any;","doc":"<p><em>Property/accessor decorator</em>, makes a property observable on every instance and enforces that values are not undefined or null when read (throws TypeError) and that undefined/null values cannot be set (also throws TypeError) [requires ES5+ target] [decorator].</p>\n","isDecorator":true,"textSeeAlso":"Async.observable","text":[],"sourceIdx":6},{"id":"Async.observable_number","name":"observable_number","hasParams":true,"isFunction":true,"file":"dist/core/typings/Async/ObservableObject.d.ts","line":28,"code":"function observable_number(target: Object, key: string, descriptor?: PropertyDescriptor): any;","doc":"<p><em>Property/accessor decorator</em>, makes a property observable on every instance and converts values to numbers using Number(…) when read [requires ES5+ target] [decorator].</p>\n","isDecorator":true,"textSeeAlso":"Async.observable","text":[],"sourceIdx":7},{"id":"Async.observable_seal","name":"observable_seal","hasParams":true,"isFunction":true,"file":"dist/core/typings/Async/ObservableObject.d.ts","line":34,"code":"function observable_seal(target: Object, key: string, descriptor?: PropertyDescriptor): any;","doc":"<p><em>Property/accessor decorator</em>, makes a property observable on every instance and enforces that values are not undefined or null when read (throws TypeError) and that only instances of Object can be set, which are sealed automatically [requires ES5+ target] [decorator].</p>\n","isDecorator":true,"textSeeAlso":"Async.observable","text":[],"sourceIdx":9},{"id":"Async.observable_shallow","name":"observable_shallow","hasParams":true,"isFunction":true,"file":"dist/core/typings/Async/ObservableObject.d.ts","line":30,"code":"function observable_shallow(target: Object, key: string, descriptor?: PropertyDescriptor): any;","doc":"<p><em>Property/accessor decorator</em>, makes a property observable on every instance, as a shallow observable value (i.e. does not read values from observable values assigned to this property; and does not convert arrays to observable arrays nor objects to observable objects) [requires ES5+ target] [decorator].</p>\n","isDecorator":true,"textSeeAlso":"Async.observable, Async.ObservableValue/shallow","text":[{"content":"<p>Use this decorator for properties that may contain larger data structures, where you only want to observe the property itself and not any of the structure’s properties.</p>\n"}],"sourceIdx":4},{"id":"Async.observable_string","name":"observable_string","hasParams":true,"isFunction":true,"file":"dist/core/typings/Async/ObservableObject.d.ts","line":26,"code":"function observable_string(target: Object, key: string, descriptor?: PropertyDescriptor): any;","doc":"<p><em>Property/accessor decorator</em>, makes a property observable on every instance and converts values to strings when read (empty string for null/undefined/NaN) [requires ES5+ target] [decorator].</p>\n","isDecorator":true,"textSeeAlso":"Async.observable","text":[],"sourceIdx":8},{"id":"Async.unobservable","name":"unobservable","hasParams":true,"isFunction":true,"file":"dist/core/typings/Async/ObservableObject.d.ts","line":20,"code":"function unobservable(target: Object, key: string, descriptor?: PropertyDescriptor): any;","doc":"<p><em>Method/accessor decorator</em>, wraps a method or getter (but not setter) in an <code>unobserved</code> call, so that any observable values read by this method (or functions invoked synchronously from within this method) are not marked as dependencies of any currently evaluating observable values [requires ES5+ target] [decorator].</p>\n","isDecorator":true,"textSeeAlso":"Async.observable","text":[{"content":"<p><strong>Note:</strong> properties that are decorated with <code>@unobservable</code> will <em>not</em> be enumerable on the instance object, because the getter wrapper is defined on the prototype object.</p>\n"}],"sourceIdx":10},{"id":"Async.unobservable_memoize_get","name":"unobservable_memoize_get","hasParams":true,"isFunction":true,"file":"dist/core/typings/Async/ObservableObject.d.ts","line":22,"code":"function unobservable_memoize_get(target: Object, key: string, descriptor?: PropertyDescriptor): any;","doc":"<p><em>Read-only-accessor decorator</em>, wraps a getter (without setter) in an <code>unobserved</code> call, so that any observable values read by the accessor (or functions invoked synchronously from within the accessor) are not marked as dependencies of any currently evaluating observable values; defines a read-only property using the result of the accessor call, after the first time it was invoked for each instance [requires ES5+ target] [decorator].</p>\n","isDecorator":true,"textSeeAlso":"Async.observable, Async.unobservable","text":[{"content":"<p><strong>Note:</strong> properties that are decorated with <code>@unobservable_memoize_get</code> will <em>not</em> be enumerable on the instance object <strong>until they are evaluated once</strong>, because the getter wrapper is defined on the prototype object.</p>\n<p>Only when the getter has run once for a given instance, that instance will receive a read-only property that masks the prototype getter.</p>\n"}],"sourceIdx":11},{"id":"Async.UnhandledException","name":"UnhandledException","isVar":true,"file":"dist/core/typings/Async/Signal.d.ts","line":85,"code":"UnhandledException: Signal.Emittable<Error>","doc":"<p>Signal that is emitted for all exceptions that were unhandled during async execution; a custom handler may be added here, the default handler just logs a warning message to the console; to disable this behavior for specific errors, set error.message to a blank string.</p>\n","declType":"Signal.Emittable<Error>","isSignal":true}],"text":[{"content":"<p>This sub module exports classes and functions that implement common ‘async’ patterns, such as promises, signals, and observables.</p>\n<p><a href=\"~/start/async\"><i class=\"fa fa-play\"></i>Get started with the <code>Async</code> module</a></p>\n"}],"isNamespace":true,"sourceIdx":15},{"name":"Typescene Overview","id":"overview","textDocTitle":"Typescene toolkit","textTopic":"Overview","textSkipTitle":"true","textSort":"01","text":[{"content":"<div style=\"text-align: center\">\n    <img src=\"/logo_detail.png\" style=\"width: 16rem; margin-bottom: 2rem\">\n</div>\n"},{"type":"intro","content":"<p><strong>Typescene</strong> is a strongly typed front-end toolkit for modern web applications built with TypeScript. It combines best practices from traditional desktop GUI development, mobile app development, and JavaScript web development in a single framework.</p>\n"},{"content":"<p><i class=\"fa fa-play\"></i> <a href=\"~/start/setup\">Get started</a></p>\n<hr>\n<p>Why build your web apps with Typescene?</p>\n<ul>\n<li><strong>Single-source development</strong> – everything written in TypeScript, no need to switch among HTML, CSS and JS files.</li>\n<li><strong>Intuitive &amp; object-oriented</strong> – modeled after desktop GUI toolkits, mixed with convenient Javascript-isms where possible to keep things DRY.</li>\n<li><strong>Transparent async programming</strong> – no ‘magic’ $scope variables or forced functional paradigms.</li>\n<li><strong>Strong typing</strong> – TypeScript 2+ for top-notch static type checks and IDE auto-complete.</li>\n<li><strong>Support for all modern browsers</strong> and IE9+.</li>\n</ul>\n<p>Typescene encourages developers to write readable, refactorable, coherent code in a single strongly-typed code base, while still taking advantage of the benefits that the modern JavaScript environment offers.</p>\n<p>Learn more about Typescene on the project <a href=\"http://typescene.org\" target=\"_blank\">home page</a>.</p>\n"}],"sourceIdx":33},{"name":"Using the Yeoman generator","id":"start/setup/yeoman","textSort":"01","text":[{"type":"intro","content":"<p>Save time when creating Typescene projects and modules, with the Yeoman scaffolding tool.</p>\n"},{"title":"Installation","content":"<p><a href=\"http://yeoman.io/\" target=\"_blank\">Yeoman</a> is a scaffolding tool that helps you to put together project skeletons for all kinds of frameworks, using specific generator packages for each framework or platform.</p>\n"},{"title":"Installing the generator","subHeading":true,"type":"task","content":"<p>To install the generator for Typescene, run the following command:</p>\n<pre><code class=\"language-bash\">npm install -g yo generator-typescene\n</code></pre>\n"},{"title":"Usage","content":"<p><i class=\"fa fa-hand-o-right\"></i>See the <a href=\"https://www.npmjs.com/package/generator-typescene\" target=\"_blank\">documentation</a> for the Typescene generator package for more detail.</p>\n"},{"title":"Creating an application","subHeading":true,"type":"task","content":"<p>Create an application (in a new folder) with the following commands:</p>\n<pre><code class=\"language-bash\">mkdir my-project\ncd my-project\nyo typescene\n</code></pre>\n"},{"title":"Adding a module","subHeading":true,"type":"task","content":"<p>You can even use the Yeoman generator to add new modules to an existing project:</p>\n<pre><code class=\"language-bash\">yo typescene:module my-new-module\n</code></pre>\n"},{"title":"Running your new app","subHeading":true,"type":"task","content":"<p>Compile and run your application with a few simple commands:</p>\n<ul>\n<li><code>npm run build</code> to compile your code for production (into the <code>dist/</code> and/or <code>public/</code> folders).</li>\n<li><code>npm run start:dev</code> to open a browser and view the result of your application as bundled by Webpack.</li>\n<li>If you used the <code>systemjs</code> option of the Yeoman generator, run <code>npm run watch</code> to compile your code and watch for changes. You can then use a tool such as <code>http-server</code> (from <a href=\"https://www.npmjs.com/package/http-server\" target=\"_blank\">this package</a>) or equivalent to serve the result.</li>\n</ul>\n"},{"title":"Next steps","content":"<p>Add code to your application inside of the <code>src/</code> folder.</p>\n<p><a href=\"~/start/ui\"><i class=\"fa fa-play\"></i>Get started creating UI components</a></p>\n"}],"sourceIdx":35,"textParent":"start/setup"},{"name":"Setting up a new project","id":"start/setup","textSort":"01","textSkipTOC":"true","text":[{"type":"intro","content":"<p>Initialize a folder on your computer to contain your web app’s source files, and set up dependencies for compilation and deployment.</p>\n"},{"title":"Requirements","type":"note","content":"<p>Before you start, you’ll need to make sure that you have a recent version of Node and NPM installed on your computer. Find out more about installing Node and NPM at <a href=\"https://nodejs.org/\" target=\"_blank\">nodejs.org</a>.</p>\n"},{"title":"Topics","content":"<dl>\n<dt><a href=\"~/start/setup/yeoman\"><i class=\"fa fa-file-text-o\"></i>Using the Yeoman generator</a></dt>\n<dd>This is the recommended option for setting up a new project. Yeoman creates all of the required files automatically.</dd>\n<dt><a href=\"~/start/setup/files\"><i class=\"fa fa-file-text-o\"></i>Setting up a project manually</a></dt>\n<dd>Use this option if you need more control over the exact structure and tooling used by your project.</dd>\n</dl>\n"}],"sourceIdx":36,"toc":["start/setup/yeoman","start/setup/files"],"textParent":"start"},{"name":"Property bindings","id":"start/ui/bindings/properties","textSort":"01","text":[],"sourceIdx":39,"textParent":"start/ui/bindings"},{"name":"UI components","id":"start/ui/components","textSort":"01","text":[{"type":"intro","content":"<p>Learn how to use UI components – the basic building blocks of your app’s user interface.</p>\n"}],"sourceIdx":43,"textParent":"start/ui"},{"name":"Using UI components","id":"start/ui","textSort":"01","textSkipTOC":"true","text":[{"type":"intro","content":"<p>Learn how to create and combine UI components, and respond to user interactions through event handling and bindings.</p>\n"},{"title":"About UI components","content":"<p>At its core, Typescene is an object-oriented GUI toolkit for web applications. It provides a set of standard components that you can use to build your user interface (UI) such as buttons, text fields, and containers.</p>\n<p>These components are made available as <strong>classes</strong> in the <code>UI</code> namespace – such as <code>UI.Button</code> and <code>UI.Container</code>. You can extend these classes to build your own UI components, group components together, and respond to user input.</p>\n<p>Typescene avoids the use of markup languages such as HTML or XAML, and instead provides the concept of component <strong>factories</strong> to define the structure of your pages, dialogs, and other components.</p>\n<p>This means that you can use all components in different ways:</p>\n<ul>\n<li><code>new UI.Button(&quot;OK&quot;)</code> creates a button component instance.</li>\n<li><code>class MyButton extends UI.Button</code> defines a custom button class.</li>\n<li><code>let ButtonFactory = UI.Button.with({ label: &quot;OK&quot; })</code> creates a button factory.</li>\n<li><code>new ButtonFactory()</code> creates an instance using a button factory.</li>\n</ul>\n"},{"title":"Topics","content":"<dl>\n<dt><a href=\"~/start/ui/components\"><i class=\"fa fa-file-text-o\"></i>UI components</a></dt>\n<dd>Learn how to use UI components – the basic building blocks of your app’s user interface.</dd>\n<dt><a href=\"~/start/ui/factories\"><i class=\"fa fa-file-text-o\"></i>Component factories</a></dt>\n<dd>Streamline the creation of UI component structures with component factories.</dd>\n<dt><a href=\"~/start/ui/events\"><i class=\"fa fa-file-text-o\"></i>Event handling</a></dt>\n<dd>Respond to user input by connecting to event signals.</dd>\n<dt><a href=\"~/start/ui/bindings\"><i class=\"fa fa-file-text-o\"></i>Bindings</a></dt>\n<dd>Use value, array, and factory bindings to reflect your components’ view state asynchronously.</dd>\n</dl>\n"}],"sourceIdx":44,"toc":["start/ui/components","start/ui/factories","start/ui/events","start/ui/bindings"],"textParent":"start"},{"name":"Understanding Async","id":"start/async","textSort":"01","text":[{"type":"intro","content":"<p>Get familiar with the basic concepts of the Async module. Learn how to use the Async classes and functions in your own application code.</p>\n<ul>\n<li>Signals &amp; Promises</li>\n<li>Property injection</li>\n<li>Observables\n<ul>\n<li>Observable values</li>\n<li>Observable functions</li>\n<li>Observable objects</li>\n<li>Observable arrays</li>\n</ul>\n</li>\n</ul>\n"}],"sourceIdx":45,"textParent":"start"},{"name":"Making a web app","id":"start/app","textSort":"01","text":[{"type":"intro","content":"<p>See how everything comes together with the App module’s classes and functions.</p>\n<ul>\n<li>Page display</li>\n<li>Application class</li>\n<li>Activities</li>\n<li>Routing</li>\n<li>Services</li>\n<li>Layouts</li>\n<li>Http requests</li>\n</ul>\n"}],"sourceIdx":46,"textParent":"start"},{"name":"Playground — Hello, world!","id":"samples/hello","textSort":"01","text":[{"content":"<p>Use this minimal example as a starting point for exploring the UI component APIs.</p>\n"},{"type":"playground","displayResult":"View","content":"<pre><code class=\"language-typescript\">/** The container view component */\nclass View extends UI.Container.with(\n    // add UI components here\n    UI.CenterRow.with(\n        UI.Label.withText(&quot;Hello, world!&quot;)\n    )\n) {\n    // add properties and event handlers here\n    // ...\n}\n</code></pre>\n"}],"sourceIdx":49,"textParent":"samples"},{"name":"UI","id":"UI","textSort":"02","textParent":"reference","items":[{"id":"UI.ActionHandler","name":"ActionHandler","isClass":true,"file":"dist/core/typings/UI/Components/ComponentSignal.d.ts","line":70,"code":"class ActionHandler extends ComponentSignalHandler<never>","doc":"<p>Constructor for a component signal handler (no event data).</p>\n","extends":["UI.ComponentSignalHandler"],"items":[],"inherits":["UI.ComponentSignalHandler.-call","UI.ComponentSignalHandler/connectTo","UI.ComponentSignalHandler/isEventHandler"]},{"id":"UI.Animation","name":"Animation","isClass":true,"file":"dist/core/typings/UI/Animation.d.ts","line":0,"code":"class Animation","doc":"<p>Represents a UI component animation.</p>\n","items":[{"id":"UI.Animation.AnimationControl","name":"AnimationControl","isInterface":true,"file":"dist/core/typings/UI/Animation.d.ts","line":18,"code":"interface AnimationControl<AnimationT extends Animation>","doc":"<p>Represents the public interface for a playing animation.</p>\n","isStatic":true,"typeParams":["AnimationT extends Animation"],"items":[{"id":"UI.Animation.AnimationControl/animation","name":"animation","isProperty":true,"file":"dist/core/typings/UI/Animation.d.ts","line":20,"code":"animation: AnimationT;","doc":"<p>Reference to the animation itself.</p>\n","declType":"AnimationT"},{"id":"UI.Animation.AnimationControl/done","name":"done","isProperty":true,"file":"dist/core/typings/UI/Animation.d.ts","line":24,"code":"done: PromiseLike<AnimationControl<AnimationT>>;","doc":"<p>Promise that resolves to the animation control itself, after the animation is over (duration has passed).</p>\n","declType":"PromiseLike<AnimationControl<AnimationT>>","isAsync":true},{"id":"UI.Animation.AnimationControl/stop","name":"stop","hasParams":false,"isMethod":true,"file":"dist/core/typings/UI/Animation.d.ts","line":22,"code":"stop(): void;","doc":"<p>Stop playing the animation, clear its artifacts.</p>\n","declType":"void"}]},{"id":"UI.Animation.disableAll","name":"disableAll","hasParams":false,"isStatic":true,"isMethod":true,"file":"dist/core/typings/UI/Animation.d.ts","line":3,"code":"static disableAll(): void;","doc":"<p>No description</p>\n","declType":"void"},{"id":"UI.Animation.enableAll","name":"enableAll","hasParams":false,"isStatic":true,"isMethod":true,"file":"dist/core/typings/UI/Animation.d.ts","line":2,"code":"static enableAll(): void;","doc":"<p>No description</p>\n","declType":"void"},{"id":"UI.Animation.isEnabled","name":"isEnabled","isStatic":true,"isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Animation.d.ts","line":4,"code":"static readonly isEnabled: boolean;","doc":"<p>No description</p>\n","declType":"boolean"},{"id":"UI.Animation.constructor","name":"new Animation","hasParams":true,"isCtor":true,"file":"dist/core/typings/UI/Animation.d.ts","line":5,"code":"constructor(name: string);","doc":"<p>No description</p>\n"},{"id":"UI.Animation/duration","name":"duration","isProperty":true,"file":"dist/core/typings/UI/Animation.d.ts","line":10,"code":"duration: number;","doc":"<p>Total duration in milliseconds of (the looping segment of) this animation, set by implementation.</p>\n","declType":"number"},{"id":"UI.Animation/id","name":"id","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Animation.d.ts","line":6,"code":"readonly id: string;","doc":"<p>Unique ID (includes name and a unique number, generated by constructor).</p>\n","declType":"string"},{"id":"UI.Animation/name","name":"name","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Animation.d.ts","line":8,"code":"readonly name: string;","doc":"<p>Name of the animation (not necessarily unique).</p>\n","declType":"string"},{"id":"UI.Animation/play","name":"play","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Animation.d.ts","line":12,"code":"abstract play(component: Component): Animation.AnimationControl<Animation>;","doc":"<p>Play the animation on given component.</p>\n","declType":"Animation.AnimationControl<Animation>"},{"id":"UI.Animation/playOnce","name":"playOnce","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Animation.d.ts","line":14,"code":"playOnce(component: Component): Animation.AnimationControl<Animation>;","doc":"<p>Play the animation once for the entire duration, and then stop it.</p>\n","declType":"Animation.AnimationControl<Animation>"}],"isNamespace":true,"text":[{"content":"<p>This class has no implementation. For a DOM-specific implementation, use <code>UI.DOM.DOMAnimation</code>.</p>\n"},{"title":"Usage","content":"<p>For special effects, use the <code>.play</code>/<code>.playOnce</code> methods, or the component’s <a href=\"~/UI.Component/animate\"><code>animate()</code></a> method:</p>\n<pre><code class=\"language-typescript\">var myAnimation = UI.DOM.DOMAnimation.basic.highlight.yellow.withTiming(600, 400)\n    .togetherWith(UI.DOM.DOMAnimation.basic.highlight.jumpOut\n        .withTiming(400, 400));\nmyAnimation.playOnce(someComponent);\n\n// ... or use component method:\nsomeComponent.animate(myAnimation);\n</code></pre>\n<p>To apply transitions automatically, use the <a href=\"~/UI.Component/animations\"><code>.animations</code></a> property of any component.</p>\n"},{"title":"Transitions example","type":"example","displayResult":"View","content":"<pre><code class=\"language-typescript\">var animLeft = {\n    show: UI.DOM.DOMAnimation.basic.in.fadeLeft.withTiming(500),\n    hide: UI.DOM.DOMAnimation.basic.out.fadeLeft.withTiming(1000, 200),\n    appear: UI.DOM.DOMAnimation.basic.in.fadeDown,\n    disappear: UI.DOM.DOMAnimation.basic.out.fadeUp\n}\nvar animRight = {\n    show: UI.DOM.DOMAnimation.basic.in.fadeRight.withTiming(1000),\n    hide: UI.DOM.DOMAnimation.basic.out.fadeRight.withTiming(1000),\n    appear: UI.DOM.DOMAnimation.basic.in.fadeDown,\n    disappear: UI.DOM.DOMAnimation.basic.out.fadeDown\n}\nclass View extends UI.Container.with(\n    { height: &quot;15rem&quot; },\n    UI.Row.with(\n        UI.PrimaryButton.withLabel(&quot;Toggle show/hide&quot;, &quot;toggle&quot;),\n        UI.PrimaryButton.withLabel(&quot;Remove all&quot;, &quot;removeAll&quot;)\n    ),\n    UI.Container.with(\n        { id: &quot;container&quot; },\n        UI.Divider.with({\n            animations: animRight\n        }),\n        UI.Row.with(\n            { animations: animLeft },\n            UI.tl`Example foo bar qux quux ...`\n        ),\n        UI.Divider.with({\n            animations: animLeft\n        }),\n        UI.Row.with(\n            { animations: animRight },\n            UI.tl`Example foo bar qux quux ...`\n        ),\n    )\n) {\n    container: UI.Container;\n    toggle() {\n        this.container.content.forEach(c =&gt; {\n            if (c) c.hidden = !c.hidden;\n        });\n    }\n    removeAll() {\n        this.container.content = [];\n    }\n}\n</code></pre>\n"}],"sourceIdx":16},{"id":"UI.ArrayBinding","name":"ArrayBinding","isClass":true,"file":"dist/core/typings/UI/Binding.d.ts","line":15,"code":"class ArrayBinding<ItemT> extends Binding<ItemT[]>","doc":"<p>Represents an array property binding, used with component factories to proxy arrays taken from the base component instance onto array properties of its sub components; all arrays are <em>lazily bound</em>, i.e. elements remain undefined until their <code>length</code> property has been evaluated.</p>\n","extends":["UI.Binding"],"typeParams":["ItemT"],"items":[{"id":"UI.ArrayBinding.constructor","name":"new ArrayBinding","hasParams":true,"isCtor":true,"file":"dist/core/typings/UI/Binding.d.ts","line":17,"code":"constructor(sourcePath?: string, getTransform?: (array: any, baseComponent: Component) => any, itemTransform?: (value: any, baseComponent: Component) => ItemT, uniqueValues?: boolean);\nconstructor(sourcePath?: string, getTransform?: (array: any, baseComponent: Component) => any, itemTransform?: (value: any, baseComponent: Component) => (ItemT | ItemT[]), uniqueValues?: boolean, flatten?: boolean);","doc":"<p>[1]. Create a new binding based on the given property name/path, getter transformation function (see <code>Binding</code> constructor), and array element transformation function, to be passed to <code>mapAsync</code> or <code>mapAsyncValues</code> (if <code>uniqueValues</code> argument is true).</p>\n<p>[2]. Create a new binding based on the given property name/path, getter transformation function (see <code>Binding</code> constructor), and array element transformation function, to be passed to <code>mapAsync</code> or <code>mapAsyncValues</code> (if <code>uniqueValues</code> argument is true); if <code>flatten</code> argument is true, the element transformation function may return an array of results as well, to be flattened into the final result (with undefined/null values removed).</p>\n","count":2},{"id":"UI.ArrayBinding/observeArrayOn","name":"observeArrayOn","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Binding.d.ts","line":23,"code":"observeArrayOn(component: Component, name?: string): Async.ObservableArray<ItemT>;","doc":"<p>Make an ObservableArray that is bound to the value on given component (used by factory initializer to apply binding); since accessing the bound value at time of binding may be premature, all array elements remain undefined <em>until</em> the <code>length</code> property is accessed (e.g. from an observable context such as a component renderer).</p>\n","declType":"Async.ObservableArray<ItemT>"},{"id":"UI.ArrayBinding/observeOn","name":"observeOn","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Binding.d.ts","line":21,"code":"observeOn(component: Component, name?: string): Async.ObservableValue<ItemT[]>;","doc":"<p>Make an ObservableValue that is bound to the value on given component (used by factory initializer to apply binding); wraps an observable array in an observable value; for better performance, use <code>.observeArrayOn(...)</code> directly (used by component factory initializer).</p>\n","declType":"Async.ObservableValue<ItemT[]>"}],"textSeeAlso":"UI.Binding, UI.TwoWayBinding, UI.bind, UI.bind2, UI.bindComponents","text":[{"content":"<p>An instance of this class is commonly obtained as the result of the <code>bindComponents</code> function.</p>\n"}],"sourceIdx":19},{"id":"UI.Binding","name":"Binding","isClass":true,"file":"dist/core/typings/UI/Binding.d.ts","line":1,"code":"class Binding<ResultT>","doc":"<p>Represents a property binding, used with component factories to proxy values taken from the base component instance onto properties of its sub components.</p>\n","typeParams":["ResultT"],"items":[{"id":"UI.Binding.constructor","name":"new Binding","hasParams":true,"isCtor":true,"file":"dist/core/typings/UI/Binding.d.ts","line":3,"code":"constructor(sourcePath?: string, getTransform?: (value: any, baseComponent: Component) => (ResultT | Async.ObservableValue<ResultT> | PromiseLike<ResultT>));","doc":"<p>Create a new binding based on the given property name/path (referring to the base component, on which .with or .initializeWith was called; resulting values can also be instances of ObservableValue or Promise), and optionally a transformation function, invoked each time the observed value changes (outside of any observable context, like <code>map</code> on <code>ObservableValue</code>, i.e. no further dependencies are recorded); if no path is specified, the name of the initializer property that contains this binding is used, if any.</p>\n"},{"id":"UI.Binding/observeOn","name":"observeOn","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Binding.d.ts","line":5,"code":"observeOn(component: Component, name?: string): Async.ObservableValue<ResultT>;","doc":"<p>Construct an ObservableValue that is bound to the value on given component (used by factory initializer to apply binding).</p>\n","declType":"Async.ObservableValue<ResultT>"}],"textSeeAlso":"UI.TwoWayBinding, UI.ArrayBinding, UI.bind, UI.bind2, UI.bindComponents","text":[{"content":"<p>An instance of this class is commonly obtained as the result of the <code>bind</code> function.</p>\n"}],"sourceIdx":17},{"id":"UI.Block","name":"Block","isClass":true,"file":"dist/core/typings/UI/Components/Blocks/Block.d.ts","line":2,"code":"class Block extends Component","doc":"<p>Block base class: full-width block component.</p>\n","extends":["UI.Component"],"items":[{"id":"UI.Block.Initializer","name":"Initializer","isInterface":true,"file":"dist/core/typings/UI/Components/Blocks/Block.d.ts","line":14,"code":"interface Initializer extends Component.Initializer","doc":"<p>Initializer for .with({…}).</p>\n","isStatic":true,"extends":["UI.Component.Initializer"],"items":[{"id":"UI.Block.Initializer/displayOptions","name":"displayOptions","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Block.d.ts","line":18,"code":"displayOptions?: Page.DisplayOptions;","doc":"<p>Property initializer: display options (for use when displayed directly on the page).</p>\n","declType":"Page.DisplayOptions"},{"id":"UI.Block.Initializer/overlayPosition","name":"overlayPosition","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Block.d.ts","line":16,"code":"overlayPosition?: OverlayPosition;","doc":"<p>Property initializer: overlay positioning option (to display block as an overlay within its parent container).</p>\n","declType":"OverlayPosition"}],"inherits":["UI.Component.Initializer/ArrowDownKeyPressed","UI.Component.Initializer/ArrowLeftKeyPressed","UI.Component.Initializer/ArrowRightKeyPressed","UI.Component.Initializer/ArrowUpKeyPressed","UI.Component.Initializer/BackspaceKeyPressed","UI.Component.Initializer/Blur","UI.Component.Initializer/Click","UI.Component.Initializer/Clicked","UI.Component.Initializer/DeleteKeyPressed","UI.Component.Initializer/DoubleClick","UI.Component.Initializer/DoubleClicked","UI.Component.Initializer/DragDrop","UI.Component.Initializer/DragEnter","UI.Component.Initializer/DragLeave","UI.Component.Initializer/DragStart","UI.Component.Initializer/EnterKeyPressed","UI.Component.Initializer/EscapeKeyPressed","UI.Component.Initializer/Focus","UI.Component.Initializer/FocusGained","UI.Component.Initializer/FocusLost","UI.Component.Initializer/KeyDown","UI.Component.Initializer/KeyPress","UI.Component.Initializer/MouseContextMenu","UI.Component.Initializer/MouseEnter","UI.Component.Initializer/MouseLeave","UI.Component.Initializer/Press","UI.Component.Initializer/Pressed","UI.Component.Initializer/Rendered","UI.Component.Initializer/SpaceBarPressed","UI.Component.Initializer/animations","UI.Component.Initializer/focusMode","UI.Component.Initializer/hasFocus","UI.Component.Initializer/height","UI.Component.Initializer/hidden","UI.Component.Initializer/id","UI.Component.Initializer/renderOptions","UI.Component.Initializer/selected","UI.Component.Initializer/selectionMode","UI.Component.Initializer/shadowEffect","UI.Component.Initializer/shadowEffectOnFocus","UI.Component.Initializer/shadowEffectOnHover","UI.Component.Initializer/style","UI.Component.Initializer/width"]},{"id":"UI.Block.with","name":"with","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Block.d.ts","line":4,"code":"static with: ComponentFactory.WithMethodNoContent<Block.Initializer>;","doc":"<p>Create a component factory for this class.</p>\n","declType":"ComponentFactory.WithMethodNoContent<Block.Initializer>"},{"id":"UI.Block.OverlayPosition","name":"OverlayPosition","isEnum":true,"file":"dist/core/typings/UI/Components/Blocks/Block.d.ts","line":21,"code":"enum OverlayPosition","doc":"<p>Overlay positioning options.</p>\n","isStatic":true,"items":[{"id":"UI.Block.OverlayPosition.Bottom","name":"Bottom","isStatic":true,"isConst":true,"file":"dist/core/typings/UI/Components/Blocks/Block.d.ts","line":33,"code":"enum OverlayPosition { ...Bottom }","doc":"<p>Bottom (full width).</p>\n"},{"id":"UI.Block.OverlayPosition.BottomEnd","name":"BottomEnd","isStatic":true,"isConst":true,"file":"dist/core/typings/UI/Components/Blocks/Block.d.ts","line":41,"code":"enum OverlayPosition { ...BottomEnd }","doc":"<p>Bottom outside corner (right for default ltr mode).</p>\n"},{"id":"UI.Block.OverlayPosition.BottomLeft","name":"BottomLeft","isStatic":true,"isConst":true,"file":"dist/core/typings/UI/Components/Blocks/Block.d.ts","line":35,"code":"enum OverlayPosition { ...BottomLeft }","doc":"<p>Bottom left corner.</p>\n"},{"id":"UI.Block.OverlayPosition.BottomRight","name":"BottomRight","isStatic":true,"isConst":true,"file":"dist/core/typings/UI/Components/Blocks/Block.d.ts","line":37,"code":"enum OverlayPosition { ...BottomRight }","doc":"<p>Bottom right corner.</p>\n"},{"id":"UI.Block.OverlayPosition.BottomStart","name":"BottomStart","isStatic":true,"isConst":true,"file":"dist/core/typings/UI/Components/Blocks/Block.d.ts","line":39,"code":"enum OverlayPosition { ...BottomStart }","doc":"<p>Bottom inside corner (left for default ltr mode).</p>\n"},{"id":"UI.Block.OverlayPosition.Top","name":"Top","isStatic":true,"isConst":true,"file":"dist/core/typings/UI/Components/Blocks/Block.d.ts","line":23,"code":"enum OverlayPosition { ...Top }","doc":"<p>Top (full width).</p>\n"},{"id":"UI.Block.OverlayPosition.TopEnd","name":"TopEnd","isStatic":true,"isConst":true,"file":"dist/core/typings/UI/Components/Blocks/Block.d.ts","line":31,"code":"enum OverlayPosition { ...TopEnd }","doc":"<p>Top outside corner (right for default ltr mode).</p>\n"},{"id":"UI.Block.OverlayPosition.TopLeft","name":"TopLeft","isStatic":true,"isConst":true,"file":"dist/core/typings/UI/Components/Blocks/Block.d.ts","line":25,"code":"enum OverlayPosition { ...TopLeft }","doc":"<p>Top left corner.</p>\n"},{"id":"UI.Block.OverlayPosition.TopRight","name":"TopRight","isStatic":true,"isConst":true,"file":"dist/core/typings/UI/Components/Blocks/Block.d.ts","line":27,"code":"enum OverlayPosition { ...TopRight }","doc":"<p>Top right corner.</p>\n"},{"id":"UI.Block.OverlayPosition.TopStart","name":"TopStart","isStatic":true,"isConst":true,"file":"dist/core/typings/UI/Components/Blocks/Block.d.ts","line":29,"code":"enum OverlayPosition { ...TopStart }","doc":"<p>Top inside corner (left for default ltr mode).</p>\n"}]},{"id":"UI.Block.constructor","name":"new Block","hasParams":false,"isCtor":true,"file":"dist/core/typings/UI/Components/Blocks/Block.d.ts","line":8,"code":"constructor();","doc":"<p>Create a new empty block component.</p>\n"},{"id":"UI.Block/initializeWith","name":"initializeWith","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Block.d.ts","line":6,"code":"initializeWith: ComponentFactory.InitializeWithMethod<Block.Initializer>;","doc":"<p>Initialize this component with given properties; returns this.</p>\n","declType":"ComponentFactory.InitializeWithMethod<Block.Initializer>"},{"id":"UI.Block/overlayPosition","name":"overlayPosition","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Block.d.ts","line":10,"code":"overlayPosition?: Block.OverlayPosition;","doc":"<p>Overlay position (observed); set to one of the <code>OverlayPosition</code> enum’s values to take this block out of the top-down component flow, and position it relative to its <em>parent</em> container (or to the screen, if displayed directly); note that this block will still move up/down along with the content of the parent container if its <code>scrollable</code> property is true.</p>\n","declType":"Block.OverlayPosition"}],"isNamespace":true,"inherits":["UI.Component.addStyleOverride","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Component/appendChild","UI.Component/contains","UI.Component/displayOptions","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Component/getChildren","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Component/hoverState","UI.Component/id","UI.Component/initialize","UI.Component/out","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/setFormValues","UI.Component/shadowEffect","UI.Component/style","UI.Component/uid","UI.Component/width","UI.Component/Renderer","UI.Component/createComponentSignal","UI.Component/beforeFirstRender","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed"]},{"id":"UI.BlockControl","name":"BlockControl","isClass":true,"file":"dist/core/typings/UI/Components/Controls/BlockControl.d.ts","line":3,"code":"class BlockControl<BlockT extends Block> extends ControlElement","doc":"<p>Represents a control element that contains a block.</p>\n","extends":["UI.ControlElement"],"typeParams":["BlockT extends Block"],"items":[{"id":"UI.BlockControl.Initializer","name":"Initializer","isInterface":true,"file":"dist/core/typings/UI/Components/Controls/BlockControl.d.ts","line":21,"code":"interface Initializer extends ControlElement.Initializer","doc":"<p>initializer for .with({ … }).</p>\n","isStatic":true,"extends":["UI.ControlElement.Initializer"],"items":[{"id":"UI.BlockControl.Initializer/block","name":"block","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/BlockControl.d.ts","line":23,"code":"block?: ComponentFactory.SpecEltOrList;","doc":"<p>Property initializer: content block.</p>\n","declType":"ComponentFactory.SpecEltOrList"}],"inherits":["UI.Component.Initializer/ArrowDownKeyPressed","UI.Component.Initializer/ArrowLeftKeyPressed","UI.Component.Initializer/ArrowRightKeyPressed","UI.Component.Initializer/ArrowUpKeyPressed","UI.Component.Initializer/BackspaceKeyPressed","UI.Component.Initializer/Blur","UI.Component.Initializer/Click","UI.Component.Initializer/Clicked","UI.Component.Initializer/DeleteKeyPressed","UI.Component.Initializer/DoubleClick","UI.Component.Initializer/DoubleClicked","UI.Component.Initializer/DragDrop","UI.Component.Initializer/DragEnter","UI.Component.Initializer/DragLeave","UI.Component.Initializer/DragStart","UI.Component.Initializer/EnterKeyPressed","UI.Component.Initializer/EscapeKeyPressed","UI.Component.Initializer/Focus","UI.Component.Initializer/FocusGained","UI.Component.Initializer/FocusLost","UI.Component.Initializer/KeyDown","UI.Component.Initializer/KeyPress","UI.Component.Initializer/MouseContextMenu","UI.Component.Initializer/MouseEnter","UI.Component.Initializer/MouseLeave","UI.Component.Initializer/Press","UI.Component.Initializer/Pressed","UI.Component.Initializer/Rendered","UI.Component.Initializer/SpaceBarPressed","UI.Component.Initializer/animations","UI.Component.Initializer/focusMode","UI.ControlElement.Initializer/hasFocus","UI.Component.Initializer/height","UI.Component.Initializer/hidden","UI.Component.Initializer/id","UI.Component.Initializer/renderOptions","UI.Component.Initializer/selected","UI.Component.Initializer/selectionMode","UI.Component.Initializer/shadowEffect","UI.Component.Initializer/shadowEffectOnFocus","UI.Component.Initializer/shadowEffectOnHover","UI.ControlElement.Initializer/shrinkwrap","UI.Component.Initializer/style","UI.ControlElement.Initializer/width"]},{"id":"UI.BlockControl.with","name":"with","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Components/Controls/BlockControl.d.ts","line":5,"code":"static with: ComponentFactory.WithMethod<BlockControl.Initializer>;","doc":"<p>Create a component factory for this class.</p>\n","declType":"ComponentFactory.WithMethod<BlockControl.Initializer>"},{"id":"UI.BlockControl.constructor","name":"new BlockControl","hasParams":true,"isCtor":true,"file":"dist/core/typings/UI/Components/Controls/BlockControl.d.ts","line":9,"code":"constructor(block?: BlockT);","doc":"<p>Create a new block control element containing the given block, if any.</p>\n"},{"id":"UI.BlockControl/appendChild","name":"appendChild","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Controls/BlockControl.d.ts","line":15,"code":"appendChild(c?: BlockT): this;","doc":"<p>Set the block for this component (overwrites existing value, if any); returns this.</p>\n","declType":"this"},{"id":"UI.BlockControl/block","name":"block","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/BlockControl.d.ts","line":11,"code":"block?: BlockT;","doc":"<p>Block element, if any (observed).</p>\n","declType":"BlockT"},{"id":"UI.BlockControl/getChildren","name":"getChildren","hasParams":false,"isMethod":true,"file":"dist/core/typings/UI/Components/Controls/BlockControl.d.ts","line":17,"code":"getChildren(): Component[];","doc":"<p>Returns an array of directly contained components (observable).</p>\n","declType":"Component[]"},{"id":"UI.BlockControl/initializeWith","name":"initializeWith","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/BlockControl.d.ts","line":7,"code":"initializeWith: ComponentFactory.InitializeWithMethod<BlockControl.Initializer>;","doc":"<p>Initialize this component with given properties; returns this.</p>\n","declType":"ComponentFactory.InitializeWithMethod<BlockControl.Initializer>"},{"id":"UI.BlockControl/width","name":"width","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/BlockControl.d.ts","line":13,"code":"width: string;","doc":"<p>Overall target width of this component (CSS length; observable, directly modifies <code>.style</code> property, does <em>not</em> retrieve actual component height, may be “auto”); if a width has not been set explicitly, or is set to “auto”, then the value is taken from the width of the container.</p>\n","declType":"string"}],"isNamespace":true,"inherits":["UI.Component.addStyleOverride","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Component/contains","UI.Component/displayOptions","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Component/hoverState","UI.Component/id","UI.Component/initialize","UI.Component/out","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/setFormValues","UI.Component/shadowEffect","UI.ControlElement/shrinkwrap","UI.Component/style","UI.Component/uid","UI.ControlElement/wrapText","UI.Component/Renderer","UI.Component/beforeFirstRender","UI.Component/createComponentSignal","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed"]},{"id":"UI.Button","name":"Button","isClass":true,"file":"dist/core/typings/UI/Components/Controls/Button.d.ts","line":5,"code":"class Button extends ControlElement","doc":"<p>Represents a button control.</p>\n","extends":["UI.ControlElement"],"items":[{"id":"UI.Button.Activation","name":"Activation","isClass":true,"file":"dist/core/typings/UI/Components/Controls/Button.d.ts","line":48,"code":"class Activation","doc":"<p>Contains injectable method for activating targets; instantiated by <code>Button</code>.</p>\n","isStatic":true,"items":[{"id":"UI.Button.Activation/activate","name":"activate","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Controls/Button.d.ts","line":50,"code":"activate(target: any): void;","doc":"<p>Injectable method to activate given target (e.g. URL, or Activity instance or class); default ony handles URLs, <code>Application</code> instance injects more functionality here.</p>\n","declType":"void"}]},{"id":"UI.Button.DropdownClickSignal","name":"DropdownClickSignal","isClass":true,"file":"dist/core/typings/UI/Components/Controls/Button.d.ts","line":45,"code":"class DropdownClickSignal extends ComponentSignal<string | number>","doc":"<p>Signal that is emitted when a dropdown item has been selected.</p>\n","isStatic":true,"extends":["UI.ComponentSignal"],"items":[],"inherits":["Async.Signal.create","Async.Signal.constructor","Async.Signal/catch","Async.Signal/data","Async.Signal/emit","Async.Signal/results","Async.Signal/then"]},{"id":"UI.Button.Initializer","name":"Initializer","isInterface":true,"file":"dist/core/typings/UI/Components/Controls/Button.d.ts","line":53,"code":"interface Initializer extends ControlElement.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["UI.ControlElement.Initializer"],"items":[{"id":"UI.Button.Initializer/DropdownClicked","name":"DropdownClicked","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Button.d.ts","line":77,"code":"DropdownClicked?: string | ButtonDropdownClickHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | ButtonDropdownClickHandler"},{"id":"UI.Button.Initializer/badge","name":"badge","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Button.d.ts","line":63,"code":"badge?: UIValueOrAsync<string | TextLabelFactory>;","doc":"<p>Property initializer: badge text.</p>\n","declType":"UIValueOrAsync<string | TextLabelFactory>"},{"id":"UI.Button.Initializer/disabled","name":"disabled","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Button.d.ts","line":67,"code":"disabled?: UIValueOrAsync<boolean>;","doc":"<p>Property initializer: true to disable the button.</p>\n","declType":"UIValueOrAsync<boolean>"},{"id":"UI.Button.Initializer/dropdown","name":"dropdown","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Button.d.ts","line":71,"code":"dropdown?: UIValueOrAsync<Menu.Option[]>;","doc":"<p>Property initializer: dropdown items.</p>\n","declType":"UIValueOrAsync<Menu.Option[]>"},{"id":"UI.Button.Initializer/icon","name":"icon","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Button.d.ts","line":57,"code":"icon?: UIValueOrAsync<string>;","doc":"<p>Property initializer: icon (before label).</p>\n","declType":"UIValueOrAsync<string>"},{"id":"UI.Button.Initializer/iconAfter","name":"iconAfter","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Button.d.ts","line":59,"code":"iconAfter?: UIValueOrAsync<string>;","doc":"<p>Property initializer: icon (after label).</p>\n","declType":"UIValueOrAsync<string>"},{"id":"UI.Button.Initializer/label","name":"label","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Button.d.ts","line":55,"code":"label?: UIValueOrAsync<string | TextLabelFactory>;","doc":"<p>Property initializer: label text.</p>\n","declType":"UIValueOrAsync<string | TextLabelFactory>"},{"id":"UI.Button.Initializer/primary","name":"primary","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Button.d.ts","line":69,"code":"primary?: UIValueOrAsync<boolean>;","doc":"<p>Property initializer: true to display as primary button.</p>\n","declType":"UIValueOrAsync<boolean>"},{"id":"UI.Button.Initializer/remGutter","name":"remGutter","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Button.d.ts","line":61,"code":"remGutter?: UIValueOrAsync<number>;","doc":"<p>Property initializer: space reserved for icon (rem units).</p>\n","declType":"UIValueOrAsync<number>"},{"id":"UI.Button.Initializer/style_button","name":"style_button","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Button.d.ts","line":75,"code":"style_button?: UIValueOrAsync<Style | Style.StyleSet>;","doc":"<p>Property initializer: button style.</p>\n","declType":"UIValueOrAsync<Style | Style.StyleSet>"},{"id":"UI.Button.Initializer/target","name":"target","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Button.d.ts","line":73,"code":"target?: any;","doc":"<p>Property initializer: target URL, or Activity instance/class.</p>\n"},{"id":"UI.Button.Initializer/tooltipText","name":"tooltipText","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Button.d.ts","line":65,"code":"tooltipText?: UIValueOrAsync<string | TextLabelFactory>;","doc":"<p>Property initializer: tooltip text.</p>\n","declType":"UIValueOrAsync<string | TextLabelFactory>"}],"inherits":["UI.Component.Initializer/ArrowDownKeyPressed","UI.Component.Initializer/ArrowLeftKeyPressed","UI.Component.Initializer/ArrowRightKeyPressed","UI.Component.Initializer/ArrowUpKeyPressed","UI.Component.Initializer/BackspaceKeyPressed","UI.Component.Initializer/Blur","UI.Component.Initializer/Click","UI.Component.Initializer/Clicked","UI.Component.Initializer/DeleteKeyPressed","UI.Component.Initializer/DoubleClick","UI.Component.Initializer/DoubleClicked","UI.Component.Initializer/DragDrop","UI.Component.Initializer/DragEnter","UI.Component.Initializer/DragLeave","UI.Component.Initializer/DragStart","UI.Component.Initializer/EnterKeyPressed","UI.Component.Initializer/EscapeKeyPressed","UI.Component.Initializer/Focus","UI.Component.Initializer/FocusGained","UI.Component.Initializer/FocusLost","UI.Component.Initializer/KeyDown","UI.Component.Initializer/KeyPress","UI.Component.Initializer/MouseContextMenu","UI.Component.Initializer/MouseEnter","UI.Component.Initializer/MouseLeave","UI.Component.Initializer/Press","UI.Component.Initializer/Pressed","UI.Component.Initializer/Rendered","UI.Component.Initializer/SpaceBarPressed","UI.Component.Initializer/animations","UI.Component.Initializer/focusMode","UI.ControlElement.Initializer/hasFocus","UI.Component.Initializer/height","UI.Component.Initializer/hidden","UI.Component.Initializer/id","UI.Component.Initializer/renderOptions","UI.Component.Initializer/selected","UI.Component.Initializer/selectionMode","UI.Component.Initializer/shadowEffect","UI.Component.Initializer/shadowEffectOnFocus","UI.Component.Initializer/shadowEffectOnHover","UI.ControlElement.Initializer/shrinkwrap","UI.Component.Initializer/style","UI.ControlElement.Initializer/width"]},{"id":"UI.Button.with","name":"with","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Button.d.ts","line":7,"code":"static with: ComponentFactory.WithMethodNoContent<Button.Initializer>;","doc":"<p>Create a component factory for this class.</p>\n","declType":"ComponentFactory.WithMethodNoContent<Button.Initializer>"},{"id":"UI.Button.withIcon","name":"withIcon","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Controls/Button.d.ts","line":11,"code":"static withIcon<T extends typeof Button>(this: T, icon: UIValueOrAsync<string>, clickedHandler?: string | PointerHandler): T & ComponentFactory<Button>;","doc":"<p>Initialize a button control factory with given icon and handler.</p>\n","typeParams":["T extends typeof Button"],"declType":"T & ComponentFactory<Button>"},{"id":"UI.Button.withLabel","name":"withLabel","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Controls/Button.d.ts","line":9,"code":"static withLabel<T extends typeof Button>(this: T, label: UIValueOrAsync<string | TextLabelFactory>, clickedHandler?: string | PointerHandler): T & ComponentFactory<Button>;","doc":"<p>Initialize a button control factory with given label and handler.</p>\n","typeParams":["T extends typeof Button"],"declType":"T & ComponentFactory<Button>"},{"id":"UI.Button.constructor","name":"new Button","hasParams":true,"isCtor":true,"file":"dist/core/typings/UI/Components/Controls/Button.d.ts","line":15,"code":"constructor(label?: string | TextLabelFactory, icon?: string);","doc":"<p>Create a button control element.</p>\n"},{"id":"UI.Button/badge","name":"badge","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Button.d.ts","line":25,"code":"badge: string;","doc":"<p>Optional badge text (see <code>Label#badge</code>; observed).</p>\n","declType":"string"},{"id":"UI.Button/disabled","name":"disabled","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Button.d.ts","line":29,"code":"disabled: boolean;","doc":"<p>Disabled state (observed).</p>\n","declType":"boolean"},{"id":"UI.Button/dropdown","name":"dropdown","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Button.d.ts","line":33,"code":"dropdown?: Menu.Option[];","doc":"<p>Dropdown menu options to be displayed when this button is clicked (optional); defaults to undefined, set to array or ObservableArray to enable.</p>\n","declType":"Menu.Option[]"},{"id":"UI.Button/icon","name":"icon","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Button.d.ts","line":19,"code":"icon?: string;","doc":"<p>Optional icon (see <code>Label#icon</code>; observed).</p>\n","declType":"string"},{"id":"UI.Button/iconAfter","name":"iconAfter","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Button.d.ts","line":21,"code":"iconAfter?: string;","doc":"<p>Optional icon to be appended after the label text (observed).</p>\n","declType":"string"},{"id":"UI.Button/initializeWith","name":"initializeWith","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Button.d.ts","line":13,"code":"initializeWith: ComponentFactory.InitializeWithMethod<Button.Initializer>;","doc":"<p>Initialize this component with given properties; returns this.</p>\n","declType":"ComponentFactory.InitializeWithMethod<Button.Initializer>"},{"id":"UI.Button/label","name":"label","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Button.d.ts","line":17,"code":"label: string;","doc":"<p>Button label (observed).</p>\n","declType":"string"},{"id":"UI.Button/primary","name":"primary","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Button.d.ts","line":31,"code":"primary: boolean;","doc":"<p>Set to true to enable Bootstrap style “primary” class.</p>\n","declType":"boolean"},{"id":"UI.Button/remGutter","name":"remGutter","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Button.d.ts","line":23,"code":"remGutter?: number;","doc":"<p>Space reserved for icon (rem units), if &gt; 0 (observed).</p>\n","declType":"number"},{"id":"UI.Button/shrinkwrap","name":"shrinkwrap","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Button.d.ts","line":37,"code":"shrinkwrap: boolean;","doc":"<p>Set to false to expand horizontally within row (observed).</p>\n","declType":"boolean"},{"id":"UI.Button/style_button","name":"style_button","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Controls/Button.d.ts","line":39,"code":"readonly style_button: Style;","doc":"<p>Encapsulation of button element style (observed).</p>\n","declType":"Style"},{"id":"UI.Button/target","name":"target","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Button.d.ts","line":35,"code":"target: any;","doc":"<p>URL/path string, or (App module) <code>Activity</code> instance or <code>Activity</code> class that will be activated when this button is clicked (optional).</p>\n"},{"id":"UI.Button/tooltipText","name":"tooltipText","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Button.d.ts","line":27,"code":"tooltipText: string;","doc":"<p>Tooltip text (observed).</p>\n","declType":"string"},{"id":"UI.Button/DropdownClicked","name":"DropdownClicked","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Controls/Button.d.ts","line":41,"code":"readonly DropdownClicked: ComponentSignal.Emittable<string | number>;","doc":"<p>Signal emitted when a dropdown option has been selected.</p>\n","declType":"ComponentSignal.Emittable<string | number>","isSignal":true}],"isNamespace":true,"inherits":["UI.Component.addStyleOverride","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Component/appendChild","UI.Component/contains","UI.Component/displayOptions","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Component/getChildren","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Component/hoverState","UI.Component/id","UI.Component/initialize","UI.Component/out","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/setFormValues","UI.Component/shadowEffect","UI.Component/style","UI.Component/uid","UI.ControlElement/width","UI.ControlElement/wrapText","UI.Component/Renderer","UI.Component/beforeFirstRender","UI.Component/createComponentSignal","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed"]},{"id":"UI.ButtonDropdownClickHandler","name":"ButtonDropdownClickHandler","isClass":true,"file":"dist/core/typings/UI/Components/Controls/Button.d.ts","line":81,"code":"class ButtonDropdownClickHandler extends ComponentSignalHandler<string | number>","doc":"<p>Constructor for a button dropdown click event handler.</p>\n","extends":["UI.ComponentSignalHandler"],"items":[],"inherits":["UI.ComponentSignalHandler.-call","UI.ComponentSignalHandler/connectTo","UI.ComponentSignalHandler/isEventHandler"]},{"id":"UI.ButtonGroup","name":"ButtonGroup","isClass":true,"file":"dist/core/typings/UI/Components/Controls/ButtonGroup.d.ts","line":4,"code":"class ButtonGroup extends ControlElement","doc":"<p>Represents a button group (toggle, tab, or toolbar) control.</p>\n","extends":["UI.ControlElement"],"items":[{"id":"UI.ButtonGroup.Initializer","name":"Initializer","isInterface":true,"file":"dist/core/typings/UI/Components/Controls/ButtonGroup.d.ts","line":29,"code":"interface Initializer extends ControlElement.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["UI.ControlElement.Initializer"],"items":[{"id":"UI.ButtonGroup.Initializer/buttons","name":"buttons","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/ButtonGroup.d.ts","line":31,"code":"buttons?: ComponentFactory.SpecList;","doc":"<p>Property initializer: buttons to display.</p>\n","declType":"ComponentFactory.SpecList"},{"id":"UI.ButtonGroup.Initializer/selectedIndex","name":"selectedIndex","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/ButtonGroup.d.ts","line":35,"code":"selectedIndex?: UIValueOrAsync<number>;","doc":"<p>Property initializer: index of selected button (use with <code>.selectionMode</code> set to <code>ItemClick</code>).</p>\n","declType":"UIValueOrAsync<number>"},{"id":"UI.ButtonGroup.Initializer/vertical","name":"vertical","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/ButtonGroup.d.ts","line":33,"code":"vertical?: UIValueOrAsync<boolean>;","doc":"<p>Property initializer: true to display buttons vertically.</p>\n","declType":"UIValueOrAsync<boolean>"}],"inherits":["UI.Component.Initializer/ArrowDownKeyPressed","UI.Component.Initializer/ArrowLeftKeyPressed","UI.Component.Initializer/ArrowRightKeyPressed","UI.Component.Initializer/ArrowUpKeyPressed","UI.Component.Initializer/BackspaceKeyPressed","UI.Component.Initializer/Blur","UI.Component.Initializer/Click","UI.Component.Initializer/Clicked","UI.Component.Initializer/DeleteKeyPressed","UI.Component.Initializer/DoubleClick","UI.Component.Initializer/DoubleClicked","UI.Component.Initializer/DragDrop","UI.Component.Initializer/DragEnter","UI.Component.Initializer/DragLeave","UI.Component.Initializer/DragStart","UI.Component.Initializer/EnterKeyPressed","UI.Component.Initializer/EscapeKeyPressed","UI.Component.Initializer/Focus","UI.Component.Initializer/FocusGained","UI.Component.Initializer/FocusLost","UI.Component.Initializer/KeyDown","UI.Component.Initializer/KeyPress","UI.Component.Initializer/MouseContextMenu","UI.Component.Initializer/MouseEnter","UI.Component.Initializer/MouseLeave","UI.Component.Initializer/Press","UI.Component.Initializer/Pressed","UI.Component.Initializer/Rendered","UI.Component.Initializer/SpaceBarPressed","UI.Component.Initializer/animations","UI.Component.Initializer/focusMode","UI.ControlElement.Initializer/hasFocus","UI.Component.Initializer/height","UI.Component.Initializer/hidden","UI.Component.Initializer/id","UI.Component.Initializer/renderOptions","UI.Component.Initializer/selected","UI.Component.Initializer/selectionMode","UI.Component.Initializer/shadowEffect","UI.Component.Initializer/shadowEffectOnFocus","UI.Component.Initializer/shadowEffectOnHover","UI.ControlElement.Initializer/shrinkwrap","UI.Component.Initializer/style","UI.ControlElement.Initializer/width"]},{"id":"UI.ButtonGroup.with","name":"with","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Components/Controls/ButtonGroup.d.ts","line":6,"code":"static with: ComponentFactory.WithMethod<ButtonGroup.Initializer>;","doc":"<p>Create a component factory for this class.</p>\n","declType":"ComponentFactory.WithMethod<ButtonGroup.Initializer>"},{"id":"UI.ButtonGroup.constructor","name":"new ButtonGroup","hasParams":true,"isCtor":true,"file":"dist/core/typings/UI/Components/Controls/ButtonGroup.d.ts","line":10,"code":"constructor(buttons?: Button[]);","doc":"<p>Create a button group element.</p>\n"},{"id":"UI.ButtonGroup/appendChild","name":"appendChild","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Controls/ButtonGroup.d.ts","line":23,"code":"appendChild(button?: Button): this;","doc":"<p>Append a button to this group; returns this.</p>\n","declType":"this"},{"id":"UI.ButtonGroup/buttons","name":"buttons","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/ButtonGroup.d.ts","line":14,"code":"buttons: Array<Button | undefined>;","doc":"<p>Buttons to be displayed as part of the button group, in order (observed).</p>\n","declType":"Array<Button | undefined>"},{"id":"UI.ButtonGroup/getChildren","name":"getChildren","hasParams":false,"isMethod":true,"file":"dist/core/typings/UI/Components/Controls/ButtonGroup.d.ts","line":25,"code":"getChildren(): Component[];","doc":"<p>Returns an array of directly contained components (observable).</p>\n","declType":"Component[]"},{"id":"UI.ButtonGroup/initializeWith","name":"initializeWith","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/ButtonGroup.d.ts","line":8,"code":"initializeWith: ComponentFactory.InitializeWithMethod<ButtonGroup.Initializer>;","doc":"<p>Initialize this component with given properties; returns this.</p>\n","declType":"ComponentFactory.InitializeWithMethod<ButtonGroup.Initializer>"},{"id":"UI.ButtonGroup/selectedIndex","name":"selectedIndex","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/ButtonGroup.d.ts","line":20,"code":"selectedIndex: number;","doc":"<p>Currently selected button index (base 0) or -1 if no selection (observed).</p>\n","declType":"number"},{"id":"UI.ButtonGroup/shrinkwrap","name":"shrinkwrap","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/ButtonGroup.d.ts","line":18,"code":"shrinkwrap: boolean;","doc":"<p>Set to false to expand horizontally within row (observed).</p>\n","declType":"boolean"},{"id":"UI.ButtonGroup/vertical","name":"vertical","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/ButtonGroup.d.ts","line":16,"code":"vertical: boolean;","doc":"<p>Set to true to show buttons from top to bottom (observed).</p>\n","declType":"boolean"},{"id":"UI.ButtonGroup/beforeFirstRender","name":"beforeFirstRender","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Controls/ButtonGroup.d.ts","line":12,"code":"protected beforeFirstRender(renderer: ComponentRenderer<this, any>): void;","doc":"<p>Method that is called immediately after the renderer for this button group is constructed; adds observers for button activation.</p>\n","isProtected":true,"declType":"void"}],"isNamespace":true,"inherits":["UI.Component.addStyleOverride","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Component/contains","UI.Component/displayOptions","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Component/hoverState","UI.Component/id","UI.Component/initialize","UI.Component/out","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/setFormValues","UI.Component/shadowEffect","UI.Component/style","UI.Component/uid","UI.ControlElement/width","UI.ControlElement/wrapText","UI.Component/Renderer","UI.Component/createComponentSignal","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed"]},{"id":"UI.Card","name":"Card","isClass":true,"file":"dist/core/typings/UI/Components/Blocks/Card.d.ts","line":2,"code":"class Card extends Block","doc":"<p>Represents a card block containing a header, content, and a footer.</p>\n","extends":["UI.Block"],"items":[{"id":"UI.Card.Initializer","name":"Initializer","isInterface":true,"file":"dist/core/typings/UI/Components/Blocks/Card.d.ts","line":22,"code":"interface Initializer extends Block.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["UI.Block.Initializer"],"items":[{"id":"UI.Card.Initializer/content","name":"content","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Card.d.ts","line":24,"code":"content?: ComponentFactory.SpecList2;","doc":"<p>Property initializer: content blocks.</p>\n","declType":"ComponentFactory.SpecList2"},{"id":"UI.Card.Initializer/footer","name":"footer","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Card.d.ts","line":28,"code":"footer?: ComponentFactory.SpecEltOrList;","doc":"<p>Property initializer: footer block.</p>\n","declType":"ComponentFactory.SpecEltOrList"},{"id":"UI.Card.Initializer/header","name":"header","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Card.d.ts","line":26,"code":"header?: ComponentFactory.SpecEltOrList;","doc":"<p>Property initializer: header block.</p>\n","declType":"ComponentFactory.SpecEltOrList"}],"inherits":["UI.Component.Initializer/ArrowDownKeyPressed","UI.Component.Initializer/ArrowLeftKeyPressed","UI.Component.Initializer/ArrowRightKeyPressed","UI.Component.Initializer/ArrowUpKeyPressed","UI.Component.Initializer/BackspaceKeyPressed","UI.Component.Initializer/Blur","UI.Component.Initializer/Click","UI.Component.Initializer/Clicked","UI.Component.Initializer/DeleteKeyPressed","UI.Component.Initializer/DoubleClick","UI.Component.Initializer/DoubleClicked","UI.Component.Initializer/DragDrop","UI.Component.Initializer/DragEnter","UI.Component.Initializer/DragLeave","UI.Component.Initializer/DragStart","UI.Component.Initializer/EnterKeyPressed","UI.Component.Initializer/EscapeKeyPressed","UI.Component.Initializer/Focus","UI.Component.Initializer/FocusGained","UI.Component.Initializer/FocusLost","UI.Component.Initializer/KeyDown","UI.Component.Initializer/KeyPress","UI.Component.Initializer/MouseContextMenu","UI.Component.Initializer/MouseEnter","UI.Component.Initializer/MouseLeave","UI.Component.Initializer/Press","UI.Component.Initializer/Pressed","UI.Component.Initializer/Rendered","UI.Component.Initializer/SpaceBarPressed","UI.Component.Initializer/animations","UI.Block.Initializer/displayOptions","UI.Component.Initializer/focusMode","UI.Component.Initializer/hasFocus","UI.Component.Initializer/height","UI.Component.Initializer/hidden","UI.Component.Initializer/id","UI.Block.Initializer/overlayPosition","UI.Component.Initializer/renderOptions","UI.Component.Initializer/selected","UI.Component.Initializer/selectionMode","UI.Component.Initializer/shadowEffect","UI.Component.Initializer/shadowEffectOnFocus","UI.Component.Initializer/shadowEffectOnHover","UI.Component.Initializer/style","UI.Component.Initializer/width"]},{"id":"UI.Card.with","name":"with","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Card.d.ts","line":4,"code":"static with: ComponentFactory.WithMethod<Card.Initializer>;","doc":"<p>Create a component factory for this class.</p>\n","declType":"ComponentFactory.WithMethod<Card.Initializer>"},{"id":"UI.Card.constructor","name":"new Card","hasParams":true,"isCtor":true,"file":"dist/core/typings/UI/Components/Blocks/Card.d.ts","line":8,"code":"constructor(content?: Block[]);","doc":"<p>Create a card block with given content, if any.</p>\n"},{"id":"UI.Card/appendChild","name":"appendChild","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Blocks/Card.d.ts","line":16,"code":"appendChild(block?: Block): this;","doc":"<p>Append a block to this component.</p>\n","declType":"this"},{"id":"UI.Card/content","name":"content","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Card.d.ts","line":14,"code":"content: Array<Block | undefined>;","doc":"<p>Array of main content blocks, stacked top to bottom (observed).</p>\n","declType":"Array<Block | undefined>"},{"id":"UI.Card/footer","name":"footer","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Card.d.ts","line":12,"code":"footer?: Block;","doc":"<p>Block to be displayed as a footer, may be undefined (observed).</p>\n","declType":"Block"},{"id":"UI.Card/getChildren","name":"getChildren","hasParams":false,"isMethod":true,"file":"dist/core/typings/UI/Components/Blocks/Card.d.ts","line":18,"code":"getChildren(): Component[];","doc":"<p>Returns an array of directly contained components (observable).</p>\n","declType":"Component[]"},{"id":"UI.Card/header","name":"header","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Card.d.ts","line":10,"code":"header?: Block;","doc":"<p>Block to be displayed as a header, may be undefined (observed).</p>\n","declType":"Block"},{"id":"UI.Card/initializeWith","name":"initializeWith","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Card.d.ts","line":6,"code":"initializeWith: ComponentFactory.InitializeWithMethod<Card.Initializer>;","doc":"<p>Initialize this component with given properties; returns this.</p>\n","declType":"ComponentFactory.InitializeWithMethod<Card.Initializer>"}],"isNamespace":true,"inherits":["UI.Component.addStyleOverride","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Component/contains","UI.Component/displayOptions","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Component/hoverState","UI.Component/id","UI.Component/initialize","UI.Component/out","UI.Block/overlayPosition","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/setFormValues","UI.Component/shadowEffect","UI.Component/style","UI.Component/uid","UI.Component/width","UI.Component/Renderer","UI.Component/createComponentSignal","UI.Component/beforeFirstRender","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed"]},{"id":"UI.CenterRow","name":"CenterRow","isClass":true,"file":"dist/core/typings/UI/Components/Blocks/Row.d.ts","line":45,"code":"class CenterRow extends Row","doc":"<p>A row element with components aligned in the center.</p>\n","extends":["UI.Row"],"items":[{"id":"UI.CenterRow/horzAlign","name":"horzAlign","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Row.d.ts","line":47,"code":"horzAlign?: \"start\" | \"end\" | \"left\" | \"center\" | \"right\";","doc":"<p>Horizontal positioning of content within the outer boundaries of the row (observed), set to “center” for <code>CenterRow</code> instances.</p>\n","declType":"\"start\" | \"end\" | \"left\" | \"center\" | \"right\""}],"inherits":["UI.Component.addStyleOverride","UI.Row.constructor","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Row/appendChild","UI.Component/contains","UI.Row/content","UI.Component/displayOptions","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Row/getChildren","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Component/hoverState","UI.Component/id","UI.Component/initialize","UI.Row/initializeWith","UI.Component/out","UI.Block/overlayPosition","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/setFormValues","UI.Component/shadowEffect","UI.Row/spacing","UI.Component/style","UI.Component/uid","UI.Row/verticalSpacing","UI.Component/width","UI.Component/Renderer","UI.Component/createComponentSignal","UI.Component/beforeFirstRender","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed"]},{"id":"UI.Checkbox","name":"Checkbox","isClass":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/Checkbox.d.ts","line":3,"code":"class Checkbox extends InputControl","doc":"<p>Represents a single checkbox or radio button control.</p>\n","extends":["UI.InputControl"],"items":[{"id":"UI.Checkbox.Initializer","name":"Initializer","isInterface":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/Checkbox.d.ts","line":35,"code":"interface Initializer extends InputControl.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["UI.InputControl.Initializer"],"items":[{"id":"UI.Checkbox.Initializer/checked","name":"checked","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/Checkbox.d.ts","line":37,"code":"checked?: UIValueOrAsync<boolean | undefined>;","doc":"<p>Property initializer: true to check checkbox/radio.</p>\n","declType":"UIValueOrAsync<boolean | undefined>"},{"id":"UI.Checkbox.Initializer/style_text","name":"style_text","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/Checkbox.d.ts","line":41,"code":"style_text?: UIValueOrAsync<Style | Style.StyleSet>;","doc":"<p>Property initializer: text element style.</p>\n","declType":"UIValueOrAsync<Style | Style.StyleSet>"},{"id":"UI.Checkbox.Initializer/type","name":"type","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/Checkbox.d.ts","line":39,"code":"type?: UIValueOrAsync<Checkbox.Type>;","doc":"<p>Property initializer: checkbox or radio.</p>\n","declType":"UIValueOrAsync<Checkbox.Type>"}],"inherits":["UI.Component.Initializer/ArrowDownKeyPressed","UI.Component.Initializer/ArrowLeftKeyPressed","UI.Component.Initializer/ArrowRightKeyPressed","UI.Component.Initializer/ArrowUpKeyPressed","UI.Component.Initializer/BackspaceKeyPressed","UI.Component.Initializer/Blur","UI.Component.Initializer/Click","UI.Component.Initializer/Clicked","UI.Component.Initializer/DeleteKeyPressed","UI.Component.Initializer/DoubleClick","UI.Component.Initializer/DoubleClicked","UI.Component.Initializer/DragDrop","UI.Component.Initializer/DragEnter","UI.Component.Initializer/DragLeave","UI.Component.Initializer/DragStart","UI.Component.Initializer/EnterKeyPressed","UI.Component.Initializer/EscapeKeyPressed","UI.Component.Initializer/Focus","UI.Component.Initializer/FocusGained","UI.Component.Initializer/FocusLost","UI.Component.Initializer/KeyDown","UI.Component.Initializer/KeyPress","UI.Component.Initializer/MouseContextMenu","UI.Component.Initializer/MouseEnter","UI.Component.Initializer/MouseLeave","UI.Component.Initializer/Press","UI.Component.Initializer/Pressed","UI.Component.Initializer/Rendered","UI.Component.Initializer/SpaceBarPressed","UI.InputControl.Initializer/ValueChange","UI.InputControl.Initializer/ValueInput","UI.Component.Initializer/animations","UI.InputControl.Initializer/disabled","UI.Component.Initializer/focusMode","UI.ControlElement.Initializer/hasFocus","UI.Component.Initializer/height","UI.Component.Initializer/hidden","UI.Component.Initializer/id","UI.InputControl.Initializer/label","UI.InputControl.Initializer/name","UI.Component.Initializer/renderOptions","UI.Component.Initializer/selected","UI.Component.Initializer/selectionMode","UI.Component.Initializer/shadowEffect","UI.Component.Initializer/shadowEffectOnFocus","UI.Component.Initializer/shadowEffectOnHover","UI.ControlElement.Initializer/shrinkwrap","UI.Component.Initializer/style","UI.InputControl.Initializer/style_input","UI.InputControl.Initializer/style_label","UI.InputControl.Initializer/tooltipText","UI.InputControl.Initializer/value","UI.ControlElement.Initializer/width"]},{"id":"UI.Checkbox.with","name":"with","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/Checkbox.d.ts","line":5,"code":"static with: ComponentFactory.WithMethodNoContent<Checkbox.Initializer>;","doc":"<p>Create a component factory for this class.</p>\n","declType":"ComponentFactory.WithMethodNoContent<Checkbox.Initializer>"},{"id":"UI.Checkbox.withName","name":"withName","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/Checkbox.d.ts","line":7,"code":"static withName<T extends typeof Checkbox>(this: T, name: string, label?: string | TextLabelFactory, checked?: boolean, value?: string): T & ComponentFactory<Checkbox>;","doc":"<p>Initialize a checkbox control factory with given values.</p>\n","typeParams":["T extends typeof Checkbox"],"declType":"T & ComponentFactory<Checkbox>"},{"id":"UI.Checkbox.withRadioName","name":"withRadioName","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/Checkbox.d.ts","line":9,"code":"static withRadioName<T extends typeof Checkbox>(this: T, name: string, label?: string | TextLabelFactory, checked?: boolean, value?: string): T & ComponentFactory<Checkbox>;","doc":"<p>Initialize a radio button control factory with given values.</p>\n","typeParams":["T extends typeof Checkbox"],"declType":"T & ComponentFactory<Checkbox>"},{"id":"UI.Checkbox.Type","name":"Type","isEnum":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/Checkbox.d.ts","line":31,"code":"enum Type","doc":"<p>No description</p>\n","isStatic":true,"items":[{"id":"UI.Checkbox.Type.Checkbox","name":"Checkbox","isStatic":true,"isConst":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/Checkbox.d.ts","line":32,"code":"enum Type { ...Checkbox }","doc":"<p>No description</p>\n"},{"id":"UI.Checkbox.Type.Radio","name":"Radio","isStatic":true,"isConst":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/Checkbox.d.ts","line":33,"code":"enum Type { ...Radio }","doc":"<p>No description</p>\n"}]},{"id":"UI.Checkbox.constructor","name":"new Checkbox","hasParams":true,"isCtor":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/Checkbox.d.ts","line":13,"code":"constructor(name?: string, label?: string | TextLabelFactory, type?: Checkbox.Type, checked?: boolean);","doc":"<p>Create a checkbox element.</p>\n"},{"id":"UI.Checkbox/checked","name":"checked","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/Checkbox.d.ts","line":19,"code":"checked: boolean;","doc":"<p>Current selection status (observable).</p>\n","declType":"boolean"},{"id":"UI.Checkbox/getFormValues","name":"getFormValues","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/Checkbox.d.ts","line":23,"code":"getFormValues(result?: any): any;","doc":"<p>Returns an object containing all current values of input elements (observable).</p>\n"},{"id":"UI.Checkbox/initializeWith","name":"initializeWith","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/Checkbox.d.ts","line":11,"code":"initializeWith: ComponentFactory.InitializeWithMethod<Checkbox.Initializer>;","doc":"<p>Initialize this component with given properties; returns this.</p>\n","declType":"ComponentFactory.InitializeWithMethod<Checkbox.Initializer>"},{"id":"UI.Checkbox/setFormValues","name":"setFormValues","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/Checkbox.d.ts","line":25,"code":"setFormValues(values: any): void;","doc":"<p>Sets all input values by element name.</p>\n","declType":"void"},{"id":"UI.Checkbox/shrinkwrap","name":"shrinkwrap","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/Checkbox.d.ts","line":21,"code":"shrinkwrap: boolean;","doc":"<p>Set to false to expand horizontally within row (observed).</p>\n","declType":"boolean"},{"id":"UI.Checkbox/style_text","name":"style_text","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/Checkbox.d.ts","line":27,"code":"readonly style_text: Style;","doc":"<p>Encapsulation of inner text element style (observed).</p>\n","declType":"Style"},{"id":"UI.Checkbox/type","name":"type","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/Checkbox.d.ts","line":15,"code":"type: Checkbox.Type;","doc":"<p>Type: checkbox or radio button (observed), defaults to checkbox.</p>\n","declType":"Checkbox.Type"},{"id":"UI.Checkbox/value","name":"value","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/Checkbox.d.ts","line":17,"code":"value: string;","doc":"<p>Text value used when selected (observed), defaults to “checked”.</p>\n","declType":"string"}],"isNamespace":true,"inherits":["UI.Component.addStyleOverride","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Component/appendChild","UI.Component/contains","UI.InputControl/disabled","UI.Component/displayOptions","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Component/getChildren","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Component/hoverState","UI.Component/id","UI.Component/initialize","UI.InputControl/label","UI.InputControl/name","UI.Component/out","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/shadowEffect","UI.Component/style","UI.InputControl/style_input","UI.InputControl/style_label","UI.InputControl/tooltipText","UI.Component/uid","UI.ControlElement/width","UI.ControlElement/wrapText","UI.Component/beforeFirstRender","UI.Component/createComponentSignal","UI.Component/Renderer","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed","UI.InputControl/ValueChange","UI.InputControl/ValueInput"]},{"id":"UI.CloseControlStack","name":"CloseControlStack","isClass":true,"file":"dist/core/typings/UI/Components/Controls/ControlStack.d.ts","line":34,"code":"class CloseControlStack extends ControlStack","doc":"<p>Represents a stack containing control elements with equal width placed from top to bottom, with spacing set to 0 (no margin).</p>\n","extends":["UI.ControlStack"],"items":[{"id":"UI.CloseControlStack/spacing","name":"spacing","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/ControlStack.d.ts","line":36,"code":"spacing: string;","doc":"<p>No description</p>\n","declType":"string"}],"inherits":["UI.Component.addStyleOverride","UI.ControlStack.constructor","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.ControlStack/appendChild","UI.Component/contains","UI.ControlStack/content","UI.Component/displayOptions","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.ControlStack/getChildren","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.ControlStack/horzAlign","UI.Component/hoverState","UI.Component/id","UI.Component/initialize","UI.ControlStack/initializeWith","UI.Component/out","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/setFormValues","UI.Component/shadowEffect","UI.ControlStack/shrinkwrap","UI.Component/style","UI.Component/uid","UI.ControlElement/width","UI.ControlElement/wrapText","UI.Component/Renderer","UI.Component/createComponentSignal","UI.Component/beforeFirstRender","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed"]},{"id":"UI.CloseRow","name":"CloseRow","isClass":true,"file":"dist/core/typings/UI/Components/Blocks/Row.d.ts","line":35,"code":"class CloseRow extends Row","doc":"<p>Represents a row containing control elements placed horizontally, with spacing set to <code>0</code> (no margin).</p>\n","extends":["UI.Row"],"items":[{"id":"UI.CloseRow/spacing","name":"spacing","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Row.d.ts","line":37,"code":"spacing: string;","doc":"<p>No description</p>\n","declType":"string"},{"id":"UI.CloseRow/verticalSpacing","name":"verticalSpacing","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Row.d.ts","line":38,"code":"verticalSpacing: string;","doc":"<p>No description</p>\n","declType":"string"}],"inherits":["UI.Component.addStyleOverride","UI.Row.constructor","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Row/appendChild","UI.Component/contains","UI.Row/content","UI.Component/displayOptions","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Row/getChildren","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Row/horzAlign","UI.Component/hoverState","UI.Component/id","UI.Component/initialize","UI.Row/initializeWith","UI.Component/out","UI.Block/overlayPosition","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/setFormValues","UI.Component/shadowEffect","UI.Component/style","UI.Component/uid","UI.Component/width","UI.Component/createComponentSignal","UI.Component/Renderer","UI.Component/beforeFirstRender","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed"]},{"id":"UI.Component","name":"Component","isClass":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":6,"code":"class Component extends Async.ObservableObject","doc":"<p>Component base class to represent every part of the user interface, to be extended by application code (e.g. as a sub class of <code>Container</code> or another component class) or constructed from derived component classes (e.g. <code>Button</code>).</p>\n","extends":["Async.ObservableObject"],"items":[{"id":"UI.Component.Animations","name":"Animations","isInterface":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":187,"code":"interface Animations","doc":"<p>Specification of which animations to play during the lifetime of a component on screen (can be extended for sub component types).</p>\n","isStatic":true,"items":[{"id":"UI.Component.Animations/appear","name":"appear","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":189,"code":"appear?: Animation;","doc":"<p>Played when component is displayed or added to a displayed parent component.</p>\n","declType":"Animation"},{"id":"UI.Component.Animations/deselect","name":"deselect","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":199,"code":"deselect?: Animation;","doc":"<p>Played when component is deselected (set <code>selected</code> to false).</p>\n","declType":"Animation"},{"id":"UI.Component.Animations/disappear","name":"disappear","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":191,"code":"disappear?: Animation;","doc":"<p>Played when component is removed from the screen.</p>\n","declType":"Animation"},{"id":"UI.Component.Animations/hide","name":"hide","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":195,"code":"hide?: Animation;","doc":"<p>Played when component is hidden (set <code>hidden</code> to true).</p>\n","declType":"Animation"},{"id":"UI.Component.Animations/select","name":"select","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":197,"code":"select?: Animation;","doc":"<p>Played when component is selected (set <code>selected</code> to true).</p>\n","declType":"Animation"},{"id":"UI.Component.Animations/show","name":"show","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":193,"code":"show?: Animation;","doc":"<p>Played when component is shown (set <code>hidden</code> to false).</p>\n","declType":"Animation"},{"id":"UI.Component.Animations.-index-string","name":"[string]","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":201,"code":"[name: string]: Animation | undefined;","doc":"<p>No description</p>\n","declType":"Animation | undefined"}],"text":[{"content":"<p>See <code>UI.Animation</code> class and <a href=\"~/UI.Component/animations\"><code>.animations</code></a> property for usage details.</p>\n"}],"sourceIdx":21},{"id":"UI.Component.Initializer","name":"Initializer","isInterface":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":231,"code":"interface Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"items":[{"id":"UI.Component.Initializer/ArrowDownKeyPressed","name":"ArrowDownKeyPressed","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":317,"code":"ArrowDownKeyPressed?: string | KeyHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | KeyHandler"},{"id":"UI.Component.Initializer/ArrowLeftKeyPressed","name":"ArrowLeftKeyPressed","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":311,"code":"ArrowLeftKeyPressed?: string | KeyHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | KeyHandler"},{"id":"UI.Component.Initializer/ArrowRightKeyPressed","name":"ArrowRightKeyPressed","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":315,"code":"ArrowRightKeyPressed?: string | KeyHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | KeyHandler"},{"id":"UI.Component.Initializer/ArrowUpKeyPressed","name":"ArrowUpKeyPressed","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":313,"code":"ArrowUpKeyPressed?: string | KeyHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | KeyHandler"},{"id":"UI.Component.Initializer/BackspaceKeyPressed","name":"BackspaceKeyPressed","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":305,"code":"BackspaceKeyPressed?: string | KeyHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | KeyHandler"},{"id":"UI.Component.Initializer/Blur","name":"Blur","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":287,"code":"Blur?: string | ActionHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | ActionHandler"},{"id":"UI.Component.Initializer/Click","name":"Click","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":263,"code":"Click?: string | PointerHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | PointerHandler"},{"id":"UI.Component.Initializer/Clicked","name":"Clicked","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":265,"code":"Clicked?: string | PointerHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | PointerHandler"},{"id":"UI.Component.Initializer/DeleteKeyPressed","name":"DeleteKeyPressed","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":307,"code":"DeleteKeyPressed?: string | KeyHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | KeyHandler"},{"id":"UI.Component.Initializer/DoubleClick","name":"DoubleClick","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":267,"code":"DoubleClick?: string | PointerHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | PointerHandler"},{"id":"UI.Component.Initializer/DoubleClicked","name":"DoubleClicked","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":269,"code":"DoubleClicked?: string | PointerHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | PointerHandler"},{"id":"UI.Component.Initializer/DragDrop","name":"DragDrop","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":299,"code":"DragDrop?: string | DragHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | DragHandler"},{"id":"UI.Component.Initializer/DragEnter","name":"DragEnter","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":295,"code":"DragEnter?: string | DragHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | DragHandler"},{"id":"UI.Component.Initializer/DragLeave","name":"DragLeave","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":297,"code":"DragLeave?: string | DragHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | DragHandler"},{"id":"UI.Component.Initializer/DragStart","name":"DragStart","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":293,"code":"DragStart?: string | DragHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | DragHandler"},{"id":"UI.Component.Initializer/EnterKeyPressed","name":"EnterKeyPressed","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":301,"code":"EnterKeyPressed?: string | KeyHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | KeyHandler"},{"id":"UI.Component.Initializer/EscapeKeyPressed","name":"EscapeKeyPressed","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":309,"code":"EscapeKeyPressed?: string | KeyHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | KeyHandler"},{"id":"UI.Component.Initializer/Focus","name":"Focus","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":285,"code":"Focus?: string | ActionHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | ActionHandler"},{"id":"UI.Component.Initializer/FocusGained","name":"FocusGained","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":289,"code":"FocusGained?: string | ActionHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | ActionHandler"},{"id":"UI.Component.Initializer/FocusLost","name":"FocusLost","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":291,"code":"FocusLost?: string | ActionHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | ActionHandler"},{"id":"UI.Component.Initializer/KeyDown","name":"KeyDown","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":281,"code":"KeyDown?: string | KeyHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | KeyHandler"},{"id":"UI.Component.Initializer/KeyPress","name":"KeyPress","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":283,"code":"KeyPress?: string | KeyHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | KeyHandler"},{"id":"UI.Component.Initializer/MouseContextMenu","name":"MouseContextMenu","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":279,"code":"MouseContextMenu?: string | PointerHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | PointerHandler"},{"id":"UI.Component.Initializer/MouseEnter","name":"MouseEnter","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":275,"code":"MouseEnter?: string | PointerHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | PointerHandler"},{"id":"UI.Component.Initializer/MouseLeave","name":"MouseLeave","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":277,"code":"MouseLeave?: string | PointerHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | PointerHandler"},{"id":"UI.Component.Initializer/Press","name":"Press","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":271,"code":"Press?: string | PointerHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | PointerHandler"},{"id":"UI.Component.Initializer/Pressed","name":"Pressed","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":273,"code":"Pressed?: string | PointerHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | PointerHandler"},{"id":"UI.Component.Initializer/Rendered","name":"Rendered","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":261,"code":"Rendered?: string | ComponentRenderHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | ComponentRenderHandler"},{"id":"UI.Component.Initializer/SpaceBarPressed","name":"SpaceBarPressed","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":303,"code":"SpaceBarPressed?: string | KeyHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | KeyHandler"},{"id":"UI.Component.Initializer/animations","name":"animations","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":257,"code":"animations?: Component.Animations;","doc":"<p>Animations list (not observable, will overwrite all existing ones).</p>\n","declType":"Component.Animations"},{"id":"UI.Component.Initializer/focusMode","name":"focusMode","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":255,"code":"focusMode?: UIValueOrAsync<FocusMode>;","doc":"<p>Property initializer: automatic focus management mode.</p>\n","declType":"UIValueOrAsync<FocusMode>"},{"id":"UI.Component.Initializer/hasFocus","name":"hasFocus","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":253,"code":"hasFocus?: UIValueOrAsync<boolean>;","doc":"<p>Property initializer: true if component should be focused for input.</p>\n","declType":"UIValueOrAsync<boolean>"},{"id":"UI.Component.Initializer/height","name":"height","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":237,"code":"height?: UIValueOrAsync<string>;","doc":"<p>Property initializer: target height (CSS length).</p>\n","declType":"UIValueOrAsync<string>"},{"id":"UI.Component.Initializer/hidden","name":"hidden","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":247,"code":"hidden?: UIValueOrAsync<boolean>;","doc":"<p>Property initializer: true if component should be hidden.</p>\n","declType":"UIValueOrAsync<boolean>"},{"id":"UI.Component.Initializer/id","name":"id","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":233,"code":"id?: string;","doc":"<p>Identifier, used to add a component reference to the base component (on which .with(…) or .initializeWith(…) was called) as a property with given identifier.</p>\n","declType":"string"},{"id":"UI.Component.Initializer/renderOptions","name":"renderOptions","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":259,"code":"renderOptions?: ComponentRenderer.RenderOptions;","doc":"<p>Options for rendering this component (not observable).</p>\n","declType":"ComponentRenderer.RenderOptions"},{"id":"UI.Component.Initializer/selected","name":"selected","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":249,"code":"selected?: UIValueOrAsync<boolean>;","doc":"<p>Property initializer: true if component should be selected.</p>\n","declType":"UIValueOrAsync<boolean>"},{"id":"UI.Component.Initializer/selectionMode","name":"selectionMode","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":251,"code":"selectionMode?: UIValueOrAsync<SelectionMode>;","doc":"<p>Property initializer: automatic selection management mode.</p>\n","declType":"UIValueOrAsync<SelectionMode>"},{"id":"UI.Component.Initializer/shadowEffect","name":"shadowEffect","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":241,"code":"shadowEffect?: UIValueOrAsync<number>;","doc":"<p>Property initializer: 0 (no shadow effect) - 1 (greatest effect).</p>\n","declType":"UIValueOrAsync<number>"},{"id":"UI.Component.Initializer/shadowEffectOnFocus","name":"shadowEffectOnFocus","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":245,"code":"shadowEffectOnFocus?: number;","doc":"<p>Shadow effect when focused component or child: 0 (no shadow effect) - 1 (greatest effect).</p>\n","declType":"number"},{"id":"UI.Component.Initializer/shadowEffectOnHover","name":"shadowEffectOnHover","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":243,"code":"shadowEffectOnHover?: number;","doc":"<p>Shadow effect when hovered over: 0 (no shadow effect) - 1 (greatest effect).</p>\n","declType":"number"},{"id":"UI.Component.Initializer/style","name":"style","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":235,"code":"style?: UIValueOrAsync<Style | Style.StyleSet>;","doc":"<p>Style initializer: object or <code>Style</code> instance.</p>\n","declType":"UIValueOrAsync<Style | Style.StyleSet>"},{"id":"UI.Component.Initializer/width","name":"width","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":239,"code":"width?: UIValueOrAsync<string>;","doc":"<p>Property initializer: target width (CSS length).</p>\n","declType":"UIValueOrAsync<string>"}]},{"id":"UI.Component.addStyleOverride","name":"addStyleOverride","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":86,"code":"static addStyleOverride(style: Style): Style;","doc":"<p>Add a new style override to this component class (and derived classes); does not have any effect on existing component instances, but changes to previously added style overrides are always observed; returns given style instance.</p>\n","declType":"Style"},{"id":"UI.Component.with","name":"with","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":10,"code":"static with: ComponentFactory.WithMethodNoContent<Component.Initializer>;","doc":"<p>Create a component factory for this class, based on given properties and with optional content and/or callback(s).</p>\n","declType":"ComponentFactory.WithMethodNoContent<Component.Initializer>","text":[{"content":"<p>This method accepts a range of different arguments.</p>\n<p>The first argument may be an object (or an <a href=\"~/Async.ObservableObject\"><code>ObservableObject</code></a>) that contains properties that are copied or bound on to the instantiated component. Some properties are handled intelligently, such as <code>.style</code> and signals such as <code>.Clicked</code>.</p>\n<pre><code class=\"language-typescript\">UI.Container.with({\n    // a normal property value:\n    width: &quot;20rem&quot;,\n    // a bound property (named property on the base component):\n    height: UI.bind(&quot;containerHeight&quot;),\n    // a style property (may also be a `UI.Style` instance):\n    style: { background: &quot;#ccc&quot; },\n    // an event handler, bound to a method on the base component:\n    Clicked: &quot;containerClicked&quot;,\n    // an event handler, defined inline:\n    EnterKeyPressed: new UI.ActionHandler(() =&gt; { /* ... */ })\n})\n</code></pre>\n<p>All (other) arguments may also be either a component reference, a nested component factory, or an observable value that contains a nested component or factory. Even a binding that results in a component <em>or</em> component factory works as an argument:</p>\n<pre><code class=\"language-typescript\">UI.Container.with(\n    UI.tl`{h3}Example`,\n    UI.bind(&quot;isValid&quot;, valid =&gt; {\n        // return a component, factory, or undefined here\n        if (valid) return new UI.Label(&quot;OK&quot;);\n        else return UI.Label.withText(&quot;Failed&quot;);\n    })\n)\n</code></pre>\n<p>Finally, you can also pass in one or more callbacks (at any argument position). These are invoked when the component is created, i.e. instantiated and initialized with any previous arguments. A reference to the base component is passed in as well.</p>\n"},{"type":"example","displayResult":"row","content":"<pre><code class=\"language-typescript\">var row = UI.Row.with(\n    { height: &quot;4rem&quot; },\n    UI.TextField.withName(&quot;nameInput&quot;, &quot;&quot;, &quot;Enter your name&quot;),\n    UI.Button.with((button, base) =&gt; {\n        button.label = &quot;Say hello&quot;;\n        button.Clicked.connect(() =&gt; {\n            var name = base.getFormValues().nameInput;\n            App.showMessageBox(&quot;Hello, &quot; + name);\n        });\n    })\n)\n</code></pre>\n<p><strong>Note:</strong> In the callback function above, <code>button</code> is created and initialized, but not yet added to its parent row, and therefore not accessible through <code>base</code>. Neither is the text field. If you need to initialize sub components of the base component after the hierarchy is put together, use a <code>.Rendered</code> event handler instead.</p>\n"}],"sourceIdx":23},{"id":"UI.Component.FocusMode","name":"FocusMode","isEnum":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":203,"code":"enum FocusMode","doc":"<p>Options for automatic focus management.</p>\n","isStatic":true,"items":[{"id":"UI.Component.FocusMode.Auto","name":"Auto","isStatic":true,"isConst":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":209,"code":"enum FocusMode { ...Auto }","doc":"<p>Click, touch, or use keyboard (tab key) to focus.</p>\n"},{"id":"UI.Component.FocusMode.Click","name":"Click","isStatic":true,"isConst":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":207,"code":"enum FocusMode { ...Click }","doc":"<p>Click or touch to focus.</p>\n"},{"id":"UI.Component.FocusMode.Items","name":"Items","isStatic":true,"isConst":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":211,"code":"enum FocusMode { ...Items }","doc":"<p>Focus a child component on click, touch, or up/down arrow key press; child components with focus mode <code>None</code> are ignored.</p>\n"},{"id":"UI.Component.FocusMode.None","name":"None","isStatic":true,"isConst":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":205,"code":"enum FocusMode { ...None }","doc":"<p>Unable to focus this component.</p>\n"}]},{"id":"UI.Component.SelectionMode","name":"SelectionMode","isEnum":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":214,"code":"enum SelectionMode","doc":"<p>Options for automatic selection management.</p>\n","isStatic":true,"items":[{"id":"UI.Component.SelectionMode.Click","name":"Click","isStatic":true,"isConst":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":220,"code":"enum SelectionMode { ...Click }","doc":"<p>Click or touch, or use space bar (while focused) to select.</p>\n"},{"id":"UI.Component.SelectionMode.Focus","name":"Focus","isStatic":true,"isConst":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":218,"code":"enum SelectionMode { ...Focus }","doc":"<p>Focus to select.</p>\n"},{"id":"UI.Component.SelectionMode.ItemClick","name":"ItemClick","isStatic":true,"isConst":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":224,"code":"enum SelectionMode { ...ItemClick }","doc":"<p>Select <em>one</em> child component on click or touch; set selection mode of child components to <code>Click</code> if undefined.</p>\n"},{"id":"UI.Component.SelectionMode.ItemFocus","name":"ItemFocus","isStatic":true,"isConst":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":226,"code":"enum SelectionMode { ...ItemFocus }","doc":"<p>Select <em>one</em> child component on focus; set selection mode of child components to <code>Focus</code> if undefined; to be combined with focus mode <code>Items</code> for directional keyboard navigation.</p>\n"},{"id":"UI.Component.SelectionMode.ItemToggle","name":"ItemToggle","isStatic":true,"isConst":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":228,"code":"enum SelectionMode { ...ItemToggle }","doc":"<p>Toggle selection on child components on click or touch, or space bar (while focused): set selection mode of child components to <code>Toggle</code> if undefined.</p>\n"},{"id":"UI.Component.SelectionMode.None","name":"None","isStatic":true,"isConst":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":216,"code":"enum SelectionMode { ...None }","doc":"<p>Unable to select this component.</p>\n"},{"id":"UI.Component.SelectionMode.Toggle","name":"Toggle","isStatic":true,"isConst":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":222,"code":"enum SelectionMode { ...Toggle }","doc":"<p>Click or touch, or use space bar (while focused) to toggle selection.</p>\n"}]},{"id":"UI.Component.constructor","name":"new Component","hasParams":true,"isCtor":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":8,"code":"constructor(...args: any[]);","doc":"<p>Abstract constructor with any number of arguments.</p>\n"},{"id":"UI.Component/addShadowEffectOnFocus","name":"addShadowEffectOnFocus","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":103,"code":"addShadowEffectOnFocus(d: number): void;","doc":"<p>Override the drop shadow “depth” value while this component or a child component has input focus, with given number between 0 and 1.</p>\n","declType":"void"},{"id":"UI.Component/addShadowEffectOnHover","name":"addShadowEffectOnHover","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":101,"code":"addShadowEffectOnHover(d: number): void;","doc":"<p>Override the drop shadow “depth” value while mouse cursor is hovering over this component, with given number between 0 and 1.</p>\n","declType":"void"},{"id":"UI.Component/animate","name":"animate","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":52,"code":"animate<AnimationT extends Animation>(animation: AnimationT, continuous?: boolean, after?: () => void): Animation.AnimationControl<AnimationT>;\nanimate(animation: string, continuous?: boolean, after?: () => void): Animation.AnimationControl<Animation> | undefined;","doc":"<p>[1]. Play given animation on this component; returns the animation control instance, which can be used to stop the animation manually; given callback is called asynchronously after the animation completes.</p>\n<p>[2]. Play animation on this component (from <code>.animations</code>, by identifier); if found, returns the animation control instance, which can be used to stop the animation manually; given callback is called asynchronously after the animation completes.</p>\n","typeParams":["AnimationT extends Animation"],"declType":"Animation.AnimationControl<AnimationT> | Animation.AnimationControl<Animation> | undefined","count":2},{"id":"UI.Component/animations","name":"animations","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":50,"code":"animations?: Component.Animations;","doc":"<p>Animation(s) to be played during the lifetime of this component on screen; initially undefined.</p>\n","declType":"Component.Animations","text":[{"content":"<p>This is a plain array. See <code>UI.Animation</code> class for an example.</p>\n"}],"sourceIdx":22},{"id":"UI.Component/appendChild","name":"appendChild","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":26,"code":"appendChild(child?: Component): this;","doc":"<p>Add a child component to this component; only supported by components that actually contain other components (e.g. <code>Container</code>), throws an Error otherwise; returns this.</p>\n","declType":"this"},{"id":"UI.Component/contains","name":"contains","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":44,"code":"contains(component: Component): boolean;","doc":"<p>Returns true if given component is a child component of this component or any of its child components (observable, but triggers re-evaluation upon every change in child [sub] components).</p>\n","declType":"boolean"},{"id":"UI.Component/displayOptions","name":"displayOptions","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":56,"code":"displayOptions?: Page.DisplayOptions;","doc":"<p>Object with options to be used when displaying this block as a page component, initially undefined (observed).</p>\n","declType":"Page.DisplayOptions"},{"id":"UI.Component/flowDirection","name":"flowDirection","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":60,"code":"flowDirection?: \"ltr\" | \"rtl\";","doc":"<p>Layout/text flow direction for switching between left-to-right and right-to-left languages; copied from parent to child components just before rendering.</p>\n","declType":"\"ltr\" | \"rtl\""},{"id":"UI.Component/focusMode","name":"focusMode","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":115,"code":"focusMode?: Component.FocusMode;","doc":"<p>Automatic focus management mode.</p>\n","declType":"Component.FocusMode"},{"id":"UI.Component/getActualDimensions","name":"getActualDimensions","hasParams":false,"isMethod":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":90,"code":"getActualDimensions(): { width: number; height: number; };","doc":"<p>Returns the current dimensions for this component, in logical (CSS) pixel units; may return 0x0 if this component is not yet displayed on screen (i.e. use the <code>.Rendered</code> signal and/or a timeout to obtain accurate results).</p>\n","declType":"{\n        width: number;\n        height: number;\n    }"},{"id":"UI.Component/getChildren","name":"getChildren","hasParams":false,"isMethod":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":28,"code":"getChildren(): Component[];","doc":"<p>Returns an array of directly contained components (observable).</p>\n","declType":"Component[]"},{"id":"UI.Component/getComponentById","name":"getComponentById","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":34,"code":"getComponentById(id: string): Component | undefined;\ngetComponentById<C extends Component>(id: string, componentClass: typeof Component & { new (...p: any[]): C; }): C | undefined;","doc":"<p>[1]. Returns the nearest matching child element with given ID, if any (observable).</p>\n<p>[2]. Returns the nearest matching child element with given ID <em>and</em> that is an instance of given class, if any (observable).</p>\n","declType":"Component | undefined | C | undefined","count":2},{"id":"UI.Component/getComponentsByType","name":"getComponentsByType","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":40,"code":"getComponentsByType<C extends Component>(componentClass: { new (...p: any[]): C; }): C[];","doc":"<p>Returns all (recursive) child components that are an instance of given class (observable).</p>\n","typeParams":["C extends Component"],"declType":"C[]"},{"id":"UI.Component/getFormValues","name":"getFormValues","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":46,"code":"getFormValues(result?: {}): any;","doc":"<p>Returns an object containing all current values of input elements (observable).</p>\n"},{"id":"UI.Component/getLastRenderedOutput","name":"getLastRenderedOutput","hasParams":false,"isMethod":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":66,"code":"getLastRenderedOutput(): ComponentRenderer.Output<this, any> | undefined;","doc":"<p>Returns the last rendered output for this component, if any (value of <code>.out</code>); does not trigger a render.</p>\n","declType":"ComponentRenderer.Output<this, any> | undefined"},{"id":"UI.Component/getLastSelectedChild","name":"getLastSelectedChild","hasParams":false,"isMethod":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":32,"code":"getLastSelectedChild(): Component | undefined;","doc":"<p>Returns the last selected directly contained component (observable); evaluated asynchronously if automatic selection management mode is <code>ItemClick</code> or <code>ItemFocus</code>, otherwise evaluated synchronously from current selection status of child components.</p>\n","declType":"Component | undefined"},{"id":"UI.Component/getRenderedOutputAsync","name":"getRenderedOutputAsync","hasParams":false,"isMethod":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":64,"code":"getRenderedOutputAsync(): PromiseLike<ComponentRenderer.Output<this, any>>;","doc":"<p>Wait for this component to be rendered and return a promise for its output (value of <code>.out</code>), unless the component is already rendered, in which case this method returns a resolved promise for the last rendered output; never forces the component to be rendered.</p>\n","declType":"PromiseLike<ComponentRenderer.Output<this, any>>","isAsync":true},{"id":"UI.Component/getSelectedChildren","name":"getSelectedChildren","hasParams":false,"isMethod":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":30,"code":"getSelectedChildren(): Component[];","doc":"<p>Returns a list of currently selected directly contained components, in order of selection (observable).</p>\n","declType":"Component[]"},{"id":"UI.Component/hasFocus","name":"hasFocus","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":117,"code":"hasFocus: boolean;","doc":"<p>True if this component <em>or</em> a child component has input focus, false otherwise; set to true to focus the component itself, if and when available (throws an exception if this component is unable to receive input focus); set to false to remove focus from this component.</p>\n","declType":"boolean"},{"id":"UI.Component/height","name":"height","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":95,"code":"height: string;","doc":"<p>Overall target height of this component (CSS length; observable, directly modifies <code>.style</code> property, does <em>not</em> retrieve actual component height, may be “auto”).</p>\n","declType":"string"},{"id":"UI.Component/hidden","name":"hidden","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":105,"code":"hidden: boolean;","doc":"<p>Set to true to hide this component (observable, directly modifies hidden state of <code>.style</code> and plays show/hide animations).</p>\n","declType":"boolean"},{"id":"UI.Component/hoverState","name":"hoverState","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":121,"code":"readonly hoverState: boolean;","doc":"<p>True if the mouse cursor is hovering over this component, false otherwise; evaluated lazily using <code>.MouseEnter</code> and <code>.MouseLeave</code>, value is <code>false</code> initially until first signal is emitted after this property has been read once.</p>\n","declType":"boolean"},{"id":"UI.Component/id","name":"id","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":22,"code":"id: string;","doc":"<p>Identifier string (optional), may be set by component factory constructor, and used with .getComponentById(…).</p>\n","declType":"string"},{"id":"UI.Component/initialize","name":"initialize","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":14,"code":"initialize(base?: Component): boolean;","doc":"<p>Initialize this component, i.e. apply properties from component factories, if any; called automatically by the highest-level component factory constructor with the base component as argument (i.e. component on which <code>.with</code> was called), can be overridden to initialize other properties before those from the component factory (and invoke <code>super.initialize()</code> manually); returns true only if this component had not been initialized before.</p>\n","declType":"boolean"},{"id":"UI.Component/initializeWith","name":"initializeWith","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":12,"code":"initializeWith: ComponentFactory.InitializeWithMethod<Component.Initializer>;","doc":"<p>Initialize this component with given properties, and with given base component to bind to (if called through a component factory constructor); may be called manually to set additional properties; returns this.</p>\n","declType":"ComponentFactory.InitializeWithMethod<Component.Initializer>","text":[{"content":"<p>This method allows you to use the component factory syntax from a constructor or any other method, which can be useful if you need to include dynamic values (and want to avoid bindings).</p>\n<p>Note that unlike <code>.with</code>, this method has only one argument, so use <code>{ content: [ ... ] }</code> instead of a list of sub component factories if needed.</p>\n"},{"title":"Example","subHeading":true,"type":"example","displayResult":"MyContainer","content":"<pre><code class=\"language-typescript\">class MyContainer extends UI.Container {\n    constructor() {\n        super();\n\n        var date = new Date().toString();\n        this.initializeWith({\n            maxContentWidth: &quot;14rem&quot;,\n            style: { fontStyle: &quot;italic&quot; },\n            content: [\n                UI.Row.with(\n                    { height: &quot;3rem&quot;, style: { background: &quot;#ccc&quot; } },\n                    UI.tl`Initialized with initializeWith`\n                ),\n                UI.Paragraph.withText(date)\n            ]\n        });\n    }\n}\n</code></pre>\n"}],"sourceIdx":24},{"id":"UI.Component/out","name":"out","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":68,"code":"readonly out: ComponentRenderer.Output<this, any> | undefined;","doc":"<p>Rendered output for this component (observable); retrieving this value triggers a render operation, if it was not already subscribed to, e.g. if the component is displayed on screen; the renderer is lazily constructed from the class reference injected into the <code>.Renderer</code> property.</p>\n","declType":"ComponentRenderer.Output<this, any> | undefined"},{"id":"UI.Component/render","name":"render","hasParams":false,"isMethod":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":70,"code":"render(): ComponentRenderer.Output<this, any> | undefined;","doc":"<p>Render this component synchronously, always updating any existing rendered output; this method should <em>not</em> be used unless changes may have occurred outside of the observable context, otherwise read the value from <code>.out</code>, include it on a <code>Page</code>, or use the <code>.display()</code> method where available.</p>\n","declType":"ComponentRenderer.Output<this, any> | undefined"},{"id":"UI.Component/renderOptions","name":"renderOptions","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":58,"code":"renderOptions?: ComponentRenderer.RenderOptions;","doc":"<p>Options for rendering this component (not observable); initially undefined.</p>\n","declType":"ComponentRenderer.RenderOptions"},{"id":"UI.Component/selected","name":"selected","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":108,"code":"selected: boolean;","doc":"<p>Set to true to display this component in a selected state (observable, directly modifies selected state of <code>.style</code> and plays select/deselect animations).</p>\n","declType":"boolean"},{"id":"UI.Component/selectionMode","name":"selectionMode","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":111,"code":"selectionMode?: Component.SelectionMode;","doc":"<p>Automatic selection management mode.</p>\n","declType":"Component.SelectionMode"},{"id":"UI.Component/setFormValues","name":"setFormValues","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":48,"code":"setFormValues(values: any): void;","doc":"<p>Set all input values by element name.</p>\n","declType":"void"},{"id":"UI.Component/shadowEffect","name":"shadowEffect","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":99,"code":"shadowEffect: number;","doc":"<p>Set to a number between 0 and 1 to add a drop shadow to this component (shadow “depth” of 1 creates the illusion of a component lifted off the canvas the furthest, 0 means no shadow at all; observable, directly adds shadow effect to <code>.style</code>).</p>\n","declType":"number"},{"id":"UI.Component/style","name":"style","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":88,"code":"readonly style: Style;","doc":"<p>Read-only reference to an instance of <code>Style</code>, encapsulating CSS styles and classes for this component; for extensible component classes, do not override this property but use static method <code>.addStyleOverride(...)</code> instead.</p>\n","declType":"Style"},{"id":"UI.Component/uid","name":"uid","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":24,"code":"readonly uid: string;","doc":"<p>Globally unique component identifier.</p>\n","declType":"string"},{"id":"UI.Component/width","name":"width","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":97,"code":"width: string;","doc":"<p>Overall target width of this component (CSS length; observable, directly modifies <code>.style</code> property, does <em>not</em> retrieve actual component width, may be “auto”).</p>\n","declType":"string"},{"id":"UI.Component/createComponentSignal","name":"createComponentSignal","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":18,"code":"protected createComponentSignal<DataT, SignalT extends { new (data: DataT): ComponentSignal<DataT>; } = typeof ComponentSignal>(base?: SignalT & (new (data: DataT) => ComponentSignal<DataT>), properties?: {}): ComponentSignal.Emittable<DataT>;","doc":"<p>Returns a new component signal class specific to this component, with optional signal base class which must derive from ComponentSignal; can be used to define custom signals in a component constructor or public property initializer (or memoized get-accessor for lazy initialization); sets static property <code>ComponentSignal.component</code> of the derived signal class to the component instance, as well as any other static properties given.</p>\n","isProtected":true,"typeParams":["DataT","SignalT extends {\n        new (data: DataT): ComponentSignal<DataT>;\n    } = typeof ComponentSignal"],"declType":"ComponentSignal.Emittable<DataT>"},{"id":"UI.Component/beforeFirstRender","name":"beforeFirstRender","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":76,"code":"protected beforeFirstRender(renderer: ComponentRenderer<this, any>): void;","doc":"<p>Method that is called immediately after the renderer for this component is constructed; override this method (and invoke <code>super.beforeFirstRender</code>) to be able to call or inject renderer methods before this component is first rendered.</p>\n","isProtected":true,"declType":"void"},{"id":"UI.Component/Renderer","name":"Renderer","isProperty":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":62,"code":"protected Renderer: typeof ComponentRenderer;","doc":"<p>Primary renderer class for this component; injected globally on the component (sub) class, but can be overwritten by assigning to this property (observable).</p>\n","isProtected":true,"declType":"typeof ComponentRenderer"},{"id":"UI.Component/ArrowDownKeyPressed","name":"ArrowDownKeyPressed","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":183,"code":"readonly ArrowDownKeyPressed: ComponentSignal.Emittable<KeyboardEvent>;","doc":"<p>Signal emitted after the down arrow/d-pad key is pressed (while focused); propagates from child components to parents, until a component consumes the event by connecting to this signal.</p>\n","declType":"ComponentSignal.Emittable<KeyboardEvent>","isSignal":true},{"id":"UI.Component/ArrowLeftKeyPressed","name":"ArrowLeftKeyPressed","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":177,"code":"readonly ArrowLeftKeyPressed: ComponentSignal.Emittable<KeyboardEvent>;","doc":"<p>Signal emitted after the left arrow/d-pad key is pressed (while focused); propagates from child components to parents, until a component consumes the event by connecting to this signal.</p>\n","declType":"ComponentSignal.Emittable<KeyboardEvent>","isSignal":true},{"id":"UI.Component/ArrowRightKeyPressed","name":"ArrowRightKeyPressed","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":181,"code":"readonly ArrowRightKeyPressed: ComponentSignal.Emittable<KeyboardEvent>;","doc":"<p>Signal emitted after the right arrow/d-pad key is pressed (while focused); propagates from child components to parents, until a component consumes the event by connecting to this signal.</p>\n","declType":"ComponentSignal.Emittable<KeyboardEvent>","isSignal":true},{"id":"UI.Component/ArrowUpKeyPressed","name":"ArrowUpKeyPressed","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":179,"code":"readonly ArrowUpKeyPressed: ComponentSignal.Emittable<KeyboardEvent>;","doc":"<p>Signal emitted after the up arrow/d-pad key is pressed (while focused); propagates from child components to parents, until a component consumes the event by connecting to this signal.</p>\n","declType":"ComponentSignal.Emittable<KeyboardEvent>","isSignal":true},{"id":"UI.Component/BackspaceKeyPressed","name":"BackspaceKeyPressed","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":171,"code":"readonly BackspaceKeyPressed: ComponentSignal.Emittable<KeyboardEvent>;","doc":"<p>Signal emitted after the backspace key is pressed (while focused); propagates from child components to parents, until a component consumes the event by connecting to this signal.</p>\n","declType":"ComponentSignal.Emittable<KeyboardEvent>","isSignal":true},{"id":"UI.Component/Blur","name":"Blur","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":151,"code":"readonly Blur: ComponentSignal.Emittable<any>;","doc":"<p>Signal emitted when this component <em>or</em> a child component loses focus; captured from containers down to contained components, not consumed.</p>\n","declType":"ComponentSignal.Emittable<any>","isSignal":true},{"id":"UI.Component/Click","name":"Click","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":127,"code":"readonly Click: ComponentSignal.Emittable<PointerEvent>;","doc":"<p>Signal emitted when this component <em>or</em> a child component is clicked, touched, or otherwise activated; captured from containers down to contained components, not consumed.</p>\n","declType":"ComponentSignal.Emittable<PointerEvent>","isSignal":true},{"id":"UI.Component/Clicked","name":"Clicked","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":129,"code":"readonly Clicked: ComponentSignal.Emittable<PointerEvent>;","doc":"<p>Signal emitted asynchronously after this component <em>or</em> a child component is clicked, touched, or otherwise activated; propagates from child components to parents, until a component consumes the event by connecting to this signal.</p>\n","declType":"ComponentSignal.Emittable<PointerEvent>","isSignal":true},{"id":"UI.Component/DeleteKeyPressed","name":"DeleteKeyPressed","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":173,"code":"readonly DeleteKeyPressed: ComponentSignal.Emittable<KeyboardEvent>;","doc":"<p>Signal emitted after the forward-delete key is pressed (while focused); propagates from child components to parents, until a component consumes the event by connecting to this signal.</p>\n","declType":"ComponentSignal.Emittable<KeyboardEvent>","isSignal":true},{"id":"UI.Component/DoubleClick","name":"DoubleClick","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":131,"code":"readonly DoubleClick: ComponentSignal.Emittable<PointerEvent>;","doc":"<p>Signal emitted when this component <em>or</em> a child component is double-clicked; captured from containers down to contained components, not consumed.</p>\n","declType":"ComponentSignal.Emittable<PointerEvent>","isSignal":true},{"id":"UI.Component/DoubleClicked","name":"DoubleClicked","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":133,"code":"readonly DoubleClicked: ComponentSignal.Emittable<PointerEvent>;","doc":"<p>Signal emitted asynchronously after this component <em>or</em> a child component is double-clicked; propagates from child components to parents, until a component consumes the event by connecting to this signal.</p>\n","declType":"ComponentSignal.Emittable<PointerEvent>","isSignal":true},{"id":"UI.Component/DragDrop","name":"DragDrop","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":163,"code":"readonly DragDrop: ComponentSignal.Emittable<DragEvent>;","doc":"<p>Signal emitted when this element or a child element is the target of a drop after a drag operation; captured from containers down to contained components, not consumed.</p>\n","declType":"ComponentSignal.Emittable<DragEvent>","isSignal":true},{"id":"UI.Component/DragEnter","name":"DragEnter","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":159,"code":"readonly DragEnter: ComponentSignal.Emittable<DragEvent>;","doc":"<p>Signal emitted when a drag operation begins to hover over this component; captured from containers down to contained components, not consumable.</p>\n","declType":"ComponentSignal.Emittable<DragEvent>","isSignal":true},{"id":"UI.Component/DragLeave","name":"DragLeave","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":161,"code":"readonly DragLeave: ComponentSignal.Emittable<DragEvent>;","doc":"<p>Signal emitted when a drag operation has left this component; captured from containers down to contained components, not consumable.</p>\n","declType":"ComponentSignal.Emittable<DragEvent>","isSignal":true},{"id":"UI.Component/DragStart","name":"DragStart","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":157,"code":"readonly DragStart: ComponentSignal.Emittable<DragEvent>;","doc":"<p>Signal emitted when this component <em>or</em> a child component commences a drag operation; captured from containers down to contained components, not consumed.</p>\n","declType":"ComponentSignal.Emittable<DragEvent>","isSignal":true},{"id":"UI.Component/EnterKeyPressed","name":"EnterKeyPressed","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":167,"code":"readonly EnterKeyPressed: ComponentSignal.Emittable<KeyboardEvent>;","doc":"<p>Signal emitted after the enter key is pressed (while focused); propagates from child components to parents, until a component consumes the event by connecting to this signal.</p>\n","declType":"ComponentSignal.Emittable<KeyboardEvent>","isSignal":true},{"id":"UI.Component/EscapeKeyPressed","name":"EscapeKeyPressed","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":175,"code":"readonly EscapeKeyPressed: ComponentSignal.Emittable<KeyboardEvent>;","doc":"<p>Signal emitted after the escape key is pressed (while focused); propagates from child components to parents, until a component consumes the event by connecting to this signal.</p>\n","declType":"ComponentSignal.Emittable<KeyboardEvent>","isSignal":true},{"id":"UI.Component/Focus","name":"Focus","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":149,"code":"readonly Focus: ComponentSignal.Emittable<any>;","doc":"<p>Signal emitted when this component <em>or</em> a child component receives focus; captured from containers down to contained components, not consumed.</p>\n","declType":"ComponentSignal.Emittable<any>","isSignal":true},{"id":"UI.Component/FocusGained","name":"FocusGained","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":153,"code":"readonly FocusGained: ComponentSignal.Emittable<any>;","doc":"<p>Signal emitted asynchronously after this component receives focus; propagates from child components to parents, until a component consumes the event by connecting to this signal.</p>\n","declType":"ComponentSignal.Emittable<any>","isSignal":true},{"id":"UI.Component/FocusLost","name":"FocusLost","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":155,"code":"readonly FocusLost: ComponentSignal.Emittable<any>;","doc":"<p>Signal emitted asynchronously after this component loses focus, and only if <code>.FocusGained</code> was emitted previously; propagates from child components to parents, not consumable.</p>\n","declType":"ComponentSignal.Emittable<any>","isSignal":true},{"id":"UI.Component/KeyDown","name":"KeyDown","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":145,"code":"readonly KeyDown: ComponentSignal.Emittable<KeyboardEvent>;","doc":"<p>Signal emitted when a key is pressed down (while this component <em>or</em> a child component is focused); captured from containers down to contained components, not consumed.</p>\n","declType":"ComponentSignal.Emittable<KeyboardEvent>","isSignal":true},{"id":"UI.Component/KeyPress","name":"KeyPress","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":147,"code":"readonly KeyPress: ComponentSignal.Emittable<KeyboardEvent>;","doc":"<p>Signal emitted after a key is pressed (while this component <em>or</em> a child component is focused); captured from containers down to contained components, not consumed.</p>\n","declType":"ComponentSignal.Emittable<KeyboardEvent>","isSignal":true},{"id":"UI.Component/MouseContextMenu","name":"MouseContextMenu","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":143,"code":"readonly MouseContextMenu: ComponentSignal.Emittable<PointerEvent>;","doc":"<p>Signal emitted when a context menu is requested for this component or a child component (usually by right-clicking); captured from containers down to contained components, not consumed.</p>\n","declType":"ComponentSignal.Emittable<PointerEvent>","isSignal":true},{"id":"UI.Component/MouseEnter","name":"MouseEnter","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":139,"code":"readonly MouseEnter: ComponentSignal.Emittable<PointerEvent>;","doc":"<p>Signal emitted when the cursor begins to hover over this component; captured from containers down to contained components, not consumed.</p>\n","declType":"ComponentSignal.Emittable<PointerEvent>","isSignal":true},{"id":"UI.Component/MouseLeave","name":"MouseLeave","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":141,"code":"readonly MouseLeave: ComponentSignal.Emittable<PointerEvent>;","doc":"<p>Signal emitted when the cursor has left this component; captured from containers down to contained components, not consumed.</p>\n","declType":"ComponentSignal.Emittable<PointerEvent>","isSignal":true},{"id":"UI.Component/Press","name":"Press","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":135,"code":"readonly Press: ComponentSignal.Emittable<PointerEvent>;","doc":"<p>Signal emitted when a mouse button is pressed down, or a touch occurs, on this component <em>or</em> a child component; captured from containers down to contained components, not consumed.</p>\n","declType":"ComponentSignal.Emittable<PointerEvent>","isSignal":true},{"id":"UI.Component/Pressed","name":"Pressed","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":137,"code":"readonly Pressed: ComponentSignal.Emittable<PointerEvent>;","doc":"<p>Signal emitted asynchronously after a mouse button is pressed down, or a touch occurs, on this component <em>or</em> a child component; propagates from child components to parents, until a component consumes the event by connecting to this signal.</p>\n","declType":"ComponentSignal.Emittable<PointerEvent>","isSignal":true},{"id":"UI.Component/Rendered","name":"Rendered","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":72,"code":"readonly Rendered: ComponentSignal.Emittable<ComponentRenderer.Output<this, any>>;","doc":"<p>Signal emitted after updating DOM (render).</p>\n","declType":"ComponentSignal.Emittable<ComponentRenderer.Output<this, any>>","isSignal":true},{"id":"UI.Component/SpaceBarPressed","name":"SpaceBarPressed","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Component.d.ts","line":169,"code":"readonly SpaceBarPressed: ComponentSignal.Emittable<KeyboardEvent>;","doc":"<p>Signal emitted after the space bar is pressed (while focused); propagates from child components to parents, until a component consumes the event by connecting to this signal.</p>\n","declType":"ComponentSignal.Emittable<KeyboardEvent>","isSignal":true}],"isNamespace":true,"inherits":["Async.ObservableObject/addObservableProperty","Async.ObservableObject/hasObservableProperty","Async.ObservableObject/PropertyChange"]},{"id":"UI.ComponentFactory","name":"ComponentFactory","isInterface":true,"file":"dist/core/typings/UI/Components/ComponentFactory.d.ts","line":5,"code":"interface ComponentFactory<T extends Component> extends Function","doc":"<p>Component factory class: constructor creates and initializes a Component.</p>\n","extends":["Function"],"typeParams":["T extends Component"],"items":[{"id":"UI.ComponentFactory.appendChildComponents","name":"appendChildComponents","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/core/typings/UI/Components/ComponentFactory.d.ts","line":76,"code":"function appendChildComponents(type: ComponentFactory.CLevel, acceptFragments?: boolean): (target: typeof Component) => void;","doc":"<p><em>Class decorator</em> for a component class that expects child components (through <code>appendChild</code> method) of given type; the factory will then expand/wrap regular and observable objects, factories, classes, or components into the correct type; if <code>acceptFragments</code> is set, then components constructed from factories with the <code>isFragmentFactory</code> are passed in as-is; used on root component classes, should not need to be used in application code [decorator].</p>\n","declType":"(target: typeof Component) => void"},{"id":"UI.ComponentFactory.applyAsync","name":"applyAsync","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/core/typings/UI/Components/ComponentFactory.d.ts","line":82,"code":"function applyAsync(target: Component, key: string): void;","doc":"<p><em>Property decorator</em> for a property for which values from an initializer spec should be applied asynchronously (using an <code>Async.defer(...)</code> call), instead of being set directly [decorator].</p>\n","declType":"void"},{"id":"UI.ComponentFactory.applyComponentRef","name":"applyComponentRef","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/core/typings/UI/Components/ComponentFactory.d.ts","line":80,"code":"function applyComponentRef(type: ComponentFactory.CLevel): (target: Component, key: string) => void;","doc":"<p><em>Property decorator</em> for a property where values from an initializer spec should be applied as a reference to a component of given type (e.g. <code>Block</code>, <code>ControlElement</code>); the factory will then expand/wrap objects, factories, classes, and components into the correct type [decorator].</p>\n","declType":"(target: Component, key: string) => void"},{"id":"UI.ComponentFactory.applyComponentsArray","name":"applyComponentsArray","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/core/typings/UI/Components/ComponentFactory.d.ts","line":78,"code":"function applyComponentsArray(type: ComponentFactory.CLevel): (target: Component, key: string) => void;","doc":"<p><em>Property decorator</em> for a property where values from an initializer spec should be applied as an (observable) array of components of given type (e.g. <code>Block</code>, <code>ControlElement</code>, <code>TableRow</code>); the factory will then expand/wrap regular and observable arrays of objects, factories, classes, or components into the correct type [decorator].</p>\n","declType":"(target: Component, key: string) => void"},{"id":"UI.ComponentFactory.setterFor","name":"setterFor","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/core/typings/UI/Components/ComponentFactory.d.ts","line":84,"code":"function setterFor(initializerPropertyName: string): MethodDecorator;","doc":"<p><em>Method decorator</em> for the method that should be called to apply the value of an initializer spec property with the given property name; the method should always accept values as well as instances of <code>Async.ObservableValue</code> [decorator].</p>\n","declType":"MethodDecorator"},{"id":"UI.ComponentFactory/FactoryComponent","name":"FactoryComponent","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/ComponentFactory.d.ts","line":7,"code":"readonly FactoryComponent: { new (): T; };","doc":"<p>Component class that this factory was created from.</p>\n","declType":"{\n        new (): T;\n    }"},{"id":"UI.ComponentFactory.CLevel","name":"CLevel","isEnum":true,"file":"dist/core/typings/UI/Components/ComponentFactory.d.ts","line":68,"code":"enum CLevel","doc":"<p>Choices for the level at which components in (array) properties are expected to be; used by factory to expand/wrap initializer property values before appending as child nodes on a component decorated with <code>appendChildComponents</code>, or storing them in a property decorated with <code>applyComponentsArray</code> or <code>applyComponentRef</code>.</p>\n","isStatic":true,"items":[{"id":"UI.ComponentFactory.CLevel.Block","name":"Block","isStatic":true,"isConst":true,"file":"dist/core/typings/UI/Components/ComponentFactory.d.ts","line":71,"code":"enum CLevel { ...Block }","doc":"<p>No description</p>\n"},{"id":"UI.ComponentFactory.CLevel.Container","name":"Container","isStatic":true,"isConst":true,"file":"dist/core/typings/UI/Components/ComponentFactory.d.ts","line":70,"code":"enum CLevel { ...Container }","doc":"<p>No description</p>\n"},{"id":"UI.ComponentFactory.CLevel.ControlElement","name":"ControlElement","isStatic":true,"isConst":true,"file":"dist/core/typings/UI/Components/ComponentFactory.d.ts","line":72,"code":"enum CLevel { ...ControlElement }","doc":"<p>No description</p>\n"},{"id":"UI.ComponentFactory.CLevel.TableHeader","name":"TableHeader","isStatic":true,"isConst":true,"file":"dist/core/typings/UI/Components/ComponentFactory.d.ts","line":74,"code":"enum CLevel { ...TableHeader }","doc":"<p>No description</p>\n"},{"id":"UI.ComponentFactory.CLevel.TableRow","name":"TableRow","isStatic":true,"isConst":true,"file":"dist/core/typings/UI/Components/ComponentFactory.d.ts","line":73,"code":"enum CLevel { ...TableRow }","doc":"<p>No description</p>\n"}]},{"id":"UI.ComponentFactory.InitializeWithMethod","name":"InitializeWithMethod","isType":true,"file":"dist/core/typings/UI/Components/ComponentFactory.d.ts","line":47,"code":"type InitializeWithMethod<InitializerT> = { /** Initialize this component with given properties, and with given base component to bind to (if called through a component factory constructor); may be called manually to set additional properties */ <T extends Component>(this: T, initializerSpec: InitializerT, baseComponent?: Component): T; };","doc":"<p>A generic public [Component].initializeWith(…) method; used as a type <em>only</em> for <code>Component.initializeWith</code> methods.</p>\n","isStatic":true,"typeParams":["InitializerT"],"declType":"{\n        /** Initialize this component with given properties, and with given base component to bind to (if called through a component factory constructor); may be called manually to set additional properties */\n        <T extends Component>(this: T, initializerSpec: InitializerT, baseComponent?: Component): T;\n    }"},{"id":"UI.ComponentFactory.SpecElt","name":"SpecElt","isType":true,"file":"dist/core/typings/UI/Components/ComponentFactory.d.ts","line":52,"code":"type SpecElt = UIValueOrAsync<ComponentFactory<Component> | TextLabelFactory | Component | typeof Component | undefined>;","doc":"<p>A factory initializer element (e.g. control element).</p>\n","isStatic":true,"declType":"UIValueOrAsync<ComponentFactory<Component> | TextLabelFactory | Component | typeof Component | undefined>"},{"id":"UI.ComponentFactory.SpecEltOrList","name":"SpecEltOrList","isType":true,"file":"dist/core/typings/UI/Components/ComponentFactory.d.ts","line":60,"code":"type SpecEltOrList = UIValueOrAsync<SpecElt | Array<SpecElt>>;","doc":"<p>A list of factory initializer elements, or a single element.</p>\n","isStatic":true,"declType":"UIValueOrAsync<SpecElt | Array<SpecElt>>"},{"id":"UI.ComponentFactory.SpecEltOrListTCol","name":"SpecEltOrListTCol","isType":true,"file":"dist/core/typings/UI/Components/ComponentFactory.d.ts","line":62,"code":"type SpecEltOrListTCol = UIValueOrAsync<SpecEltTCol | Array<SpecEltTCol>>;","doc":"<p>A list of factory initializer elements, or a single element; or table content.</p>\n","isStatic":true,"declType":"UIValueOrAsync<SpecEltTCol | Array<SpecEltTCol>>"},{"id":"UI.ComponentFactory.SpecEltTCol","name":"SpecEltTCol","isType":true,"file":"dist/core/typings/UI/Components/ComponentFactory.d.ts","line":54,"code":"type SpecEltTCol = UIValueOrAsync<ComponentFactory<Component> | TextLabelFactory | Component | typeof Component | string | number | undefined>;","doc":"<p>A factory initializer element (e.g. control element) or table content.</p>\n","isStatic":true,"declType":"UIValueOrAsync<ComponentFactory<Component> | TextLabelFactory | Component | typeof Component | string | number | undefined>"},{"id":"UI.ComponentFactory.SpecList","name":"SpecList","isType":true,"file":"dist/core/typings/UI/Components/ComponentFactory.d.ts","line":56,"code":"type SpecList = UIValueOrAsync<Array<SpecElt>>;","doc":"<p>A list of factory initializer elements (e.g. row).</p>\n","isStatic":true,"declType":"UIValueOrAsync<Array<SpecElt>>"},{"id":"UI.ComponentFactory.SpecList2","name":"SpecList2","isType":true,"file":"dist/core/typings/UI/Components/ComponentFactory.d.ts","line":64,"code":"type SpecList2 = UIValueOrAsync<Array<SpecEltOrList>>;","doc":"<p>A list of (lists of) factory initializer elements.</p>\n","isStatic":true,"declType":"UIValueOrAsync<Array<SpecEltOrList>>"},{"id":"UI.ComponentFactory.SpecList2TCol","name":"SpecList2TCol","isType":true,"file":"dist/core/typings/UI/Components/ComponentFactory.d.ts","line":66,"code":"type SpecList2TCol = UIValueOrAsync<Array<SpecEltOrListTCol>>;","doc":"<p>A list of (lists of) factory initializer elements or table content.</p>\n","isStatic":true,"declType":"UIValueOrAsync<Array<SpecEltOrListTCol>>"},{"id":"UI.ComponentFactory.SpecListTCol","name":"SpecListTCol","isType":true,"file":"dist/core/typings/UI/Components/ComponentFactory.d.ts","line":58,"code":"type SpecListTCol = UIValueOrAsync<Array<SpecEltTCol>>;","doc":"<p>A list of factory initializer elements (e.g. row) or table content.</p>\n","isStatic":true,"declType":"UIValueOrAsync<Array<SpecEltTCol>>"},{"id":"UI.ComponentFactory.WithMethod","name":"WithMethod","isType":true,"file":"dist/core/typings/UI/Components/ComponentFactory.d.ts","line":36,"code":"type WithMethod<InitializerT> = { /** Create a component factory for this class, based on given properties and with optional content and/or callback(s) */ <ClassT extends typeof Component, T extends Component>(this: ClassT & { new (): T; }, initializerSpec: InitializerT, ...args: Array<((component: T, base: Component) => void) | SpecEltOrList>): ClassT & ComponentFactory<T>; /** Create a component factory for this class, with given content and/or callback(s) */ <ClassT extends typeof Component, T extends Component>(this: ClassT & { new (): T; }, ...args: Array<((component: T, base: Component) => void) | SpecEltOrList>): ClassT & ComponentFactory<T>; };","doc":"<p>A generic static [ComponentClass].with(…) method that accepts given initializer type, plus optional callbacks and/or child content; used as a type <em>only</em> for static <code>Component.with</code> methods.</p>\n","isStatic":true,"typeParams":["InitializerT"],"declType":"{\n        /** Create a component factory for this class, based on given properties and with optional content and/or callback(s) */\n        <ClassT extends typeof Component, T extends Component>(this: ClassT & {\n            new (): T;\n        }, initializerSpec: InitializerT, ...args: Array<((component: T, base: Component) => void) | SpecEltOrList>): ClassT & ComponentFactory<T>;\n        /** Create a component factory for this class, with given content and/or callback(s) */\n        <ClassT extends typeof Component, T extends Component>(this: ClassT & {\n            new (): T;\n        }, ...args: Array<((component: T, base: Component) => void) | SpecEltOrList>): ClassT & ComponentFactory<T>;\n    }"},{"id":"UI.ComponentFactory.WithMethodNoContent","name":"WithMethodNoContent","isType":true,"file":"dist/core/typings/UI/Components/ComponentFactory.d.ts","line":25,"code":"type WithMethodNoContent<InitializerT> = { /** Create a component factory for this class, based on given properties and with optional callback(s) */ <ClassT extends typeof Component, T extends Component>(this: ClassT & { new (): T; }, initializerSpec: InitializerT, ...args: Array<(component: T, base: Component) => void>): ClassT & ComponentFactory<T>; /** Create a component factory for this class, based on given properties and with optional callback(s) */ <ClassT extends typeof Component, T extends Component>(this: ClassT & { new (): T; }, ...args: Array<(component: T, base: Component) => void>): ClassT & ComponentFactory<T>; };","doc":"<p>A generic static [ComponentClass].with(…) method that accepts given initializer type, and/or callbacks, but NO child content; used as a type <em>only</em> for static <code>Component.with</code> methods.</p>\n","isStatic":true,"typeParams":["InitializerT"],"declType":"{\n        /** Create a component factory for this class, based on given properties and with optional callback(s) */\n        <ClassT extends typeof Component, T extends Component>(this: ClassT & {\n            new (): T;\n        }, initializerSpec: InitializerT, ...args: Array<(component: T, base: Component) => void>): ClassT & ComponentFactory<T>;\n        /** Create a component factory for this class, based on given properties and with optional callback(s) */\n        <ClassT extends typeof Component, T extends Component>(this: ClassT & {\n            new (): T;\n        }, ...args: Array<(component: T, base: Component) => void>): ClassT & ComponentFactory<T>;\n    }"},{"id":"UI.ComponentFactory.constructor","name":"new","hasParams":false,"isCtor":true,"file":"dist/core/typings/UI/Components/ComponentFactory.d.ts","line":21,"code":"new (): T;","doc":"<p>Contruct the component with all properties contained in this factory.</p>\n","declType":"T"},{"id":"UI.ComponentFactory/componentFactoryId","name":"componentFactoryId","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/ComponentFactory.d.ts","line":11,"code":"readonly componentFactoryId: string;","doc":"<p>Unique factory identifier.</p>\n","declType":"string"},{"id":"UI.ComponentFactory/isBaseComponent","name":"isBaseComponent","isProperty":true,"file":"dist/core/typings/UI/Components/ComponentFactory.d.ts","line":17,"code":"isBaseComponent?: boolean;","doc":"<p>Flag that is unset when this component factory is used from within another component factory (i.e. when created components are not base components); if true, the <code>Component#initialize</code> method is called by the constructor, otherwise by the containing component factory.</p>\n","declType":"boolean"},{"id":"UI.ComponentFactory/isComponentFactory","name":"isComponentFactory","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/ComponentFactory.d.ts","line":13,"code":"readonly isComponentFactory: true;","doc":"<p>Flag used for duck typing classes created as component factories.</p>\n","declType":"true"},{"id":"UI.ComponentFactory/isFragmentFactory","name":"isFragmentFactory","isProperty":true,"file":"dist/core/typings/UI/Components/ComponentFactory.d.ts","line":15,"code":"isFragmentFactory?: true;","doc":"<p>Flag that can be set to indicate that components created directly from this factory should <em>not</em> be wrapped in other types of components before being appended as fragment child nodes (on classes that are decorated with <code>appendChildComponents</code> with argument <code>acceptFragments</code>).</p>\n","declType":"true"},{"id":"UI.ComponentFactory/override","name":"override","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/ComponentFactory.d.ts","line":19,"code":"override(values: any): void;","doc":"<p>Override initializer properties that are currently encapsulated in this component factory, if any.</p>\n","declType":"void"}],"isNamespace":true,"textSeeAlso":"UI.Component.with","text":[{"content":"<p>Result of various static <code>.with*</code> methods.</p>\n"},{"title":"Note","type":"note","content":"<p>You cannot create ComponentFactory instances directly – use <code>.with*</code> methods to create factories instead.</p>\n"}],"sourceIdx":25},{"id":"UI.ComponentRenderHandler","name":"ComponentRenderHandler","isClass":true,"file":"dist/core/typings/UI/Components/ComponentRenderer.d.ts","line":43,"code":"class ComponentRenderHandler extends ComponentSignalHandler<ComponentRenderer.Output<Component, any>>","doc":"<p>Constructor for a component render event handler.</p>\n","extends":["UI.ComponentSignalHandler"],"items":[],"inherits":["UI.ComponentSignalHandler.-call","UI.ComponentSignalHandler/connectTo","UI.ComponentSignalHandler/isEventHandler"]},{"id":"UI.ComponentRenderer","name":"ComponentRenderer","isClass":true,"file":"dist/core/typings/UI/Components/ComponentRenderer.d.ts","line":2,"code":"class ComponentRenderer<ComponentT extends Component, ElementT>","doc":"<p>Class that contains the code necessary to render a component; to retrieve rendering output, Component methods only use the <code>.output</code> property, which is an ObservableValue instance that is populated using the (protected) <code>.render</code> method.</p>\n","typeParams":["ComponentT extends Component","ElementT"],"items":[{"id":"UI.ComponentRenderer.Output","name":"Output","isClass":true,"file":"dist/core/typings/UI/Components/ComponentRenderer.d.ts","line":18,"code":"class Output<ComponentT extends Component, ElementT>","doc":"<p>Encapsulates output for a rendered component; class type parameters indicate the type of component rendered, and the output type (e.g. HTMLElement).</p>\n","isStatic":true,"typeParams":["ComponentT extends Component","ElementT"],"items":[{"id":"UI.ComponentRenderer.Output.constructor","name":"new Output","hasParams":true,"isCtor":true,"file":"dist/core/typings/UI/Components/ComponentRenderer.d.ts","line":20,"code":"constructor(component: ComponentT, element: ElementT, context?: any);","doc":"<p>Create a new instance for given component, with given element (should not be undefined).</p>\n"},{"id":"UI.ComponentRenderer.Output/component","name":"component","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/ComponentRenderer.d.ts","line":22,"code":"readonly component: ComponentT;","doc":"<p>The component that the output is generated for.</p>\n","declType":"ComponentT"},{"id":"UI.ComponentRenderer.Output/element","name":"element","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/ComponentRenderer.d.ts","line":24,"code":"readonly element: ElementT;","doc":"<p>Reference to the actual output (e.g. DOM element).</p>\n","declType":"ElementT"},{"id":"UI.ComponentRenderer.Output/isComponentOutput","name":"isComponentOutput","isProperty":true,"file":"dist/core/typings/UI/Components/ComponentRenderer.d.ts","line":32,"code":"isComponentOutput: true;","doc":"<p>Flag that can be used for duck typing.</p>\n","declType":"true"},{"id":"UI.ComponentRenderer.Output/liveElement","name":"liveElement","isProperty":true,"file":"dist/core/typings/UI/Components/ComponentRenderer.d.ts","line":28,"code":"liveElement?: ElementT;","doc":"<p>Reference to a (sub) element that should be used to register event handlers, if different from main element (otherwise undefined).</p>\n","declType":"ElementT"},{"id":"UI.ComponentRenderer.Output/updated","name":"updated","isProperty":true,"file":"dist/core/typings/UI/Components/ComponentRenderer.d.ts","line":30,"code":"updated?: PromiseLike<any>;","doc":"<p>If defined, a promise that resolves the next time the content of the rendered output element is generated (drawn on screen <em>if</em> the parent output element is also already on screen).</p>\n","declType":"PromiseLike<any>","isAsync":true},{"id":"UI.ComponentRenderer.Output/wrapper","name":"wrapper","isProperty":true,"file":"dist/core/typings/UI/Components/ComponentRenderer.d.ts","line":26,"code":"wrapper?: ElementT;","doc":"<p>Reference to an element that wraps around the output element, that should be included by the parent element instead (or undefined).</p>\n","declType":"ElementT"}]},{"id":"UI.ComponentRenderer.RenderOptions","name":"RenderOptions","isInterface":true,"file":"dist/core/typings/UI/Components/ComponentRenderer.d.ts","line":35,"code":"interface RenderOptions","doc":"<p>Options for rendering (child) components.</p>\n","isStatic":true,"items":[{"id":"UI.ComponentRenderer.RenderOptions/animateListItems","name":"animateListItems","isProperty":true,"file":"dist/core/typings/UI/Components/ComponentRenderer.d.ts","line":39,"code":"animateListItems?: number;","doc":"<p>Set to a value in milliseconds to animate <em>child component</em> positioning for the given duration, if possible; only works with lists and tables, and may require synchronous rendering of child components (i.e. set <code>.synchronous</code> on list items).</p>\n","declType":"number"},{"id":"UI.ComponentRenderer.RenderOptions/synchronous","name":"synchronous","isProperty":true,"file":"dist/core/typings/UI/Components/ComponentRenderer.d.ts","line":37,"code":"synchronous?: boolean;","doc":"<p>Set to true to force synchronous rendering for this component.</p>\n","declType":"boolean"}]},{"id":"UI.ComponentRenderer.constructor","name":"new ComponentRenderer","hasParams":true,"isCtor":true,"file":"dist/core/typings/UI/Components/ComponentRenderer.d.ts","line":4,"code":"constructor(component: ComponentT);","doc":"<p>Create a new renderer instance for given component.</p>\n"},{"id":"UI.ComponentRenderer/component","name":"component","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/ComponentRenderer.d.ts","line":6,"code":"readonly component: ComponentT;","doc":"<p>The component that this renderer renders.</p>\n","declType":"ComponentT"},{"id":"UI.ComponentRenderer/output","name":"output","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/ComponentRenderer.d.ts","line":8,"code":"readonly output: Async.ObservableValue<ComponentRenderer.Output<ComponentT, ElementT> | undefined>;","doc":"<p>An observable value containing the rendered output, if any; used by the Component rendering methods to retrieve output; this property should <em>not</em> be overridden, override the protected <code>.render</code> method instead and/or use the <code>.watch</code> method to add partial rendering code.</p>\n","declType":"Async.ObservableValue<ComponentRenderer.Output<ComponentT, ElementT> | undefined>"},{"id":"UI.ComponentRenderer/watch","name":"watch","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/ComponentRenderer.d.ts","line":14,"code":"watch<T>(getter: (this: this) => T, map?: (this: this, value: T) => void): void;","doc":"<p>Add a method that will be called (synchronously and asynchronously) from a new observable context, after previously added methods, immediately <em>after</em> the <code>.render</code> method has run once, along with an optional method that will be called (synchronously, unobserved) with the result of the first method; i.e. observable values used in the first method will be subscribed to while the output is subscribed to, but changes to these values will never trigger re-rendering the entire component – instead, the second function is invoked; useful for partially updating existing output using a subset of component properties; should be called <em>before</em> rendering takes place.</p>\n","typeParams":["T"],"declType":"void"},{"id":"UI.ComponentRenderer/render","name":"render","hasParams":false,"isMethod":true,"file":"dist/core/typings/UI/Components/ComponentRenderer.d.ts","line":12,"code":"protected render(): ComponentRenderer.Output<ComponentT, ElementT> | undefined;","doc":"<p>Component renderer function; to be overridden, <em>must</em> be a pure function, based on the current <code>.component</code> and <code>.output</code> properties (otherwise <em>creating</em> or <em>setting</em> ObservableValue instances should be done within a function that is passed to <code>unobserved</code>).</p>\n","isProtected":true,"declType":"ComponentRenderer.Output<ComponentT, ElementT> | undefined"},{"id":"UI.ComponentRenderer/Rendered","name":"Rendered","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/ComponentRenderer.d.ts","line":10,"code":"readonly Rendered: Signal.Emittable<ComponentRenderer.Output<ComponentT, ElementT>>;","doc":"<p>Signal that is emitted after updating <code>.output</code> (but not if undefined) and/or when the <code>updated</code> promise on the rendered output is resolved.</p>\n","declType":"Signal.Emittable<ComponentRenderer.Output<ComponentT, ElementT>>","isSignal":true}],"isNamespace":true},{"id":"UI.ComponentSignal","name":"ComponentSignal","isClass":true,"file":"dist/core/typings/UI/Components/ComponentSignal.d.ts","line":2,"code":"class ComponentSignal<DataT> extends Async.Signal<DataT>","doc":"<p>Signal that is emitted by a component instance as the result of a user action.</p>\n","extends":["Async.Signal"],"typeParams":["DataT"],"items":[{"id":"UI.ComponentSignal.Emittable","name":"Emittable","isInterface":true,"file":"dist/core/typings/UI/Components/ComponentSignal.d.ts","line":8,"code":"interface Emittable<T> extends Signal.Emittable<T>","doc":"<p>Type definition for a callable (emittable) component signal class.</p>\n","isStatic":true,"extends":["Signal.Emittable"],"typeParams":["T"],"items":[{"id":"UI.ComponentSignal.Emittable.-call","name":"<call>","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/ComponentSignal.d.ts","line":10,"code":"(data?: T): void;","doc":"<p>Emit a signal with given value, for the component this signal is attached to.</p>\n","declType":"void"},{"id":"UI.ComponentSignal.Emittable/component","name":"component","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/ComponentSignal.d.ts","line":12,"code":"readonly component: Component;","doc":"<p>Component for which this signal will be emitted.</p>\n","declType":"Component"}]},{"id":"UI.ComponentSignal.component","name":"component","isStatic":true,"isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/ComponentSignal.d.ts","line":4,"code":"static readonly component: Component;","doc":"<p>Component for which this signal will be emitted.</p>\n","declType":"Component"}],"isNamespace":true,"inherits":["Async.Signal.create","Async.Signal.constructor","Async.Signal/catch","Async.Signal/data","Async.Signal/emit","Async.Signal/results","Async.Signal/then"]},{"id":"UI.ComponentSignalHandler","name":"ComponentSignalHandler","isInterface":true,"file":"dist/core/typings/UI/Components/ComponentSignal.d.ts","line":16,"code":"interface ComponentSignalHandler<DataT> extends Function","doc":"<p>Abstract wrapper for a handler that can connect to signals derived from <code>ComponentSignal</code>; used for automatic type inference of signal handlers.</p>\n","extends":["Function"],"typeParams":["DataT"],"items":[{"id":"UI.ComponentSignalHandler.-call","name":"<call>","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/ComponentSignal.d.ts","line":18,"code":"(data?: DataT): void;","doc":"<p>Call the handler as a function.</p>\n","declType":"void"},{"id":"UI.ComponentSignalHandler/connectTo","name":"connectTo","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/ComponentSignal.d.ts","line":20,"code":"connectTo(signal: ComponentSignal.Emittable<DataT>): Async.SignalConnection;","doc":"<p>Add this EventHandler as a handler for given event signal.</p>\n","declType":"Async.SignalConnection"},{"id":"UI.ComponentSignalHandler/isEventHandler","name":"isEventHandler","isProperty":true,"file":"dist/core/typings/UI/Components/ComponentSignal.d.ts","line":22,"code":"isEventHandler: true;","doc":"<p>Always true, for duck typing wrapped handlers.</p>\n","declType":"true"}]},{"id":"UI.Container","name":"Container","isClass":true,"file":"dist/core/typings/UI/Components/Containers/Container.d.ts","line":3,"code":"class Container extends Component","doc":"<p>Represents a container with vertically stacked blocks.</p>\n","extends":["UI.Component"],"items":[{"id":"UI.Container.Initializer","name":"Initializer","isInterface":true,"file":"dist/core/typings/UI/Components/Containers/Container.d.ts","line":54,"code":"interface Initializer extends Component.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["UI.Component.Initializer"],"items":[{"id":"UI.Container.Initializer/content","name":"content","isProperty":true,"file":"dist/core/typings/UI/Components/Containers/Container.d.ts","line":56,"code":"content?: ComponentFactory.SpecList2;","doc":"<p>Property initializer: content blocks.</p>\n","declType":"ComponentFactory.SpecList2"},{"id":"UI.Container.Initializer/displayOptions","name":"displayOptions","isProperty":true,"file":"dist/core/typings/UI/Components/Containers/Container.d.ts","line":70,"code":"displayOptions?: Page.DisplayOptions;","doc":"<p>Property initializer: display options (for use when displayed directly on the page).</p>\n","declType":"Page.DisplayOptions"},{"id":"UI.Container.Initializer/focusFirst","name":"focusFirst","isProperty":true,"file":"dist/core/typings/UI/Components/Containers/Container.d.ts","line":72,"code":"focusFirst?: UIValueOrAsync<boolean>;","doc":"<p>Property initializer: true to focus first component on render.</p>\n","declType":"UIValueOrAsync<boolean>"},{"id":"UI.Container.Initializer/horzAlign","name":"horzAlign","isProperty":true,"file":"dist/core/typings/UI/Components/Containers/Container.d.ts","line":60,"code":"horzAlign?: UIValueOrAsync<string>;","doc":"<p>Property initializer: horizontal positioning of main content area (“start”, “end”, “left”, “center”, “right”).</p>\n","declType":"UIValueOrAsync<string>"},{"id":"UI.Container.Initializer/maxContentWidth","name":"maxContentWidth","isProperty":true,"file":"dist/core/typings/UI/Components/Containers/Container.d.ts","line":62,"code":"maxContentWidth?: UIValueOrAsync<string>;","doc":"<p>Property initializer: maximum content width.</p>\n","declType":"UIValueOrAsync<string>"},{"id":"UI.Container.Initializer/scrollBottomThreshold","name":"scrollBottomThreshold","isProperty":true,"file":"dist/core/typings/UI/Components/Containers/Container.d.ts","line":68,"code":"scrollBottomThreshold?: UIValueOrAsync<number>;","doc":"<p>Property initializer: scroll-bottom threshold distance in pixels.</p>\n","declType":"UIValueOrAsync<number>"},{"id":"UI.Container.Initializer/scrollTopThreshold","name":"scrollTopThreshold","isProperty":true,"file":"dist/core/typings/UI/Components/Containers/Container.d.ts","line":66,"code":"scrollTopThreshold?: UIValueOrAsync<number>;","doc":"<p>Property initializer: scroll-top threshold distance in pixels.</p>\n","declType":"UIValueOrAsync<number>"},{"id":"UI.Container.Initializer/scrollable","name":"scrollable","isProperty":true,"file":"dist/core/typings/UI/Components/Containers/Container.d.ts","line":64,"code":"scrollable?: UIValueOrAsync<boolean>;","doc":"<p>Property initializer: true for scrollable content area.</p>\n","declType":"UIValueOrAsync<boolean>"},{"id":"UI.Container.Initializer/vertAlign","name":"vertAlign","isProperty":true,"file":"dist/core/typings/UI/Components/Containers/Container.d.ts","line":58,"code":"vertAlign?: UIValueOrAsync<string>;","doc":"<p>Property initializer: vertical positioning of main content area (“top”, “middle”, “bottom”).</p>\n","declType":"UIValueOrAsync<string>"}],"inherits":["UI.Component.Initializer/ArrowDownKeyPressed","UI.Component.Initializer/ArrowLeftKeyPressed","UI.Component.Initializer/ArrowRightKeyPressed","UI.Component.Initializer/ArrowUpKeyPressed","UI.Component.Initializer/BackspaceKeyPressed","UI.Component.Initializer/Blur","UI.Component.Initializer/Click","UI.Component.Initializer/Clicked","UI.Component.Initializer/DeleteKeyPressed","UI.Component.Initializer/DoubleClick","UI.Component.Initializer/DoubleClicked","UI.Component.Initializer/DragDrop","UI.Component.Initializer/DragEnter","UI.Component.Initializer/DragLeave","UI.Component.Initializer/DragStart","UI.Component.Initializer/EnterKeyPressed","UI.Component.Initializer/EscapeKeyPressed","UI.Component.Initializer/Focus","UI.Component.Initializer/FocusGained","UI.Component.Initializer/FocusLost","UI.Component.Initializer/KeyDown","UI.Component.Initializer/KeyPress","UI.Component.Initializer/MouseContextMenu","UI.Component.Initializer/MouseEnter","UI.Component.Initializer/MouseLeave","UI.Component.Initializer/Press","UI.Component.Initializer/Pressed","UI.Component.Initializer/Rendered","UI.Component.Initializer/SpaceBarPressed","UI.Component.Initializer/animations","UI.Component.Initializer/focusMode","UI.Component.Initializer/hasFocus","UI.Component.Initializer/height","UI.Component.Initializer/hidden","UI.Component.Initializer/id","UI.Component.Initializer/renderOptions","UI.Component.Initializer/selected","UI.Component.Initializer/selectionMode","UI.Component.Initializer/shadowEffect","UI.Component.Initializer/shadowEffectOnFocus","UI.Component.Initializer/shadowEffectOnHover","UI.Component.Initializer/style","UI.Component.Initializer/width"]},{"id":"UI.Container.with","name":"with","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Components/Containers/Container.d.ts","line":5,"code":"static with: ComponentFactory.WithMethod<Container.Initializer>;","doc":"<p>Create a component factory for this class.</p>\n","declType":"ComponentFactory.WithMethod<Container.Initializer>"},{"id":"UI.Container.constructor","name":"new Container","hasParams":true,"isCtor":true,"file":"dist/core/typings/UI/Components/Containers/Container.d.ts","line":9,"code":"constructor(content?: Block[]);","doc":"<p>Create a container with given content, if any.</p>\n"},{"id":"UI.Container/appendChild","name":"appendChild","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Containers/Container.d.ts","line":45,"code":"appendChild(block?: Block): this;","doc":"<p>Append a block to this container; returns this.</p>\n","declType":"this"},{"id":"UI.Container/content","name":"content","isProperty":true,"file":"dist/core/typings/UI/Components/Containers/Container.d.ts","line":11,"code":"content: Array<Block | undefined>;","doc":"<p>Array of main content blocks, stacked top to bottom (observed).</p>\n","declType":"Array<Block | undefined>"},{"id":"UI.Container/displayOptions","name":"displayOptions","isProperty":true,"file":"dist/core/typings/UI/Components/Containers/Container.d.ts","line":41,"code":"displayOptions?: Page.DisplayOptions;","doc":"<p>Object with options to be used when displaying this container as a page component, initially undefined (observed).</p>\n","declType":"Page.DisplayOptions"},{"id":"UI.Container/getChildren","name":"getChildren","hasParams":false,"isMethod":true,"file":"dist/core/typings/UI/Components/Containers/Container.d.ts","line":47,"code":"getChildren(): Component[];","doc":"<p>Returns an array of directly contained components (observable).</p>\n","declType":"Component[]"},{"id":"UI.Container/hasEmptyList","name":"hasEmptyList","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Containers/Container.d.ts","line":43,"code":"hasEmptyList(listComponentClass?: typeof List): boolean;","doc":"<p>Returns true if this container contains a List component without items, optionally of given type (observable if used in getter); useful as a shortcut in a getter for .hidden on a “blank-slate” block.</p>\n","declType":"boolean"},{"id":"UI.Container/horzAlign","name":"horzAlign","isProperty":true,"file":"dist/core/typings/UI/Components/Containers/Container.d.ts","line":15,"code":"horzAlign?: \"start\" | \"end\" | \"left\" | \"center\" | \"right\";","doc":"<p>Horizontal positioning of main content area within the outer boundaries of the container (observed), defaults to “center” if not defined; may lead to unexpected results if the contained blocks are of different widths.</p>\n","declType":"\"start\" | \"end\" | \"left\" | \"center\" | \"right\""},{"id":"UI.Container/initializeWith","name":"initializeWith","isProperty":true,"file":"dist/core/typings/UI/Components/Containers/Container.d.ts","line":7,"code":"initializeWith: ComponentFactory.InitializeWithMethod<Container.Initializer>;","doc":"<p>Initialize this component with given properties; returns this.</p>\n","declType":"ComponentFactory.InitializeWithMethod<Container.Initializer>"},{"id":"UI.Container/maxContentWidth","name":"maxContentWidth","isProperty":true,"file":"dist/core/typings/UI/Components/Containers/Container.d.ts","line":17,"code":"maxContentWidth: string;","doc":"<p>Max width of main content (observed); leave this blank to remove content width limitations.</p>\n","declType":"string"},{"id":"UI.Container/scrollBottomThreshold","name":"scrollBottomThreshold","isProperty":true,"file":"dist/core/typings/UI/Components/Containers/Container.d.ts","line":33,"code":"scrollBottomThreshold?: number;","doc":"<p>Bottom scroll threshold in pixels away from the bottom of this container: when reached this position, the <code>.scrolledToBottom</code> property is set (observed, but does not directly influence current property values); can be used e.g. to trigger lazy loading of list items or trigger footer display.</p>\n","declType":"number"},{"id":"UI.Container/scrollTopThreshold","name":"scrollTopThreshold","isProperty":true,"file":"dist/core/typings/UI/Components/Containers/Container.d.ts","line":35,"code":"scrollTopThreshold?: number;","doc":"<p>Top scroll threshold in pixels away from the top of this container: when reached this position, the <code>.scrolledToTop</code> property is set (observed, but does not directly influence current property values); can be used e.g. to trigger lazy loading of list items or trigger header display.</p>\n","declType":"number"},{"id":"UI.Container/scrollable","name":"scrollable","isProperty":true,"file":"dist/core/typings/UI/Components/Containers/Container.d.ts","line":19,"code":"scrollable?: boolean;","doc":"<p>Set to true to make content within container scrollable; defaults to false (observed).</p>\n","declType":"boolean"},{"id":"UI.Container/scrolledToBottom","name":"scrolledToBottom","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Containers/Container.d.ts","line":24,"code":"readonly scrolledToBottom: boolean | undefined;","doc":"<p>Flag that becomes true when the container content is scrolled all the way to the bottom, or to the threshold defined by <code>.scrollBottomThreshold</code> (observable); scroll position is continuously monitored after this value is read once.</p>\n","declType":"boolean | undefined"},{"id":"UI.Container/scrolledToLeft","name":"scrolledToLeft","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Containers/Container.d.ts","line":27,"code":"readonly scrolledToLeft: boolean | undefined;","doc":"<p>Flag that becomes true when the container content is scrolled all the way to the left (observable); scroll position is continuously monitored after this value is read once.</p>\n","declType":"boolean | undefined"},{"id":"UI.Container/scrolledToRight","name":"scrolledToRight","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Containers/Container.d.ts","line":30,"code":"readonly scrolledToRight: boolean | undefined;","doc":"<p>Flag that becomes true when the container content is scrolled all the way to the right (observable); scroll position is continuously monitored after this value is read once.</p>\n","declType":"boolean | undefined"},{"id":"UI.Container/scrolledToTop","name":"scrolledToTop","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Containers/Container.d.ts","line":21,"code":"readonly scrolledToTop: boolean | undefined;","doc":"<p>Flag that becomes true when the container content is scrolled all the way to the top (observable); scroll position is continuously monitored after this value is read once.</p>\n","declType":"boolean | undefined"},{"id":"UI.Container/vertAlign","name":"vertAlign","isProperty":true,"file":"dist/core/typings/UI/Components/Containers/Container.d.ts","line":13,"code":"vertAlign?: \"top\" | \"middle\" | \"bottom\";","doc":"<p>Vertical positioning of main content area within the outer boundaries of the container (observed), defaults to “top” if not defined.</p>\n","declType":"\"top\" | \"middle\" | \"bottom\""},{"id":"UI.Container/ScrolledDown","name":"ScrolledDown","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Containers/Container.d.ts","line":39,"code":"readonly ScrolledDown: ComponentSignal.Emittable<any>;","doc":"<p>Signal emitted when the container content is scrolled down (i.e. content moves up relative to the viewable area of the container), only once on first scroll or after changing direction; scroll position is continuously monitored only after this signal is connected to.</p>\n","declType":"ComponentSignal.Emittable<any>","isSignal":true},{"id":"UI.Container/ScrolledUp","name":"ScrolledUp","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Containers/Container.d.ts","line":37,"code":"readonly ScrolledUp: ComponentSignal.Emittable<any>;","doc":"<p>Signal emitted when the container content is scrolled up (i.e. content moves down relative to the viewable area of the container), only once on first scroll or after changing direction; scroll position is continuously monitored only after this signal is connected to.</p>\n","declType":"ComponentSignal.Emittable<any>","isSignal":true}],"isNamespace":true,"inherits":["UI.Component.addStyleOverride","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Component/contains","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Component/hoverState","UI.Component/id","UI.Component/initialize","UI.Component/out","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/setFormValues","UI.Component/shadowEffect","UI.Component/style","UI.Component/uid","UI.Component/width","UI.Component/beforeFirstRender","UI.Component/Renderer","UI.Component/createComponentSignal","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed"]},{"id":"UI.ContainerBlock","name":"ContainerBlock","isClass":true,"file":"dist/core/typings/UI/Components/Blocks/ContainerBlock.d.ts","line":3,"code":"class ContainerBlock<ContainerT extends Container> extends Block","doc":"<p>Represents a block with an embedded sub container within its margins/padding.</p>\n","extends":["UI.Block"],"typeParams":["ContainerT extends Container"],"items":[{"id":"UI.ContainerBlock.Initializer","name":"Initializer","isInterface":true,"file":"dist/core/typings/UI/Components/Blocks/ContainerBlock.d.ts","line":21,"code":"interface Initializer<ContainerT extends Container> extends Block.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["UI.Block.Initializer"],"typeParams":["ContainerT extends Container"],"items":[{"id":"UI.ContainerBlock.Initializer/container","name":"container","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/ContainerBlock.d.ts","line":23,"code":"container?: UIValueOrAsync<ComponentFactory<ContainerT> | ContainerT> | ComponentFactory.SpecList2;","doc":"<p>Property initializer: container component or initializer.</p>\n","declType":"UIValueOrAsync<ComponentFactory<ContainerT> | ContainerT> | ComponentFactory.SpecList2"}],"inherits":["UI.Component.Initializer/ArrowDownKeyPressed","UI.Component.Initializer/ArrowLeftKeyPressed","UI.Component.Initializer/ArrowRightKeyPressed","UI.Component.Initializer/ArrowUpKeyPressed","UI.Component.Initializer/BackspaceKeyPressed","UI.Component.Initializer/Blur","UI.Component.Initializer/Click","UI.Component.Initializer/Clicked","UI.Component.Initializer/DeleteKeyPressed","UI.Component.Initializer/DoubleClick","UI.Component.Initializer/DoubleClicked","UI.Component.Initializer/DragDrop","UI.Component.Initializer/DragEnter","UI.Component.Initializer/DragLeave","UI.Component.Initializer/DragStart","UI.Component.Initializer/EnterKeyPressed","UI.Component.Initializer/EscapeKeyPressed","UI.Component.Initializer/Focus","UI.Component.Initializer/FocusGained","UI.Component.Initializer/FocusLost","UI.Component.Initializer/KeyDown","UI.Component.Initializer/KeyPress","UI.Component.Initializer/MouseContextMenu","UI.Component.Initializer/MouseEnter","UI.Component.Initializer/MouseLeave","UI.Component.Initializer/Press","UI.Component.Initializer/Pressed","UI.Component.Initializer/Rendered","UI.Component.Initializer/SpaceBarPressed","UI.Component.Initializer/animations","UI.Block.Initializer/displayOptions","UI.Component.Initializer/focusMode","UI.Component.Initializer/hasFocus","UI.Component.Initializer/height","UI.Component.Initializer/hidden","UI.Component.Initializer/id","UI.Block.Initializer/overlayPosition","UI.Component.Initializer/renderOptions","UI.Component.Initializer/selected","UI.Component.Initializer/selectionMode","UI.Component.Initializer/shadowEffect","UI.Component.Initializer/shadowEffectOnFocus","UI.Component.Initializer/shadowEffectOnHover","UI.Component.Initializer/style","UI.Component.Initializer/width"]},{"id":"UI.ContainerBlock.with","name":"with","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/ContainerBlock.d.ts","line":5,"code":"static with: ComponentFactory.WithMethod<ContainerBlock.Initializer<Container>>;","doc":"<p>Create a component factory for this class.</p>\n","declType":"ComponentFactory.WithMethod<ContainerBlock.Initializer<Container>>"},{"id":"UI.ContainerBlock.constructor","name":"new ContainerBlock","hasParams":true,"isCtor":true,"file":"dist/core/typings/UI/Components/Blocks/ContainerBlock.d.ts","line":9,"code":"constructor(container?: ContainerT);","doc":"<p>Create a container block component with given container, if any.</p>\n"},{"id":"UI.ContainerBlock/appendChild","name":"appendChild","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Blocks/ContainerBlock.d.ts","line":15,"code":"appendChild(c?: ContainerT): this;","doc":"<p>Set the container for this component (overwrites existing value, if any); returns this.</p>\n","declType":"this"},{"id":"UI.ContainerBlock/container","name":"container","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/ContainerBlock.d.ts","line":11,"code":"container: ContainerT;","doc":"<p>Container element (created if not set, never undefined; observed).</p>\n","declType":"ContainerT"},{"id":"UI.ContainerBlock/getChildren","name":"getChildren","hasParams":false,"isMethod":true,"file":"dist/core/typings/UI/Components/Blocks/ContainerBlock.d.ts","line":17,"code":"getChildren(): Component[];","doc":"<p>Returns an array of directly contained components (observable).</p>\n","declType":"Component[]"},{"id":"UI.ContainerBlock/height","name":"height","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/ContainerBlock.d.ts","line":13,"code":"height: string;","doc":"<p>Overall target height of this component (CSS length; observable, directly modifies <code>.style</code> property, does <em>not</em> retrieve actual component height, may be “auto”); if a height has not been set explicitly, or is set to “auto”, then the value is taken from the height of the container; for <code>LayoutContainer</code>, a value of “100%” is used if the container’s height is also “auto”.</p>\n","declType":"string"},{"id":"UI.ContainerBlock/initializeWith","name":"initializeWith","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/ContainerBlock.d.ts","line":7,"code":"initializeWith: ComponentFactory.InitializeWithMethod<ContainerBlock.Initializer<ContainerT>>;","doc":"<p>Initialize this component with given properties; returns this.</p>\n","declType":"ComponentFactory.InitializeWithMethod<ContainerBlock.Initializer<ContainerT>>"}],"isNamespace":true,"inherits":["UI.Component.addStyleOverride","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Component/contains","UI.Component/displayOptions","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/hidden","UI.Component/hoverState","UI.Component/id","UI.Component/initialize","UI.Component/out","UI.Block/overlayPosition","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/setFormValues","UI.Component/shadowEffect","UI.Component/style","UI.Component/uid","UI.Component/width","UI.Component/beforeFirstRender","UI.Component/Renderer","UI.Component/createComponentSignal","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed"]},{"id":"UI.ContainerControl","name":"ContainerControl","isClass":true,"file":"dist/core/typings/UI/Components/Controls/ContainerControl.d.ts","line":3,"code":"class ContainerControl<ContainerT extends Container> extends ControlElement","doc":"<p>Represents a control element that contains a container.</p>\n","extends":["UI.ControlElement"],"typeParams":["ContainerT extends Container"],"items":[{"id":"UI.ContainerControl.Initializer","name":"Initializer","isInterface":true,"file":"dist/core/typings/UI/Components/Controls/ContainerControl.d.ts","line":23,"code":"interface Initializer extends ControlElement.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["UI.ControlElement.Initializer"],"items":[{"id":"UI.ContainerControl.Initializer/container","name":"container","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/ContainerControl.d.ts","line":25,"code":"container?: UIValueOrAsync<ComponentFactory<Container> | Container> | ComponentFactory.SpecList2;","doc":"<p>Property initializer: wrapped container.</p>\n","declType":"UIValueOrAsync<ComponentFactory<Container> | Container> | ComponentFactory.SpecList2"}],"inherits":["UI.Component.Initializer/ArrowDownKeyPressed","UI.Component.Initializer/ArrowLeftKeyPressed","UI.Component.Initializer/ArrowRightKeyPressed","UI.Component.Initializer/ArrowUpKeyPressed","UI.Component.Initializer/BackspaceKeyPressed","UI.Component.Initializer/Blur","UI.Component.Initializer/Click","UI.Component.Initializer/Clicked","UI.Component.Initializer/DeleteKeyPressed","UI.Component.Initializer/DoubleClick","UI.Component.Initializer/DoubleClicked","UI.Component.Initializer/DragDrop","UI.Component.Initializer/DragEnter","UI.Component.Initializer/DragLeave","UI.Component.Initializer/DragStart","UI.Component.Initializer/EnterKeyPressed","UI.Component.Initializer/EscapeKeyPressed","UI.Component.Initializer/Focus","UI.Component.Initializer/FocusGained","UI.Component.Initializer/FocusLost","UI.Component.Initializer/KeyDown","UI.Component.Initializer/KeyPress","UI.Component.Initializer/MouseContextMenu","UI.Component.Initializer/MouseEnter","UI.Component.Initializer/MouseLeave","UI.Component.Initializer/Press","UI.Component.Initializer/Pressed","UI.Component.Initializer/Rendered","UI.Component.Initializer/SpaceBarPressed","UI.Component.Initializer/animations","UI.Component.Initializer/focusMode","UI.ControlElement.Initializer/hasFocus","UI.Component.Initializer/height","UI.Component.Initializer/hidden","UI.Component.Initializer/id","UI.Component.Initializer/renderOptions","UI.Component.Initializer/selected","UI.Component.Initializer/selectionMode","UI.Component.Initializer/shadowEffect","UI.Component.Initializer/shadowEffectOnFocus","UI.Component.Initializer/shadowEffectOnHover","UI.ControlElement.Initializer/shrinkwrap","UI.Component.Initializer/style","UI.ControlElement.Initializer/width"]},{"id":"UI.ContainerControl.with","name":"with","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Components/Controls/ContainerControl.d.ts","line":5,"code":"static with: ComponentFactory.WithMethod<ContainerControl.Initializer>;","doc":"<p>Create a component factory for this class.</p>\n","declType":"ComponentFactory.WithMethod<ContainerControl.Initializer>"},{"id":"UI.ContainerControl.constructor","name":"new ContainerControl","hasParams":true,"isCtor":true,"file":"dist/core/typings/UI/Components/Controls/ContainerControl.d.ts","line":9,"code":"constructor(container?: ContainerT);","doc":"<p>Create a container control element that contains the given container, if any.</p>\n"},{"id":"UI.ContainerControl/appendChild","name":"appendChild","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Controls/ContainerControl.d.ts","line":17,"code":"appendChild(c?: ContainerT): this;","doc":"<p>Set the container for this component (overwrites existing value, if any); returns this.</p>\n","declType":"this"},{"id":"UI.ContainerControl/container","name":"container","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/ContainerControl.d.ts","line":11,"code":"container: ContainerT;","doc":"<p>Container element (created if not set, never undefined; observed); if set to a container (other than LayoutContainer) with maxContentWidth other than auto, and this control’s width is set to auto, this control will shrinkwrap to the same width as the container.</p>\n","declType":"ContainerT"},{"id":"UI.ContainerControl/getChildren","name":"getChildren","hasParams":false,"isMethod":true,"file":"dist/core/typings/UI/Components/Controls/ContainerControl.d.ts","line":19,"code":"getChildren(): Component[];","doc":"<p>Returns an array of directly contained components (observable).</p>\n","declType":"Component[]"},{"id":"UI.ContainerControl/height","name":"height","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/ContainerControl.d.ts","line":13,"code":"height: string;","doc":"<p>Overall target height of this component (CSS length; observable, directly modifies <code>.style</code> property, does <em>not</em> retrieve actual component height, may be “auto”); if a height has not been set explicitly, or is set to “auto”, then the value is taken from the height of the container; for <code>LayoutContainer</code>, a value of “100%” is used if the container’s height is also “auto”.</p>\n","declType":"string"},{"id":"UI.ContainerControl/initializeWith","name":"initializeWith","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/ContainerControl.d.ts","line":7,"code":"initializeWith: ComponentFactory.InitializeWithMethod<ContainerControl.Initializer>;","doc":"<p>Initialize this component with given properties; returns this.</p>\n","declType":"ComponentFactory.InitializeWithMethod<ContainerControl.Initializer>"},{"id":"UI.ContainerControl/width","name":"width","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/ContainerControl.d.ts","line":15,"code":"width: string;","doc":"<p>Overall target width of this component (CSS length; observable, directly modifies <code>.style</code> property, does <em>not</em> retrieve actual component height, may be “auto”); if a width has not been set explicitly, or is set to “auto”, then the value is taken from the width of the container.</p>\n","declType":"string"}],"isNamespace":true,"inherits":["UI.Component.addStyleOverride","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Component/contains","UI.Component/displayOptions","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/hidden","UI.Component/hoverState","UI.Component/id","UI.Component/initialize","UI.Component/out","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/setFormValues","UI.Component/shadowEffect","UI.ControlElement/shrinkwrap","UI.Component/style","UI.Component/uid","UI.ControlElement/wrapText","UI.Component/createComponentSignal","UI.Component/beforeFirstRender","UI.Component/Renderer","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed"]},{"id":"UI.ControlElement","name":"ControlElement","isClass":true,"file":"dist/core/typings/UI/Components/Controls/ControlElement.d.ts","line":1,"code":"class ControlElement extends Component","doc":"<p>UI control element base class.</p>\n","extends":["UI.Component"],"items":[{"id":"UI.ControlElement.Initializer","name":"Initializer","isInterface":true,"file":"dist/core/typings/UI/Components/Controls/ControlElement.d.ts","line":15,"code":"interface Initializer extends Component.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["UI.Component.Initializer"],"items":[{"id":"UI.ControlElement.Initializer/hasFocus","name":"hasFocus","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/ControlElement.d.ts","line":21,"code":"hasFocus?: UIValueOrAsync<boolean>;","doc":"<p>Property initializer: true to focus this component.</p>\n","declType":"UIValueOrAsync<boolean>"},{"id":"UI.ControlElement.Initializer/shrinkwrap","name":"shrinkwrap","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/ControlElement.d.ts","line":19,"code":"shrinkwrap?: UIValueOrAsync<boolean>;","doc":"<p>Property initializer: true to occupy as little horizontal space as possible.</p>\n","declType":"UIValueOrAsync<boolean>"},{"id":"UI.ControlElement.Initializer/width","name":"width","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/ControlElement.d.ts","line":17,"code":"width?: UIValueOrAsync<string>;","doc":"<p>Property initializer: target width of this component (CSS length).</p>\n","declType":"UIValueOrAsync<string>"}],"inherits":["UI.Component.Initializer/ArrowDownKeyPressed","UI.Component.Initializer/ArrowLeftKeyPressed","UI.Component.Initializer/ArrowRightKeyPressed","UI.Component.Initializer/ArrowUpKeyPressed","UI.Component.Initializer/BackspaceKeyPressed","UI.Component.Initializer/Blur","UI.Component.Initializer/Click","UI.Component.Initializer/Clicked","UI.Component.Initializer/DeleteKeyPressed","UI.Component.Initializer/DoubleClick","UI.Component.Initializer/DoubleClicked","UI.Component.Initializer/DragDrop","UI.Component.Initializer/DragEnter","UI.Component.Initializer/DragLeave","UI.Component.Initializer/DragStart","UI.Component.Initializer/EnterKeyPressed","UI.Component.Initializer/EscapeKeyPressed","UI.Component.Initializer/Focus","UI.Component.Initializer/FocusGained","UI.Component.Initializer/FocusLost","UI.Component.Initializer/KeyDown","UI.Component.Initializer/KeyPress","UI.Component.Initializer/MouseContextMenu","UI.Component.Initializer/MouseEnter","UI.Component.Initializer/MouseLeave","UI.Component.Initializer/Press","UI.Component.Initializer/Pressed","UI.Component.Initializer/Rendered","UI.Component.Initializer/SpaceBarPressed","UI.Component.Initializer/animations","UI.Component.Initializer/focusMode","UI.Component.Initializer/height","UI.Component.Initializer/hidden","UI.Component.Initializer/id","UI.Component.Initializer/renderOptions","UI.Component.Initializer/selected","UI.Component.Initializer/selectionMode","UI.Component.Initializer/shadowEffect","UI.Component.Initializer/shadowEffectOnFocus","UI.Component.Initializer/shadowEffectOnHover","UI.Component.Initializer/style"]},{"id":"UI.ControlElement.with","name":"with","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Components/Controls/ControlElement.d.ts","line":3,"code":"static with: ComponentFactory.WithMethodNoContent<ControlElement.Initializer>;","doc":"<p>Create a component factory for this class.</p>\n","declType":"ComponentFactory.WithMethodNoContent<ControlElement.Initializer>"},{"id":"UI.ControlElement/initializeWith","name":"initializeWith","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/ControlElement.d.ts","line":5,"code":"initializeWith: ComponentFactory.InitializeWithMethod<ControlElement.Initializer>;","doc":"<p>Initialize this component with given properties; returns this.</p>\n","declType":"ComponentFactory.InitializeWithMethod<ControlElement.Initializer>"},{"id":"UI.ControlElement/shrinkwrap","name":"shrinkwrap","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/ControlElement.d.ts","line":9,"code":"shrinkwrap: boolean;","doc":"<p>Set to true to shrink this element to use as little horizontal space as possible in a row; set to false to expand (observed).</p>\n","declType":"boolean"},{"id":"UI.ControlElement/width","name":"width","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/ControlElement.d.ts","line":7,"code":"width: string;","doc":"<p>Width (CSS length), default “auto” (observed).</p>\n","declType":"string"},{"id":"UI.ControlElement/wrapText","name":"wrapText","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/ControlElement.d.ts","line":11,"code":"wrapText: boolean;","doc":"<p>Set to true to automatically break text across lines (observed).</p>\n","declType":"boolean"}],"isNamespace":true,"inherits":["UI.Component.addStyleOverride","UI.Component.constructor","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Component/appendChild","UI.Component/contains","UI.Component/displayOptions","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Component/getChildren","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Component/hoverState","UI.Component/id","UI.Component/initialize","UI.Component/out","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/setFormValues","UI.Component/shadowEffect","UI.Component/style","UI.Component/uid","UI.Component/Renderer","UI.Component/createComponentSignal","UI.Component/beforeFirstRender","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed"]},{"id":"UI.ControlStack","name":"ControlStack","isClass":true,"file":"dist/core/typings/UI/Components/Controls/ControlStack.d.ts","line":2,"code":"class ControlStack extends ControlElement","doc":"<p>Represents a stack control containing control elements with equal widths placed from top to bottom.</p>\n","extends":["UI.ControlElement"],"items":[{"id":"UI.ControlStack.Initializer","name":"Initializer","isInterface":true,"file":"dist/core/typings/UI/Components/Controls/ControlStack.d.ts","line":24,"code":"interface Initializer extends ControlElement.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["UI.ControlElement.Initializer"],"items":[{"id":"UI.ControlStack.Initializer/content","name":"content","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/ControlStack.d.ts","line":26,"code":"content?: ComponentFactory.SpecList;","doc":"<p>Property initializer: list of stacked controls.</p>\n","declType":"ComponentFactory.SpecList"},{"id":"UI.ControlStack.Initializer/horzAlign","name":"horzAlign","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/ControlStack.d.ts","line":30,"code":"horzAlign?: UIValueOrAsync<string>;","doc":"<p>Property initializer: horizontal alignment of controls (“start”, “end”, “left”, “center”, “right”).</p>\n","declType":"UIValueOrAsync<string>"},{"id":"UI.ControlStack.Initializer/spacing","name":"spacing","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/ControlStack.d.ts","line":28,"code":"spacing?: UIValueOrAsync<string>;","doc":"<p>Property initializer: margin between controls (CSS value).</p>\n","declType":"UIValueOrAsync<string>"}],"inherits":["UI.Component.Initializer/ArrowDownKeyPressed","UI.Component.Initializer/ArrowLeftKeyPressed","UI.Component.Initializer/ArrowRightKeyPressed","UI.Component.Initializer/ArrowUpKeyPressed","UI.Component.Initializer/BackspaceKeyPressed","UI.Component.Initializer/Blur","UI.Component.Initializer/Click","UI.Component.Initializer/Clicked","UI.Component.Initializer/DeleteKeyPressed","UI.Component.Initializer/DoubleClick","UI.Component.Initializer/DoubleClicked","UI.Component.Initializer/DragDrop","UI.Component.Initializer/DragEnter","UI.Component.Initializer/DragLeave","UI.Component.Initializer/DragStart","UI.Component.Initializer/EnterKeyPressed","UI.Component.Initializer/EscapeKeyPressed","UI.Component.Initializer/Focus","UI.Component.Initializer/FocusGained","UI.Component.Initializer/FocusLost","UI.Component.Initializer/KeyDown","UI.Component.Initializer/KeyPress","UI.Component.Initializer/MouseContextMenu","UI.Component.Initializer/MouseEnter","UI.Component.Initializer/MouseLeave","UI.Component.Initializer/Press","UI.Component.Initializer/Pressed","UI.Component.Initializer/Rendered","UI.Component.Initializer/SpaceBarPressed","UI.Component.Initializer/animations","UI.Component.Initializer/focusMode","UI.ControlElement.Initializer/hasFocus","UI.Component.Initializer/height","UI.Component.Initializer/hidden","UI.Component.Initializer/id","UI.Component.Initializer/renderOptions","UI.Component.Initializer/selected","UI.Component.Initializer/selectionMode","UI.Component.Initializer/shadowEffect","UI.Component.Initializer/shadowEffectOnFocus","UI.Component.Initializer/shadowEffectOnHover","UI.ControlElement.Initializer/shrinkwrap","UI.Component.Initializer/style","UI.ControlElement.Initializer/width"]},{"id":"UI.ControlStack.with","name":"with","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Components/Controls/ControlStack.d.ts","line":4,"code":"static with: ComponentFactory.WithMethod<ControlStack.Initializer>;","doc":"<p>Create a component factory for this class.</p>\n","declType":"ComponentFactory.WithMethod<ControlStack.Initializer>"},{"id":"UI.ControlStack.constructor","name":"new ControlStack","hasParams":true,"isCtor":true,"file":"dist/core/typings/UI/Components/Controls/ControlStack.d.ts","line":8,"code":"constructor(content?: ControlElement[]);","doc":"<p>Create a stack element with given content, if any.</p>\n"},{"id":"UI.ControlStack/appendChild","name":"appendChild","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Controls/ControlStack.d.ts","line":18,"code":"appendChild(control?: ControlElement): this;","doc":"<p>Append a control to this stack; returns this.</p>\n","declType":"this"},{"id":"UI.ControlStack/content","name":"content","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/ControlStack.d.ts","line":10,"code":"content: Array<ControlElement | undefined>;","doc":"<p>Controls to be displayed (observed).</p>\n","declType":"Array<ControlElement | undefined>"},{"id":"UI.ControlStack/getChildren","name":"getChildren","hasParams":false,"isMethod":true,"file":"dist/core/typings/UI/Components/Controls/ControlStack.d.ts","line":20,"code":"getChildren(): Component[];","doc":"<p>Returns an array of directly contained components (observable).</p>\n","declType":"Component[]"},{"id":"UI.ControlStack/horzAlign","name":"horzAlign","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/ControlStack.d.ts","line":14,"code":"horzAlign: \"start\" | \"end\" | \"left\" | \"center\" | \"right\";","doc":"<p>Horizontal alignment of fixed-width elements within control stack area.</p>\n","declType":"\"start\" | \"end\" | \"left\" | \"center\" | \"right\""},{"id":"UI.ControlStack/initializeWith","name":"initializeWith","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/ControlStack.d.ts","line":6,"code":"initializeWith: ComponentFactory.InitializeWithMethod<ControlStack.Initializer>;","doc":"<p>Initialize this component with given properties; returns this.</p>\n","declType":"ComponentFactory.InitializeWithMethod<ControlStack.Initializer>"},{"id":"UI.ControlStack/shrinkwrap","name":"shrinkwrap","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/ControlStack.d.ts","line":16,"code":"shrinkwrap: boolean;","doc":"<p>Set to true to shrink this component horizontally such that it occupies as little space as possible; set to false to expand horizontally within row (observed); note that shrinkwrapping a control stack with non-shrinkwrapped controls may lead to unexpected results; by default, this component observes child components and is only shrinkwrapped if all child components are shrinkwrapped.</p>\n","declType":"boolean"},{"id":"UI.ControlStack/spacing","name":"spacing","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/ControlStack.d.ts","line":12,"code":"spacing: string;","doc":"<p>Spacing between elements (CSS value, platform default used if empty, observed).</p>\n","declType":"string"}],"isNamespace":true,"inherits":["UI.Component.addStyleOverride","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Component/contains","UI.Component/displayOptions","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Component/hoverState","UI.Component/id","UI.Component/initialize","UI.Component/out","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/setFormValues","UI.Component/shadowEffect","UI.Component/style","UI.Component/uid","UI.ControlElement/width","UI.ControlElement/wrapText","UI.Component/Renderer","UI.Component/beforeFirstRender","UI.Component/createComponentSignal","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed"]},{"id":"UI.DialogContainer","name":"DialogContainer","isClass":true,"file":"dist/core/typings/UI/Components/Containers/DialogContainer.d.ts","line":7,"code":"class DialogContainer extends Container","doc":"<p>Represents a modal dialog container.</p>\n","extends":["UI.Container"],"items":[{"id":"UI.DialogContainer.APPEAR_ANIMATION","name":"APPEAR_ANIMATION","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Components/Containers/DialogContainer.d.ts","line":15,"code":"static APPEAR_ANIMATION?: Animation;","doc":"<p>Default “appear” animation, added to every new DialogContainer instance by the constructor.</p>\n","declType":"Animation"},{"id":"UI.DialogContainer.DISAPPEAR_ANIMATION","name":"DISAPPEAR_ANIMATION","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Components/Containers/DialogContainer.d.ts","line":17,"code":"static DISAPPEAR_ANIMATION?: Animation;","doc":"<p>Default “disappear” animation, added to every new DialogContainer instance by the constructor.</p>\n","declType":"Animation"},{"id":"UI.DialogContainer.Initializer","name":"Initializer","isInterface":true,"file":"dist/core/typings/UI/Components/Containers/DialogContainer.d.ts","line":41,"code":"interface Initializer extends Container.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["UI.Container.Initializer"],"items":[{"id":"UI.DialogContainer.Initializer/Closed","name":"Closed","isProperty":true,"file":"dist/core/typings/UI/Components/Containers/DialogContainer.d.ts","line":49,"code":"Closed?: string | ActionHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | ActionHandler"},{"id":"UI.DialogContainer.Initializer/Closing","name":"Closing","isProperty":true,"file":"dist/core/typings/UI/Components/Containers/DialogContainer.d.ts","line":47,"code":"Closing?: string | ActionHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | ActionHandler"},{"id":"UI.DialogContainer.Initializer/footer","name":"footer","isProperty":true,"file":"dist/core/typings/UI/Components/Containers/DialogContainer.d.ts","line":45,"code":"footer?: ComponentFactory.SpecEltOrList;","doc":"<p>Property initializer: footer block.</p>\n","declType":"ComponentFactory.SpecEltOrList"},{"id":"UI.DialogContainer.Initializer/header","name":"header","isProperty":true,"file":"dist/core/typings/UI/Components/Containers/DialogContainer.d.ts","line":43,"code":"header?: ComponentFactory.SpecEltOrList;","doc":"<p>Property initializer: header block.</p>\n","declType":"ComponentFactory.SpecEltOrList"}],"inherits":["UI.Component.Initializer/ArrowDownKeyPressed","UI.Component.Initializer/ArrowLeftKeyPressed","UI.Component.Initializer/ArrowRightKeyPressed","UI.Component.Initializer/ArrowUpKeyPressed","UI.Component.Initializer/BackspaceKeyPressed","UI.Component.Initializer/Blur","UI.Component.Initializer/Click","UI.Component.Initializer/Clicked","UI.Component.Initializer/DeleteKeyPressed","UI.Component.Initializer/DoubleClick","UI.Component.Initializer/DoubleClicked","UI.Component.Initializer/DragDrop","UI.Component.Initializer/DragEnter","UI.Component.Initializer/DragLeave","UI.Component.Initializer/DragStart","UI.Component.Initializer/EnterKeyPressed","UI.Component.Initializer/EscapeKeyPressed","UI.Component.Initializer/Focus","UI.Component.Initializer/FocusGained","UI.Component.Initializer/FocusLost","UI.Component.Initializer/KeyDown","UI.Component.Initializer/KeyPress","UI.Component.Initializer/MouseContextMenu","UI.Component.Initializer/MouseEnter","UI.Component.Initializer/MouseLeave","UI.Component.Initializer/Press","UI.Component.Initializer/Pressed","UI.Component.Initializer/Rendered","UI.Component.Initializer/SpaceBarPressed","UI.Component.Initializer/animations","UI.Container.Initializer/content","UI.Container.Initializer/displayOptions","UI.Container.Initializer/focusFirst","UI.Component.Initializer/focusMode","UI.Component.Initializer/hasFocus","UI.Component.Initializer/height","UI.Component.Initializer/hidden","UI.Container.Initializer/horzAlign","UI.Component.Initializer/id","UI.Container.Initializer/maxContentWidth","UI.Component.Initializer/renderOptions","UI.Container.Initializer/scrollBottomThreshold","UI.Container.Initializer/scrollTopThreshold","UI.Container.Initializer/scrollable","UI.Component.Initializer/selected","UI.Component.Initializer/selectionMode","UI.Component.Initializer/shadowEffect","UI.Component.Initializer/shadowEffectOnFocus","UI.Component.Initializer/shadowEffectOnHover","UI.Component.Initializer/style","UI.Container.Initializer/vertAlign","UI.Component.Initializer/width"]},{"id":"UI.DialogContainer.TopCloseButton","name":"TopCloseButton","isClass":true,"file":"dist/core/typings/UI/Components/Containers/DialogContainer.d.ts","line":52,"code":"class TopCloseButton extends TextButton","doc":"<p>Predefined modal close button (“X”) control, based on <code>TextButton</code>.</p>\n","isStatic":true,"extends":["UI.TextButton"],"items":[{"id":"UI.DialogContainer.TopCloseButton.constructor","name":"new TopCloseButton","hasParams":false,"isCtor":true,"file":"dist/core/typings/UI/Components/Containers/DialogContainer.d.ts","line":54,"code":"constructor();","doc":"<p>Create a modal close button (“X”) control.</p>\n"}],"inherits":["UI.Component.addStyleOverride","UI.Button.withIcon","UI.Button.withLabel","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Component/appendChild","UI.Button/badge","UI.Component/contains","UI.Button/disabled","UI.Component/displayOptions","UI.Button/dropdown","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Component/getChildren","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Component/hoverState","UI.Button/icon","UI.Button/iconAfter","UI.Component/id","UI.Component/initialize","UI.Button/initializeWith","UI.Button/label","UI.Component/out","UI.Button/primary","UI.Button/remGutter","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/setFormValues","UI.Component/shadowEffect","UI.Button/shrinkwrap","UI.Component/style","UI.Button/style_button","UI.Button/target","UI.Button/tooltipText","UI.Component/uid","UI.ControlElement/width","UI.ControlElement/wrapText","UI.Component/beforeFirstRender","UI.Component/createComponentSignal","UI.Component/Renderer","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Button/DropdownClicked","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed"]},{"id":"UI.DialogContainer.with","name":"with","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Components/Containers/DialogContainer.d.ts","line":9,"code":"static with: ComponentFactory.WithMethod<DialogContainer.Initializer>;","doc":"<p>Create a component factory for this class.</p>\n","declType":"ComponentFactory.WithMethod<DialogContainer.Initializer>"},{"id":"UI.DialogContainer.constructor","name":"new DialogContainer","hasParams":true,"isCtor":true,"file":"dist/core/typings/UI/Components/Containers/DialogContainer.d.ts","line":13,"code":"constructor(content?: Block[], width?: string);","doc":"<p>Create a new modal dialog with given content, if any.</p>\n"},{"id":"UI.DialogContainer/close","name":"close","hasParams":false,"isMethod":true,"file":"dist/core/typings/UI/Components/Containers/DialogContainer.d.ts","line":25,"code":"close(): this;","doc":"<p>Remove the dialog from screen (does not emit or wait for <code>.Closing</code> signal, only emits <code>.Closed</code>); returns this.</p>\n","declType":"this"},{"id":"UI.DialogContainer/displayOptions","name":"displayOptions","isProperty":true,"file":"dist/core/typings/UI/Components/Containers/DialogContainer.d.ts","line":31,"code":"displayOptions: Page.DisplayOptions;","doc":"<p>Object with options to be used when displaying this block as a page component (observed).</p>\n","declType":"Page.DisplayOptions"},{"id":"UI.DialogContainer/footer","name":"footer","isProperty":true,"file":"dist/core/typings/UI/Components/Containers/DialogContainer.d.ts","line":21,"code":"footer?: Block;","doc":"<p>Block to be displayed as a footer, may be undefined (observed).</p>\n","declType":"Block"},{"id":"UI.DialogContainer/getChildren","name":"getChildren","hasParams":false,"isMethod":true,"file":"dist/core/typings/UI/Components/Containers/DialogContainer.d.ts","line":29,"code":"getChildren(): Component[];","doc":"<p>Returns an array of directly contained components (observable).</p>\n","declType":"Component[]"},{"id":"UI.DialogContainer/header","name":"header","isProperty":true,"file":"dist/core/typings/UI/Components/Containers/DialogContainer.d.ts","line":19,"code":"header?: Block;","doc":"<p>Block to be displayed as a header, may be undefined (observed).</p>\n","declType":"Block"},{"id":"UI.DialogContainer/initializeWith","name":"initializeWith","isProperty":true,"file":"dist/core/typings/UI/Components/Containers/DialogContainer.d.ts","line":11,"code":"initializeWith: ComponentFactory.InitializeWithMethod<DialogContainer.Initializer>;","doc":"<p>Initialize this component with given properties; returns this.</p>\n","declType":"ComponentFactory.InitializeWithMethod<DialogContainer.Initializer>"},{"id":"UI.DialogContainer/openAsync","name":"openAsync","hasParams":false,"isMethod":true,"file":"dist/core/typings/UI/Components/Containers/DialogContainer.d.ts","line":23,"code":"openAsync(): PromiseLike<void>;","doc":"<p>Show the dialog on screen (in front of other components on the current page, if any), asynchronously after emitting the <code>.Opening</code> signal; returns a promise that is fulfilled after the dialog has been rendered.</p>\n","declType":"PromiseLike<void>","isAsync":true},{"id":"UI.DialogContainer/setDragHandle","name":"setDragHandle","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Containers/DialogContainer.d.ts","line":27,"code":"setDragHandle(handle?: Component): void;","doc":"<p>Use given component as a drag handle for this dialog (and releases handle currently in use; defaults to .header).</p>\n","declType":"void"},{"id":"UI.DialogContainer/Closed","name":"Closed","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Containers/DialogContainer.d.ts","line":37,"code":"readonly Closed: ComponentSignal.Emittable<{}>;","doc":"<p>Signal emitted when this dialog has been closed.</p>\n","declType":"ComponentSignal.Emittable<{}>","isSignal":true},{"id":"UI.DialogContainer/Closing","name":"Closing","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Containers/DialogContainer.d.ts","line":35,"code":"readonly Closing: ComponentSignal.Emittable<{}>;","doc":"<p>Signal emitted when user clicks outside dialog, presses esc or clicks DialogContainer.TopCloseButton; if any handler throws an error then the dialog will not close.</p>\n","declType":"ComponentSignal.Emittable<{}>","isSignal":true},{"id":"UI.DialogContainer/Opening","name":"Opening","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Containers/DialogContainer.d.ts","line":33,"code":"readonly Opening: ComponentSignal.Emittable<{}>;","doc":"<p>Signal emitted by the <code>.open</code> method before displaying the dialog; if any handler throws an error then the dialog will not open.</p>\n","declType":"ComponentSignal.Emittable<{}>","isSignal":true}],"isNamespace":true,"inherits":["UI.Component.addStyleOverride","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Container/appendChild","UI.Component/contains","UI.Container/content","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Container/hasEmptyList","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Container/horzAlign","UI.Component/hoverState","UI.Component/id","UI.Component/initialize","UI.Container/maxContentWidth","UI.Component/out","UI.Component/render","UI.Component/renderOptions","UI.Container/scrollBottomThreshold","UI.Container/scrollTopThreshold","UI.Container/scrollable","UI.Container/scrolledToBottom","UI.Container/scrolledToLeft","UI.Container/scrolledToRight","UI.Container/scrolledToTop","UI.Component/selected","UI.Component/selectionMode","UI.Component/setFormValues","UI.Component/shadowEffect","UI.Component/style","UI.Component/uid","UI.Container/vertAlign","UI.Component/width","UI.Component/beforeFirstRender","UI.Component/createComponentSignal","UI.Component/Renderer","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Container/ScrolledDown","UI.Container/ScrolledUp","UI.Component/SpaceBarPressed"]},{"id":"UI.Divider","name":"Divider","isClass":true,"file":"dist/core/typings/UI/Components/Blocks/Divider.d.ts","line":1,"code":"class Divider extends Block","doc":"<p>Represents a divider block element (horizontal line placed between blocks).</p>\n","extends":["UI.Block"],"items":[{"id":"UI.Divider.Initializer","name":"Initializer","isInterface":true,"file":"dist/core/typings/UI/Components/Blocks/Divider.d.ts","line":21,"code":"interface Initializer extends Block.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["UI.Block.Initializer"],"items":[{"id":"UI.Divider.Initializer/color","name":"color","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Divider.d.ts","line":23,"code":"color?: UIValueOrAsync<string>;","doc":"<p>Property initializer: line color (CSS color).</p>\n","declType":"UIValueOrAsync<string>"},{"id":"UI.Divider.Initializer/insetEnd","name":"insetEnd","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Divider.d.ts","line":31,"code":"insetEnd?: UIValueOrAsync<string>;","doc":"<p>Property initializer: outside inset (CSS length).</p>\n","declType":"UIValueOrAsync<string>"},{"id":"UI.Divider.Initializer/insetStart","name":"insetStart","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Divider.d.ts","line":29,"code":"insetStart?: UIValueOrAsync<string>;","doc":"<p>Property initializer: inside inset (CSS length).</p>\n","declType":"UIValueOrAsync<string>"},{"id":"UI.Divider.Initializer/margin","name":"margin","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Divider.d.ts","line":27,"code":"margin?: UIValueOrAsync<string>;","doc":"<p>Property initializer: space around line (CSS length).</p>\n","declType":"UIValueOrAsync<string>"},{"id":"UI.Divider.Initializer/thickness","name":"thickness","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Divider.d.ts","line":25,"code":"thickness?: UIValueOrAsync<string>;","doc":"<p>Property initializer: line weight (CSS length).</p>\n","declType":"UIValueOrAsync<string>"}],"inherits":["UI.Component.Initializer/ArrowDownKeyPressed","UI.Component.Initializer/ArrowLeftKeyPressed","UI.Component.Initializer/ArrowRightKeyPressed","UI.Component.Initializer/ArrowUpKeyPressed","UI.Component.Initializer/BackspaceKeyPressed","UI.Component.Initializer/Blur","UI.Component.Initializer/Click","UI.Component.Initializer/Clicked","UI.Component.Initializer/DeleteKeyPressed","UI.Component.Initializer/DoubleClick","UI.Component.Initializer/DoubleClicked","UI.Component.Initializer/DragDrop","UI.Component.Initializer/DragEnter","UI.Component.Initializer/DragLeave","UI.Component.Initializer/DragStart","UI.Component.Initializer/EnterKeyPressed","UI.Component.Initializer/EscapeKeyPressed","UI.Component.Initializer/Focus","UI.Component.Initializer/FocusGained","UI.Component.Initializer/FocusLost","UI.Component.Initializer/KeyDown","UI.Component.Initializer/KeyPress","UI.Component.Initializer/MouseContextMenu","UI.Component.Initializer/MouseEnter","UI.Component.Initializer/MouseLeave","UI.Component.Initializer/Press","UI.Component.Initializer/Pressed","UI.Component.Initializer/Rendered","UI.Component.Initializer/SpaceBarPressed","UI.Component.Initializer/animations","UI.Block.Initializer/displayOptions","UI.Component.Initializer/focusMode","UI.Component.Initializer/hasFocus","UI.Component.Initializer/height","UI.Component.Initializer/hidden","UI.Component.Initializer/id","UI.Block.Initializer/overlayPosition","UI.Component.Initializer/renderOptions","UI.Component.Initializer/selected","UI.Component.Initializer/selectionMode","UI.Component.Initializer/shadowEffect","UI.Component.Initializer/shadowEffectOnFocus","UI.Component.Initializer/shadowEffectOnHover","UI.Component.Initializer/style","UI.Component.Initializer/width"]},{"id":"UI.Divider.with","name":"with","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Divider.d.ts","line":3,"code":"static with: ComponentFactory.WithMethodNoContent<Divider.Initializer>;","doc":"<p>Create a component factory for this class.</p>\n","declType":"ComponentFactory.WithMethodNoContent<Divider.Initializer>"},{"id":"UI.Divider.constructor","name":"new Divider","hasParams":true,"isCtor":true,"file":"dist/core/typings/UI/Components/Blocks/Divider.d.ts","line":7,"code":"constructor(color?: string, thickness?: string, margin?: string, insetStart?: string, insetEnd?: string);","doc":"<p>Create a new divider with given (optional) properties.</p>\n"},{"id":"UI.Divider/color","name":"color","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Divider.d.ts","line":9,"code":"color: string;","doc":"<p>Divider color (CSS value, platform default used if empty, observed).</p>\n","declType":"string"},{"id":"UI.Divider/initializeWith","name":"initializeWith","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Divider.d.ts","line":5,"code":"initializeWith: ComponentFactory.InitializeWithMethod<Divider.Initializer>;","doc":"<p>Initialize this component with given properties; returns this.</p>\n","declType":"ComponentFactory.InitializeWithMethod<Divider.Initializer>"},{"id":"UI.Divider/insetEnd","name":"insetEnd","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Divider.d.ts","line":17,"code":"insetEnd: string;","doc":"<p>Horizontal inset on the outside, i.e. right margin in left-to-right flow direction mode (CSS value, none if empty, observed).</p>\n","declType":"string"},{"id":"UI.Divider/insetStart","name":"insetStart","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Divider.d.ts","line":15,"code":"insetStart: string;","doc":"<p>Horizontal inset on the inside, i.e. left margin in left-to-right flow direction mode (CSS value, none if empty, observed).</p>\n","declType":"string"},{"id":"UI.Divider/margin","name":"margin","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Divider.d.ts","line":13,"code":"margin: string;","doc":"<p>Vertical whitespace around divider (CSS value, platform default used if empty, observed).</p>\n","declType":"string"},{"id":"UI.Divider/thickness","name":"thickness","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Divider.d.ts","line":11,"code":"thickness: string;","doc":"<p>Divider thickness (CSS value, platform default used if empty, observed).</p>\n","declType":"string"}],"isNamespace":true,"inherits":["UI.Component.addStyleOverride","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Component/appendChild","UI.Component/contains","UI.Component/displayOptions","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Component/getChildren","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Component/hoverState","UI.Component/id","UI.Component/initialize","UI.Component/out","UI.Block/overlayPosition","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/setFormValues","UI.Component/shadowEffect","UI.Component/style","UI.Component/uid","UI.Component/width","UI.Component/createComponentSignal","UI.Component/Renderer","UI.Component/beforeFirstRender","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed"]},{"id":"UI.Drag","name":"Drag","isClass":true,"file":"dist/core/typings/UI/Drag.d.ts","line":1,"code":"class Drag","doc":"<p>Represents a drag operation (created by static .start(…) method).</p>\n","items":[{"id":"UI.Drag.DragEventDetail","name":"DragEventDetail","isInterface":true,"file":"dist/core/typings/UI/Drag.d.ts","line":29,"code":"interface DragEventDetail","doc":"<p>Details that are emitted along with a drag event.</p>\n","isStatic":true,"items":[{"id":"UI.Drag.DragEventDetail/data","name":"data","isProperty":true,"file":"dist/core/typings/UI/Drag.d.ts","line":33,"code":"data: undefined;","doc":"<p>Application defined payload to identify the object being dragged.</p>\n","declType":"undefined"},{"id":"UI.Drag.DragEventDetail/id","name":"id","isProperty":true,"file":"dist/core/typings/UI/Drag.d.ts","line":31,"code":"id: undefined;","doc":"<p>Platform-specific drag event identifier (may be undefined).</p>\n","declType":"undefined"}]},{"id":"UI.Drag.getCurrentInstances","name":"getCurrentInstances","hasParams":false,"isStatic":true,"isMethod":true,"file":"dist/core/typings/UI/Drag.d.ts","line":3,"code":"static getCurrentInstances(): Drag[];","doc":"<p>Returns a list of current drag operations (for forwards compatibility, supporting multi touch); use this while handling drag events, e.g. get/set .detail with custom data, or observe coordinates).</p>\n","declType":"Drag[]"},{"id":"UI.Drag.start","name":"start","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/core/typings/UI/Drag.d.ts","line":5,"code":"static start(event: PointerEvent, data?: any): Drag;","doc":"<p>Start tracking mouse movement based on given event (with initial screen coordinates); creates a new instance of a platform specific class derived from Drag with given payload data; Drop targets may listen for drag events (enter/leave/drop), and use information from the data object to respond.</p>\n","declType":"Drag"},{"id":"UI.Drag/cancel","name":"cancel","hasParams":false,"isMethod":true,"file":"dist/core/typings/UI/Drag.d.ts","line":23,"code":"cancel(): void;","doc":"<p>Stop this drag operation, emits the <code>.Canceled</code> signal; throws an exception if this operation was already canceled or dropped.</p>\n","declType":"void"},{"id":"UI.Drag/constrain","name":"constrain","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Drag.d.ts","line":19,"code":"abstract constrain(constrainX?: boolean, constrainY?: boolean, component?: Component): void;","doc":"<p>Constrain effective drag coordinates on (original) X and/or Y axis of the viewport, and/or contrain to stay within given component on screen (calling this method twice does not constrain further, but the constraints are replaced).</p>\n","declType":"void"},{"id":"UI.Drag/detail","name":"detail","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Drag.d.ts","line":7,"code":"readonly detail: Drag.DragEventDetail;","doc":"<p>Event payload data for this operation (sealed observable object).</p>\n","declType":"Drag.DragEventDetail"},{"id":"UI.Drag/drop","name":"drop","hasParams":false,"isMethod":true,"file":"dist/core/typings/UI/Drag.d.ts","line":25,"code":"drop(): void;","doc":"<p>Accept the current drop target (i.e. perform the drop, called automatically based on input events, but can be called manually as well), emits the <code>.Dropped</code> signal; throws an exception if this operation was already canceled or dropped.</p>\n","declType":"void"},{"id":"UI.Drag/moved","name":"moved","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Drag.d.ts","line":13,"code":"readonly abstract moved: PromiseLike<Drag>;","doc":"<p>Resolves to <code>this</code> when the observed coordinates actually change by a reasonable amount (to distinguish from a click), useful e.g. for calling <code>.pickUp(...)</code> only when resolved.</p>\n","declType":"PromiseLike<Drag>","isAsync":true},{"id":"UI.Drag/pickUp","name":"pickUp","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Drag.d.ts","line":21,"code":"abstract pickUp(component: Component, removeWhenDone?: boolean): void;","doc":"<p>Make given component follow the mouse cursor while dragging.</p>\n","declType":"void"},{"id":"UI.Drag/x","name":"x","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Drag.d.ts","line":9,"code":"readonly abstract x: number;","doc":"<p>Current screen X coordinate (read-only observable, constrained).</p>\n","declType":"number"},{"id":"UI.Drag/y","name":"y","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Drag.d.ts","line":11,"code":"readonly abstract y: number;","doc":"<p>Current screen Y coordinate (read-only observable, constrained).</p>\n","declType":"number"},{"id":"UI.Drag/Canceled","name":"Canceled","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Drag.d.ts","line":17,"code":"readonly Canceled: Signal.Emittable<Drag>;","doc":"<p>Signal emitted when the drag operation is canceled.</p>\n","declType":"Signal.Emittable<Drag>","isSignal":true},{"id":"UI.Drag/Dropped","name":"Dropped","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Drag.d.ts","line":15,"code":"readonly Dropped: Signal.Emittable<Drag>;","doc":"<p>Signal emitted when the drag operation completes successfully.</p>\n","declType":"Signal.Emittable<Drag>","isSignal":true}],"isNamespace":true},{"id":"UI.DragEvent","name":"DragEvent","isInterface":true,"file":"dist/core/typings/UI/Components/ComponentSignal.d.ts","line":65,"code":"interface DragEvent","doc":"<p>Interface definition of a drag event with payload.</p>\n","items":[{"id":"UI.DragEvent/detail","name":"detail","isProperty":true,"file":"dist/core/typings/UI/Components/ComponentSignal.d.ts","line":67,"code":"detail: Drag.DragEventDetail;","doc":"<p>Event payload</p>\n","declType":"Drag.DragEventDetail"}]},{"id":"UI.DragEventSignal","name":"DragEventSignal","isClass":true,"file":"dist/core/typings/UI/Components/ComponentSignal.d.ts","line":85,"code":"class DragEventSignal extends ComponentSignal<DragEvent>","doc":"<p>Signal that is emitted when a custom drag event occurs.</p>\n","extends":["UI.ComponentSignal"],"items":[],"inherits":["Async.Signal.create","Async.Signal.constructor","Async.Signal/catch","Async.Signal/data","Async.Signal/emit","Async.Signal/results","Async.Signal/then"]},{"id":"UI.DragHandler","name":"DragHandler","isClass":true,"file":"dist/core/typings/UI/Components/ComponentSignal.d.ts","line":88,"code":"class DragHandler extends ComponentSignalHandler<DragEvent>","doc":"<p>Constructor for a drag event handler.</p>\n","extends":["UI.ComponentSignalHandler"],"items":[],"inherits":["UI.ComponentSignalHandler.-call","UI.ComponentSignalHandler/connectTo","UI.ComponentSignalHandler/isEventHandler"]},{"id":"UI.DrawerContainer","name":"DrawerContainer","isClass":true,"file":"dist/core/typings/UI/Components/Containers/DrawerContainer.d.ts","line":2,"code":"class DrawerContainer extends DialogContainer","doc":"<p>Represents a modal container displayed on the side of the screen.</p>\n","extends":["UI.DialogContainer"],"items":[{"id":"UI.DrawerContainer.APPEAR_ANIMATION","name":"APPEAR_ANIMATION","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Components/Containers/DrawerContainer.d.ts","line":6,"code":"static APPEAR_ANIMATION?: Animation;","doc":"<p>Default “appear” animation, added to every new <code>DrawerContainer</code> instance by the constructor.</p>\n","declType":"Animation"},{"id":"UI.DrawerContainer.DISAPPEAR_ANIMATION","name":"DISAPPEAR_ANIMATION","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Components/Containers/DrawerContainer.d.ts","line":8,"code":"static DISAPPEAR_ANIMATION?: Animation;","doc":"<p>Default “disappear” animation, added to every new <code>DrawerContainer</code> instance by the constructor.</p>\n","declType":"Animation"},{"id":"UI.DrawerContainer.constructor","name":"new DrawerContainer","hasParams":true,"isCtor":true,"file":"dist/core/typings/UI/Components/Containers/DrawerContainer.d.ts","line":4,"code":"constructor(content?: Block[], width?: string);","doc":"<p>Create a drawer component with given content, if any.</p>\n"}],"inherits":["UI.Component.addStyleOverride","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Container/appendChild","UI.DialogContainer/close","UI.Component/contains","UI.Container/content","UI.DialogContainer/displayOptions","UI.Component/flowDirection","UI.Component/focusMode","UI.DialogContainer/footer","UI.Component/getActualDimensions","UI.DialogContainer/getChildren","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Container/hasEmptyList","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.DialogContainer/header","UI.Component/height","UI.Component/hidden","UI.Container/horzAlign","UI.Component/hoverState","UI.Component/id","UI.Component/initialize","UI.DialogContainer/initializeWith","UI.Container/maxContentWidth","UI.DialogContainer/openAsync","UI.Component/out","UI.Component/render","UI.Component/renderOptions","UI.Container/scrollBottomThreshold","UI.Container/scrollTopThreshold","UI.Container/scrollable","UI.Container/scrolledToBottom","UI.Container/scrolledToLeft","UI.Container/scrolledToRight","UI.Container/scrolledToTop","UI.Component/selected","UI.Component/selectionMode","UI.DialogContainer/setDragHandle","UI.Component/setFormValues","UI.Component/shadowEffect","UI.Component/style","UI.Component/uid","UI.Container/vertAlign","UI.Component/width","UI.Component/Renderer","UI.Component/beforeFirstRender","UI.Component/createComponentSignal","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.DialogContainer/Closed","UI.DialogContainer/Closing","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.DialogContainer/Opening","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Container/ScrolledDown","UI.Container/ScrolledUp","UI.Component/SpaceBarPressed"]},{"id":"UI.FlowContainer","name":"FlowContainer","isClass":true,"file":"dist/core/typings/UI/Components/Containers/Container.d.ts","line":50,"code":"class FlowContainer extends Container","doc":"<p>Represents a container with blocks that are laid out horizontally (just like text), automatically spanning multiple rows if necessary.</p>\n","extends":["UI.Container"],"items":[],"inherits":["UI.Component.addStyleOverride","UI.Container.constructor","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Container/appendChild","UI.Component/contains","UI.Container/content","UI.Container/displayOptions","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Container/getChildren","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Container/hasEmptyList","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Container/horzAlign","UI.Component/hoverState","UI.Component/id","UI.Component/initialize","UI.Container/initializeWith","UI.Container/maxContentWidth","UI.Component/out","UI.Component/render","UI.Component/renderOptions","UI.Container/scrollBottomThreshold","UI.Container/scrollTopThreshold","UI.Container/scrollable","UI.Container/scrolledToBottom","UI.Container/scrolledToLeft","UI.Container/scrolledToRight","UI.Container/scrolledToTop","UI.Component/selected","UI.Component/selectionMode","UI.Component/setFormValues","UI.Component/shadowEffect","UI.Component/style","UI.Component/uid","UI.Container/vertAlign","UI.Component/width","UI.Component/Renderer","UI.Component/beforeFirstRender","UI.Component/createComponentSignal","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Container/ScrolledDown","UI.Container/ScrolledUp","UI.Component/SpaceBarPressed"]},{"id":"UI.Heading1","name":"Heading1","isClass":true,"file":"dist/core/typings/UI/Components/Controls/Label.d.ts","line":61,"code":"class Heading1 extends Label","doc":"<p>H1 label control.</p>\n","extends":["UI.Label"],"items":[],"inherits":["UI.Component.addStyleOverride","UI.Label.withText","UI.Label.constructor","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Component/appendChild","UI.Label/badge","UI.Component/contains","UI.Component/displayOptions","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Component/getChildren","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Component/hoverState","UI.Label/icon","UI.Component/id","UI.Component/initialize","UI.Label/initializeWith","UI.Component/out","UI.Label/remGutter","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/setFormValues","UI.Component/shadowEffect","UI.Label/shrinkwrap","UI.Component/style","UI.Label/text","UI.Label/textAfter","UI.Label/textBefore","UI.Label/tooltipText","UI.Component/uid","UI.ControlElement/width","UI.ControlElement/wrapText","UI.Component/beforeFirstRender","UI.Component/createComponentSignal","UI.Component/Renderer","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed"]},{"id":"UI.Heading2","name":"Heading2","isClass":true,"file":"dist/core/typings/UI/Components/Controls/Label.d.ts","line":64,"code":"class Heading2 extends Label","doc":"<p>H2 label control.</p>\n","extends":["UI.Label"],"items":[],"inherits":["UI.Component.addStyleOverride","UI.Label.withText","UI.Label.constructor","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Component/appendChild","UI.Label/badge","UI.Component/contains","UI.Component/displayOptions","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Component/getChildren","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Component/hoverState","UI.Label/icon","UI.Component/id","UI.Component/initialize","UI.Label/initializeWith","UI.Component/out","UI.Label/remGutter","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/setFormValues","UI.Component/shadowEffect","UI.Label/shrinkwrap","UI.Component/style","UI.Label/text","UI.Label/textAfter","UI.Label/textBefore","UI.Label/tooltipText","UI.Component/uid","UI.ControlElement/width","UI.ControlElement/wrapText","UI.Component/beforeFirstRender","UI.Component/createComponentSignal","UI.Component/Renderer","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed"]},{"id":"UI.Heading3","name":"Heading3","isClass":true,"file":"dist/core/typings/UI/Components/Controls/Label.d.ts","line":67,"code":"class Heading3 extends Label","doc":"<p>H3 label control.</p>\n","extends":["UI.Label"],"items":[],"inherits":["UI.Component.addStyleOverride","UI.Label.withText","UI.Label.constructor","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Component/appendChild","UI.Label/badge","UI.Component/contains","UI.Component/displayOptions","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Component/getChildren","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Component/hoverState","UI.Label/icon","UI.Component/id","UI.Component/initialize","UI.Label/initializeWith","UI.Component/out","UI.Label/remGutter","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/setFormValues","UI.Component/shadowEffect","UI.Label/shrinkwrap","UI.Component/style","UI.Label/text","UI.Label/textAfter","UI.Label/textBefore","UI.Label/tooltipText","UI.Component/uid","UI.ControlElement/width","UI.ControlElement/wrapText","UI.Component/beforeFirstRender","UI.Component/createComponentSignal","UI.Component/Renderer","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed"]},{"id":"UI.Heading4","name":"Heading4","isClass":true,"file":"dist/core/typings/UI/Components/Controls/Label.d.ts","line":70,"code":"class Heading4 extends Label","doc":"<p>H4 label control.</p>\n","extends":["UI.Label"],"items":[],"inherits":["UI.Component.addStyleOverride","UI.Label.withText","UI.Label.constructor","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Component/appendChild","UI.Label/badge","UI.Component/contains","UI.Component/displayOptions","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Component/getChildren","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Component/hoverState","UI.Label/icon","UI.Component/id","UI.Component/initialize","UI.Label/initializeWith","UI.Component/out","UI.Label/remGutter","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/setFormValues","UI.Component/shadowEffect","UI.Label/shrinkwrap","UI.Component/style","UI.Label/text","UI.Label/textAfter","UI.Label/textBefore","UI.Label/tooltipText","UI.Component/uid","UI.ControlElement/width","UI.ControlElement/wrapText","UI.Component/beforeFirstRender","UI.Component/createComponentSignal","UI.Component/Renderer","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed"]},{"id":"UI.Heading5","name":"Heading5","isClass":true,"file":"dist/core/typings/UI/Components/Controls/Label.d.ts","line":73,"code":"class Heading5 extends Label","doc":"<p>H5 label control.</p>\n","extends":["UI.Label"],"items":[],"inherits":["UI.Component.addStyleOverride","UI.Label.withText","UI.Label.constructor","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Component/appendChild","UI.Label/badge","UI.Component/contains","UI.Component/displayOptions","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Component/getChildren","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Component/hoverState","UI.Label/icon","UI.Component/id","UI.Component/initialize","UI.Label/initializeWith","UI.Component/out","UI.Label/remGutter","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/setFormValues","UI.Component/shadowEffect","UI.Label/shrinkwrap","UI.Component/style","UI.Label/text","UI.Label/textAfter","UI.Label/textBefore","UI.Label/tooltipText","UI.Component/uid","UI.ControlElement/width","UI.ControlElement/wrapText","UI.Component/beforeFirstRender","UI.Component/createComponentSignal","UI.Component/Renderer","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed"]},{"id":"UI.Heading6","name":"Heading6","isClass":true,"file":"dist/core/typings/UI/Components/Controls/Label.d.ts","line":76,"code":"class Heading6 extends Label","doc":"<p>H6 label control.</p>\n","extends":["UI.Label"],"items":[],"inherits":["UI.Component.addStyleOverride","UI.Label.withText","UI.Label.constructor","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Component/appendChild","UI.Label/badge","UI.Component/contains","UI.Component/displayOptions","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Component/getChildren","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Component/hoverState","UI.Label/icon","UI.Component/id","UI.Component/initialize","UI.Label/initializeWith","UI.Component/out","UI.Label/remGutter","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/setFormValues","UI.Component/shadowEffect","UI.Label/shrinkwrap","UI.Component/style","UI.Label/text","UI.Label/textAfter","UI.Label/textBefore","UI.Label/tooltipText","UI.Component/uid","UI.ControlElement/width","UI.ControlElement/wrapText","UI.Component/beforeFirstRender","UI.Component/createComponentSignal","UI.Component/Renderer","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed"]},{"id":"UI.Icon","name":"Icon","isClass":true,"file":"dist/core/typings/UI/Components/Controls/Icon.d.ts","line":2,"code":"class Icon extends ControlElement","doc":"<p>Represents an icon control (horizontally centered).</p>\n","extends":["UI.ControlElement"],"items":[{"id":"UI.Icon.Initializer","name":"Initializer","isInterface":true,"file":"dist/core/typings/UI/Components/Controls/Icon.d.ts","line":20,"code":"interface Initializer extends ControlElement.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["UI.ControlElement.Initializer"],"items":[{"id":"UI.Icon.Initializer/icon","name":"icon","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Icon.d.ts","line":22,"code":"icon?: UIValueOrAsync<string>;","doc":"<p>Property initializer: icon to display.</p>\n","declType":"UIValueOrAsync<string>"},{"id":"UI.Icon.Initializer/tooltipText","name":"tooltipText","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Icon.d.ts","line":24,"code":"tooltipText?: UIValueOrAsync<string | TextLabelFactory>;","doc":"<p>Property initializer: tooltip text.</p>\n","declType":"UIValueOrAsync<string | TextLabelFactory>"}],"inherits":["UI.Component.Initializer/ArrowDownKeyPressed","UI.Component.Initializer/ArrowLeftKeyPressed","UI.Component.Initializer/ArrowRightKeyPressed","UI.Component.Initializer/ArrowUpKeyPressed","UI.Component.Initializer/BackspaceKeyPressed","UI.Component.Initializer/Blur","UI.Component.Initializer/Click","UI.Component.Initializer/Clicked","UI.Component.Initializer/DeleteKeyPressed","UI.Component.Initializer/DoubleClick","UI.Component.Initializer/DoubleClicked","UI.Component.Initializer/DragDrop","UI.Component.Initializer/DragEnter","UI.Component.Initializer/DragLeave","UI.Component.Initializer/DragStart","UI.Component.Initializer/EnterKeyPressed","UI.Component.Initializer/EscapeKeyPressed","UI.Component.Initializer/Focus","UI.Component.Initializer/FocusGained","UI.Component.Initializer/FocusLost","UI.Component.Initializer/KeyDown","UI.Component.Initializer/KeyPress","UI.Component.Initializer/MouseContextMenu","UI.Component.Initializer/MouseEnter","UI.Component.Initializer/MouseLeave","UI.Component.Initializer/Press","UI.Component.Initializer/Pressed","UI.Component.Initializer/Rendered","UI.Component.Initializer/SpaceBarPressed","UI.Component.Initializer/animations","UI.Component.Initializer/focusMode","UI.ControlElement.Initializer/hasFocus","UI.Component.Initializer/height","UI.Component.Initializer/hidden","UI.Component.Initializer/id","UI.Component.Initializer/renderOptions","UI.Component.Initializer/selected","UI.Component.Initializer/selectionMode","UI.Component.Initializer/shadowEffect","UI.Component.Initializer/shadowEffectOnFocus","UI.Component.Initializer/shadowEffectOnHover","UI.ControlElement.Initializer/shrinkwrap","UI.Component.Initializer/style","UI.ControlElement.Initializer/width"]},{"id":"UI.Icon.with","name":"with","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Icon.d.ts","line":4,"code":"static with: ComponentFactory.WithMethodNoContent<Icon.Initializer>;","doc":"<p>Create a component factory for this class.</p>\n","declType":"ComponentFactory.WithMethodNoContent<Icon.Initializer>"},{"id":"UI.Icon.withIcon","name":"withIcon","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Controls/Icon.d.ts","line":6,"code":"static withIcon<T extends typeof Icon>(this: T, icon: UIValueOrAsync<string>): T & ComponentFactory<Icon>;","doc":"<p>Initialize an icon control with given icon name.</p>\n","typeParams":["T extends typeof Icon"],"declType":"T & ComponentFactory<Icon>"},{"id":"UI.Icon.constructor","name":"new Icon","hasParams":true,"isCtor":true,"file":"dist/core/typings/UI/Components/Controls/Icon.d.ts","line":10,"code":"constructor(icon?: string);","doc":"<p>Create an icon element.</p>\n"},{"id":"UI.Icon/icon","name":"icon","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Icon.d.ts","line":12,"code":"icon: string;","doc":"<p>Icon name as CSS class(es), e.g. “glyphicon-edit” or “fa-edit fa-2x” or “material-icons:file_download”; first part is repeated Bootstrap-style automatically, e.g. “fa-edit” becomes “fa fa-edit”; observed); style properties can be appended like “fa-edit color=#ccc fontSize=200%” (or font-size); use quotes to wrap values with spaces, e.g. ‘fa-edit border=“1px solid #ccc”’.</p>\n","declType":"string"},{"id":"UI.Icon/initializeWith","name":"initializeWith","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Icon.d.ts","line":8,"code":"initializeWith: ComponentFactory.InitializeWithMethod<Icon.Initializer>;","doc":"<p>Initialize this component with given properties; returns this.</p>\n","declType":"ComponentFactory.InitializeWithMethod<Icon.Initializer>"},{"id":"UI.Icon/shrinkwrap","name":"shrinkwrap","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Icon.d.ts","line":16,"code":"shrinkwrap: boolean;","doc":"<p>Set to false to expand horizontally within row (observed).</p>\n","declType":"boolean"},{"id":"UI.Icon/tooltipText","name":"tooltipText","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Icon.d.ts","line":14,"code":"tooltipText: string;","doc":"<p>Tooltip text (observed).</p>\n","declType":"string"}],"isNamespace":true,"inherits":["UI.Component.addStyleOverride","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Component/appendChild","UI.Component/contains","UI.Component/displayOptions","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Component/getChildren","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Component/hoverState","UI.Component/id","UI.Component/initialize","UI.Component/out","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/setFormValues","UI.Component/shadowEffect","UI.Component/style","UI.Component/uid","UI.ControlElement/width","UI.ControlElement/wrapText","UI.Component/Renderer","UI.Component/beforeFirstRender","UI.Component/createComponentSignal","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed"]},{"id":"UI.Image","name":"Image","isClass":true,"file":"dist/core/typings/UI/Components/Controls/Image.d.ts","line":3,"code":"class Image extends ControlElement","doc":"<p>Represents an image control.</p>\n","extends":["UI.ControlElement"],"items":[{"id":"UI.Image.Initializer","name":"Initializer","isInterface":true,"file":"dist/core/typings/UI/Components/Controls/Image.d.ts","line":27,"code":"interface Initializer extends ControlElement.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["UI.ControlElement.Initializer"],"items":[{"id":"UI.Image.Initializer/imageUrl","name":"imageUrl","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Image.d.ts","line":29,"code":"imageUrl?: UIValueOrAsync<string>;","doc":"<p>Property initializer: image URL.</p>\n","declType":"UIValueOrAsync<string>"},{"id":"UI.Image.Initializer/style_img","name":"style_img","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Image.d.ts","line":31,"code":"style_img?: UIValueOrAsync<Style | Style.StyleSet>;","doc":"<p>Property initializer: image element style.</p>\n","declType":"UIValueOrAsync<Style | Style.StyleSet>"},{"id":"UI.Image.Initializer/tooltipText","name":"tooltipText","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Image.d.ts","line":33,"code":"tooltipText?: UIValueOrAsync<string | TextLabelFactory>;","doc":"<p>Property initializer: tooltip text.</p>\n","declType":"UIValueOrAsync<string | TextLabelFactory>"}],"inherits":["UI.Component.Initializer/ArrowDownKeyPressed","UI.Component.Initializer/ArrowLeftKeyPressed","UI.Component.Initializer/ArrowRightKeyPressed","UI.Component.Initializer/ArrowUpKeyPressed","UI.Component.Initializer/BackspaceKeyPressed","UI.Component.Initializer/Blur","UI.Component.Initializer/Click","UI.Component.Initializer/Clicked","UI.Component.Initializer/DeleteKeyPressed","UI.Component.Initializer/DoubleClick","UI.Component.Initializer/DoubleClicked","UI.Component.Initializer/DragDrop","UI.Component.Initializer/DragEnter","UI.Component.Initializer/DragLeave","UI.Component.Initializer/DragStart","UI.Component.Initializer/EnterKeyPressed","UI.Component.Initializer/EscapeKeyPressed","UI.Component.Initializer/Focus","UI.Component.Initializer/FocusGained","UI.Component.Initializer/FocusLost","UI.Component.Initializer/KeyDown","UI.Component.Initializer/KeyPress","UI.Component.Initializer/MouseContextMenu","UI.Component.Initializer/MouseEnter","UI.Component.Initializer/MouseLeave","UI.Component.Initializer/Press","UI.Component.Initializer/Pressed","UI.Component.Initializer/Rendered","UI.Component.Initializer/SpaceBarPressed","UI.Component.Initializer/animations","UI.Component.Initializer/focusMode","UI.ControlElement.Initializer/hasFocus","UI.Component.Initializer/height","UI.Component.Initializer/hidden","UI.Component.Initializer/id","UI.Component.Initializer/renderOptions","UI.Component.Initializer/selected","UI.Component.Initializer/selectionMode","UI.Component.Initializer/shadowEffect","UI.Component.Initializer/shadowEffectOnFocus","UI.Component.Initializer/shadowEffectOnHover","UI.ControlElement.Initializer/shrinkwrap","UI.Component.Initializer/style","UI.ControlElement.Initializer/width"]},{"id":"UI.Image.with","name":"with","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Image.d.ts","line":5,"code":"static with: ComponentFactory.WithMethodNoContent<Image.Initializer>;","doc":"<p>Create a component factory for this class.</p>\n","declType":"ComponentFactory.WithMethodNoContent<Image.Initializer>"},{"id":"UI.Image.withUrl","name":"withUrl","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Controls/Image.d.ts","line":7,"code":"static withUrl<T extends typeof Image>(this: T, imageUrl: UIValueOrAsync<string>): T & ComponentFactory<Image>;","doc":"<p>Initialize an image control with given URL.</p>\n","typeParams":["T extends typeof Image"],"declType":"T & ComponentFactory<Image>"},{"id":"UI.Image.constructor","name":"new Image","hasParams":true,"isCtor":true,"file":"dist/core/typings/UI/Components/Controls/Image.d.ts","line":11,"code":"constructor(imageUrl?: string);","doc":"<p>Create an image element.</p>\n"},{"id":"UI.Image/hasError","name":"hasError","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Image.d.ts","line":21,"code":"hasError: boolean;","doc":"<p>True if a load error occurred (observable).</p>\n","declType":"boolean"},{"id":"UI.Image/imageUrl","name":"imageUrl","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Image.d.ts","line":13,"code":"imageUrl: string;","doc":"<p>Image URL (observed).</p>\n","declType":"string"},{"id":"UI.Image/initializeWith","name":"initializeWith","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Image.d.ts","line":9,"code":"initializeWith: ComponentFactory.InitializeWithMethod<Image.Initializer>;","doc":"<p>Initialize this component with given properties; returns this.</p>\n","declType":"ComponentFactory.InitializeWithMethod<Image.Initializer>"},{"id":"UI.Image/ready","name":"ready","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Image.d.ts","line":23,"code":"ready: PromiseLike<void>;","doc":"<p>Promise that resolves when the image is loaded, or if an error occurred (see .hasError).</p>\n","declType":"PromiseLike<void>","isAsync":true},{"id":"UI.Image/shrinkwrap","name":"shrinkwrap","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Image.d.ts","line":17,"code":"shrinkwrap: boolean;","doc":"<p>Set to false to expand horizontally within row (observed).</p>\n","declType":"boolean"},{"id":"UI.Image/style_img","name":"style_img","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Controls/Image.d.ts","line":19,"code":"readonly style_img: Style;","doc":"<p>Encapsulation of image element style (observed).</p>\n","declType":"Style"},{"id":"UI.Image/tooltipText","name":"tooltipText","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Image.d.ts","line":15,"code":"tooltipText: string;","doc":"<p>Tooltip text (observed).</p>\n","declType":"string"}],"isNamespace":true,"inherits":["UI.Component.addStyleOverride","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Component/appendChild","UI.Component/contains","UI.Component/displayOptions","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Component/getChildren","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Component/hoverState","UI.Component/id","UI.Component/initialize","UI.Component/out","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/setFormValues","UI.Component/shadowEffect","UI.Component/style","UI.Component/uid","UI.ControlElement/width","UI.ControlElement/wrapText","UI.Component/Renderer","UI.Component/beforeFirstRender","UI.Component/createComponentSignal","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed"]},{"id":"UI.InputControl","name":"InputControl","isClass":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/InputControl.d.ts","line":4,"code":"class InputControl extends ControlElement","doc":"<p>Input field control base class (abstract).</p>\n","extends":["UI.ControlElement"],"items":[{"id":"UI.InputControl.Initializer","name":"Initializer","isInterface":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/InputControl.d.ts","line":30,"code":"interface Initializer extends ControlElement.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["UI.ControlElement.Initializer"],"items":[{"id":"UI.InputControl.Initializer/ValueChange","name":"ValueChange","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/InputControl.d.ts","line":46,"code":"ValueChange?: string | ActionHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | ActionHandler"},{"id":"UI.InputControl.Initializer/ValueInput","name":"ValueInput","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/InputControl.d.ts","line":48,"code":"ValueInput?: string | ActionHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | ActionHandler"},{"id":"UI.InputControl.Initializer/disabled","name":"disabled","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/InputControl.d.ts","line":40,"code":"disabled?: UIValueOrAsync<boolean>;","doc":"<p>Property initializer: true to disable this input.</p>\n","declType":"UIValueOrAsync<boolean>"},{"id":"UI.InputControl.Initializer/label","name":"label","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/InputControl.d.ts","line":36,"code":"label?: UIValueOrAsync<string | undefined> | TextLabelFactory;","doc":"<p>Property initializer: label text.</p>\n","declType":"UIValueOrAsync<string | undefined> | TextLabelFactory"},{"id":"UI.InputControl.Initializer/name","name":"name","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/InputControl.d.ts","line":32,"code":"name?: string;","doc":"<p>Property initializer: form input property name.</p>\n","declType":"string"},{"id":"UI.InputControl.Initializer/style_input","name":"style_input","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/InputControl.d.ts","line":44,"code":"style_input?: UIValueOrAsync<Style | Style.StyleSet>;","doc":"<p>Property initializer: input style.</p>\n","declType":"UIValueOrAsync<Style | Style.StyleSet>"},{"id":"UI.InputControl.Initializer/style_label","name":"style_label","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/InputControl.d.ts","line":42,"code":"style_label?: UIValueOrAsync<Style | Style.StyleSet>;","doc":"<p>Property initializer: label style.</p>\n","declType":"UIValueOrAsync<Style | Style.StyleSet>"},{"id":"UI.InputControl.Initializer/tooltipText","name":"tooltipText","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/InputControl.d.ts","line":38,"code":"tooltipText?: UIValueOrAsync<string | undefined> | TextLabelFactory;","doc":"<p>Property initializer: tooltip text.</p>\n","declType":"UIValueOrAsync<string | undefined> | TextLabelFactory"},{"id":"UI.InputControl.Initializer/value","name":"value","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/InputControl.d.ts","line":34,"code":"value?: UIValueOrAsync<string>;","doc":"<p>Property initializer: input value.</p>\n","declType":"UIValueOrAsync<string>"}],"inherits":["UI.Component.Initializer/ArrowDownKeyPressed","UI.Component.Initializer/ArrowLeftKeyPressed","UI.Component.Initializer/ArrowRightKeyPressed","UI.Component.Initializer/ArrowUpKeyPressed","UI.Component.Initializer/BackspaceKeyPressed","UI.Component.Initializer/Blur","UI.Component.Initializer/Click","UI.Component.Initializer/Clicked","UI.Component.Initializer/DeleteKeyPressed","UI.Component.Initializer/DoubleClick","UI.Component.Initializer/DoubleClicked","UI.Component.Initializer/DragDrop","UI.Component.Initializer/DragEnter","UI.Component.Initializer/DragLeave","UI.Component.Initializer/DragStart","UI.Component.Initializer/EnterKeyPressed","UI.Component.Initializer/EscapeKeyPressed","UI.Component.Initializer/Focus","UI.Component.Initializer/FocusGained","UI.Component.Initializer/FocusLost","UI.Component.Initializer/KeyDown","UI.Component.Initializer/KeyPress","UI.Component.Initializer/MouseContextMenu","UI.Component.Initializer/MouseEnter","UI.Component.Initializer/MouseLeave","UI.Component.Initializer/Press","UI.Component.Initializer/Pressed","UI.Component.Initializer/Rendered","UI.Component.Initializer/SpaceBarPressed","UI.Component.Initializer/animations","UI.Component.Initializer/focusMode","UI.ControlElement.Initializer/hasFocus","UI.Component.Initializer/height","UI.Component.Initializer/hidden","UI.Component.Initializer/id","UI.Component.Initializer/renderOptions","UI.Component.Initializer/selected","UI.Component.Initializer/selectionMode","UI.Component.Initializer/shadowEffect","UI.Component.Initializer/shadowEffectOnFocus","UI.Component.Initializer/shadowEffectOnHover","UI.ControlElement.Initializer/shrinkwrap","UI.Component.Initializer/style","UI.ControlElement.Initializer/width"]},{"id":"UI.InputControl.with","name":"with","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/InputControl.d.ts","line":6,"code":"static with: ComponentFactory.WithMethodNoContent<InputControl.Initializer>;","doc":"<p>Create a component factory for this class.</p>\n","declType":"ComponentFactory.WithMethodNoContent<InputControl.Initializer>"},{"id":"UI.InputControl/disabled","name":"disabled","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/InputControl.d.ts","line":18,"code":"disabled: boolean;","doc":"<p>True if input is disabled and read-only (observed).</p>\n","declType":"boolean"},{"id":"UI.InputControl/initializeWith","name":"initializeWith","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/InputControl.d.ts","line":8,"code":"initializeWith: ComponentFactory.InitializeWithMethod<InputControl.Initializer>;","doc":"<p>Initialize this component with given properties; returns this.</p>\n","declType":"ComponentFactory.InitializeWithMethod<InputControl.Initializer>"},{"id":"UI.InputControl/label","name":"label","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/InputControl.d.ts","line":14,"code":"label: string;","doc":"<p>Label text (observed).</p>\n","declType":"string"},{"id":"UI.InputControl/name","name":"name","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/InputControl.d.ts","line":12,"code":"name: string;","doc":"<p>Form input property name, if any (observed).</p>\n","declType":"string"},{"id":"UI.InputControl/style_input","name":"style_input","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/InputControl.d.ts","line":22,"code":"readonly style_input: Style;","doc":"<p>Encapsulation of input element style (observed).</p>\n","declType":"Style"},{"id":"UI.InputControl/style_label","name":"style_label","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/InputControl.d.ts","line":20,"code":"readonly style_label: Style;","doc":"<p>Encapsulation of label element style (observed).</p>\n","declType":"Style"},{"id":"UI.InputControl/tooltipText","name":"tooltipText","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/InputControl.d.ts","line":16,"code":"tooltipText: string;","doc":"<p>Tooltip text (observed).</p>\n","declType":"string"},{"id":"UI.InputControl/value","name":"value","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/InputControl.d.ts","line":10,"code":"value: string;","doc":"<p>Input value (read/write).</p>\n","declType":"string"},{"id":"UI.InputControl/ValueChange","name":"ValueChange","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/InputControl.d.ts","line":24,"code":"readonly ValueChange: ComponentSignal.Emittable<any>;","doc":"<p>Signal emitted when the input value is committed (on change); captured from containers down to contained components, not consumed.</p>\n","declType":"ComponentSignal.Emittable<any>","isSignal":true},{"id":"UI.InputControl/ValueInput","name":"ValueInput","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/InputControl.d.ts","line":26,"code":"readonly ValueInput: ComponentSignal.Emittable<any>;","doc":"<p>Signal emitted immediately before the input value changes (on input); captured from containers down to contained components, not consumed.</p>\n","declType":"ComponentSignal.Emittable<any>","isSignal":true}],"isNamespace":true,"inherits":["UI.Component.addStyleOverride","UI.Component.constructor","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Component/appendChild","UI.Component/contains","UI.Component/displayOptions","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Component/getChildren","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Component/hoverState","UI.Component/id","UI.Component/initialize","UI.Component/out","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/setFormValues","UI.Component/shadowEffect","UI.ControlElement/shrinkwrap","UI.Component/style","UI.Component/uid","UI.ControlElement/width","UI.ControlElement/wrapText","UI.Component/Renderer","UI.Component/beforeFirstRender","UI.Component/createComponentSignal","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed"]},{"id":"UI.KeyEventSignal","name":"KeyEventSignal","isClass":true,"file":"dist/core/typings/UI/Components/ComponentSignal.d.ts","line":73,"code":"class KeyEventSignal extends ComponentSignal<KeyboardEvent>","doc":"<p>Signal that is emitted when a keyboard event occurs.</p>\n","extends":["UI.ComponentSignal"],"items":[],"inherits":["Async.Signal.create","Async.Signal.constructor","Async.Signal/catch","Async.Signal/data","Async.Signal/emit","Async.Signal/results","Async.Signal/then"]},{"id":"UI.KeyHandler","name":"KeyHandler","isClass":true,"file":"dist/core/typings/UI/Components/ComponentSignal.d.ts","line":76,"code":"class KeyHandler extends ComponentSignalHandler<KeyboardEvent>","doc":"<p>Constructor for a keyboard event handler.</p>\n","extends":["UI.ComponentSignalHandler"],"items":[],"inherits":["UI.ComponentSignalHandler.-call","UI.ComponentSignalHandler/connectTo","UI.ComponentSignalHandler/isEventHandler"]},{"id":"UI.KeyboardEvent","name":"KeyboardEvent","isInterface":true,"file":"dist/core/typings/UI/Components/ComponentSignal.d.ts","line":29,"code":"interface KeyboardEvent","doc":"<p>Interface definition of a platform agnostic keyboard event.</p>\n","items":[{"id":"UI.KeyboardEvent/altKey","name":"altKey","isProperty":true,"file":"dist/core/typings/UI/Components/ComponentSignal.d.ts","line":31,"code":"altKey?: boolean;","doc":"<p>True if <code>alt</code> key is held down.</p>\n","declType":"boolean"},{"id":"UI.KeyboardEvent/ctrlKey","name":"ctrlKey","isProperty":true,"file":"dist/core/typings/UI/Components/ComponentSignal.d.ts","line":33,"code":"ctrlKey?: boolean;","doc":"<p>True if <code>ctrl</code> key is held down.</p>\n","declType":"boolean"},{"id":"UI.KeyboardEvent/keyCode","name":"keyCode","isProperty":true,"file":"dist/core/typings/UI/Components/ComponentSignal.d.ts","line":39,"code":"keyCode?: number;","doc":"<p>Key code, used with key up/down events.</p>\n","declType":"number"},{"id":"UI.KeyboardEvent/metaKey","name":"metaKey","isProperty":true,"file":"dist/core/typings/UI/Components/ComponentSignal.d.ts","line":35,"code":"metaKey?: boolean;","doc":"<p>True if <code>meta</code> key is held down.</p>\n","declType":"boolean"},{"id":"UI.KeyboardEvent/preventDefault","name":"preventDefault","isProperty":true,"file":"dist/core/typings/UI/Components/ComponentSignal.d.ts","line":43,"code":"preventDefault?: () => void;","doc":"<p>Stop the default action for this event from taking place.</p>\n","declType":"() => void"},{"id":"UI.KeyboardEvent/shiftKey","name":"shiftKey","isProperty":true,"file":"dist/core/typings/UI/Components/ComponentSignal.d.ts","line":37,"code":"shiftKey?: boolean;","doc":"<p>True if <code>shift</code> key is held down.</p>\n","declType":"boolean"},{"id":"UI.KeyboardEvent/which","name":"which","isProperty":true,"file":"dist/core/typings/UI/Components/ComponentSignal.d.ts","line":41,"code":"which?: number;","doc":"<p>Character code (usually ASCII), used with key press events.</p>\n","declType":"number"}]},{"id":"UI.Label","name":"Label","isClass":true,"file":"dist/core/typings/UI/Components/Controls/Label.d.ts","line":3,"code":"class Label extends ControlElement","doc":"<p>Represents a minimal text control with icon and badge.</p>\n","extends":["UI.ControlElement"],"items":[{"id":"UI.Label.Initializer","name":"Initializer","isInterface":true,"file":"dist/core/typings/UI/Components/Controls/Label.d.ts","line":31,"code":"interface Initializer extends ControlElement.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["UI.ControlElement.Initializer"],"items":[{"id":"UI.Label.Initializer/badge","name":"badge","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Label.d.ts","line":43,"code":"badge?: UIValueOrAsync<string | TextLabelFactory>;","doc":"<p>Property initializer: badge text to display.</p>\n","declType":"UIValueOrAsync<string | TextLabelFactory>"},{"id":"UI.Label.Initializer/icon","name":"icon","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Label.d.ts","line":39,"code":"icon?: UIValueOrAsync<string>;","doc":"<p>Property initializer: icon to display.</p>\n","declType":"UIValueOrAsync<string>"},{"id":"UI.Label.Initializer/remGutter","name":"remGutter","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Label.d.ts","line":41,"code":"remGutter?: UIValueOrAsync<number>;","doc":"<p>Property initializer: space reserved for icon, in rem units.</p>\n","declType":"UIValueOrAsync<number>"},{"id":"UI.Label.Initializer/text","name":"text","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Label.d.ts","line":33,"code":"text?: UIValueOrAsync<string | TextLabelFactory>;","doc":"<p>Property initializer: text to display.</p>\n","declType":"UIValueOrAsync<string | TextLabelFactory>"},{"id":"UI.Label.Initializer/textAfter","name":"textAfter","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Label.d.ts","line":37,"code":"textAfter?: UIValueOrAsync<string | TextLabelFactory>;","doc":"<p>Property initializer: text to display.</p>\n","declType":"UIValueOrAsync<string | TextLabelFactory>"},{"id":"UI.Label.Initializer/textBefore","name":"textBefore","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Label.d.ts","line":35,"code":"textBefore?: UIValueOrAsync<string | TextLabelFactory>;","doc":"<p>Property initializer: text to display.</p>\n","declType":"UIValueOrAsync<string | TextLabelFactory>"},{"id":"UI.Label.Initializer/tooltipText","name":"tooltipText","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Label.d.ts","line":45,"code":"tooltipText?: UIValueOrAsync<string | TextLabelFactory>;","doc":"<p>Property initializer: tooltip text.</p>\n","declType":"UIValueOrAsync<string | TextLabelFactory>"}],"inherits":["UI.Component.Initializer/ArrowDownKeyPressed","UI.Component.Initializer/ArrowLeftKeyPressed","UI.Component.Initializer/ArrowRightKeyPressed","UI.Component.Initializer/ArrowUpKeyPressed","UI.Component.Initializer/BackspaceKeyPressed","UI.Component.Initializer/Blur","UI.Component.Initializer/Click","UI.Component.Initializer/Clicked","UI.Component.Initializer/DeleteKeyPressed","UI.Component.Initializer/DoubleClick","UI.Component.Initializer/DoubleClicked","UI.Component.Initializer/DragDrop","UI.Component.Initializer/DragEnter","UI.Component.Initializer/DragLeave","UI.Component.Initializer/DragStart","UI.Component.Initializer/EnterKeyPressed","UI.Component.Initializer/EscapeKeyPressed","UI.Component.Initializer/Focus","UI.Component.Initializer/FocusGained","UI.Component.Initializer/FocusLost","UI.Component.Initializer/KeyDown","UI.Component.Initializer/KeyPress","UI.Component.Initializer/MouseContextMenu","UI.Component.Initializer/MouseEnter","UI.Component.Initializer/MouseLeave","UI.Component.Initializer/Press","UI.Component.Initializer/Pressed","UI.Component.Initializer/Rendered","UI.Component.Initializer/SpaceBarPressed","UI.Component.Initializer/animations","UI.Component.Initializer/focusMode","UI.ControlElement.Initializer/hasFocus","UI.Component.Initializer/height","UI.Component.Initializer/hidden","UI.Component.Initializer/id","UI.Component.Initializer/renderOptions","UI.Component.Initializer/selected","UI.Component.Initializer/selectionMode","UI.Component.Initializer/shadowEffect","UI.Component.Initializer/shadowEffectOnFocus","UI.Component.Initializer/shadowEffectOnHover","UI.ControlElement.Initializer/shrinkwrap","UI.Component.Initializer/style","UI.ControlElement.Initializer/width"]},{"id":"UI.Label.with","name":"with","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Label.d.ts","line":5,"code":"static with: ComponentFactory.WithMethodNoContent<Label.Initializer>;","doc":"<p>Create a component factory for this class.</p>\n","declType":"ComponentFactory.WithMethodNoContent<Label.Initializer>"},{"id":"UI.Label.withText","name":"withText","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Controls/Label.d.ts","line":7,"code":"static withText<T extends typeof Label>(this: T, text: UIValueOrAsync<string | TextLabelFactory>, style?: UIValueOrAsync<Style | Style.StyleSet>): T & ComponentFactory<Label>;","doc":"<p>Initialize a text control factory with given text and style.</p>\n","typeParams":["T extends typeof Label"],"declType":"T & ComponentFactory<Label>"},{"id":"UI.Label.constructor","name":"new Label","hasParams":true,"isCtor":true,"file":"dist/core/typings/UI/Components/Controls/Label.d.ts","line":11,"code":"constructor(text?: string | TextLabelFactory, icon?: string, remGutter?: number, badge?: string | TextLabelFactory);","doc":"<p>Create a label element.</p>\n"},{"id":"UI.Label/badge","name":"badge","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Label.d.ts","line":25,"code":"badge: string;","doc":"<p>Badge text, if any (observed).</p>\n","declType":"string"},{"id":"UI.Label/icon","name":"icon","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Label.d.ts","line":21,"code":"icon?: string;","doc":"<p>Icon to be placed in front of the label text (CSS class(es), e.g. “glyphicon-edit” or “fa-edit fa-2x” or “material-icons:file_download”; first part is repeated Bootstrap-style automatically, e.g. “fa-edit” becomes “fa fa-edit”; observed); style properties can be appended like “fa-edit color=#ccc fontSize=200%” (or font-size); use quotes to wrap values with spaces, e.g. ‘fa-edit border=“1px solid #ccc”’.</p>\n","declType":"string"},{"id":"UI.Label/initializeWith","name":"initializeWith","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Label.d.ts","line":9,"code":"initializeWith: ComponentFactory.InitializeWithMethod<Label.Initializer>;","doc":"<p>Initialize this component with given properties; returns this.</p>\n","declType":"ComponentFactory.InitializeWithMethod<Label.Initializer>"},{"id":"UI.Label/remGutter","name":"remGutter","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Label.d.ts","line":23,"code":"remGutter: number;","doc":"<p>Space reserved for icon (rem units), if &gt; 0 (observed).</p>\n","declType":"number"},{"id":"UI.Label/shrinkwrap","name":"shrinkwrap","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Label.d.ts","line":13,"code":"shrinkwrap: boolean;","doc":"<p>Set to false to expand horizontally within row (default true; observed).</p>\n","declType":"boolean"},{"id":"UI.Label/text","name":"text","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Label.d.ts","line":15,"code":"text: string;","doc":"<p>Text to display (observed).</p>\n","declType":"string"},{"id":"UI.Label/textAfter","name":"textAfter","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Label.d.ts","line":19,"code":"textAfter: string;","doc":"<p>Smaller text to display after/below <code>.text</code>, e.g. as a sub heading (observed).</p>\n","declType":"string"},{"id":"UI.Label/textBefore","name":"textBefore","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Label.d.ts","line":17,"code":"textBefore: string;","doc":"<p>Smaller text to display before/above <code>.text</code>, e.g. as a sub heading (observed).</p>\n","declType":"string"},{"id":"UI.Label/tooltipText","name":"tooltipText","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Label.d.ts","line":27,"code":"tooltipText: string;","doc":"<p>Tooltip text (observed).</p>\n","declType":"string"}],"isNamespace":true,"inherits":["UI.Component.addStyleOverride","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Component/appendChild","UI.Component/contains","UI.Component/displayOptions","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Component/getChildren","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Component/hoverState","UI.Component/id","UI.Component/initialize","UI.Component/out","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/setFormValues","UI.Component/shadowEffect","UI.Component/style","UI.Component/uid","UI.ControlElement/width","UI.ControlElement/wrapText","UI.Component/Renderer","UI.Component/beforeFirstRender","UI.Component/createComponentSignal","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed"]},{"id":"UI.LayoutContainer","name":"LayoutContainer","isClass":true,"file":"dist/core/typings/UI/Components/Containers/LayoutContainer.d.ts","line":2,"code":"class LayoutContainer extends Container","doc":"<p>Represents a container with sub containers on up to four sides, and a main area with vertically stacked blocks.</p>\n","extends":["UI.Container"],"items":[{"id":"UI.LayoutContainer.FOOTER_HEIGHT","name":"FOOTER_HEIGHT","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Components/Containers/LayoutContainer.d.ts","line":14,"code":"static FOOTER_HEIGHT: string;","doc":"<p>Default footer height, used when footer container has no defined height (CSS value, initially 2rem).</p>\n","declType":"string"},{"id":"UI.LayoutContainer.HEADER_HEIGHT","name":"HEADER_HEIGHT","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Components/Containers/LayoutContainer.d.ts","line":12,"code":"static HEADER_HEIGHT: string;","doc":"<p>Default header height, used when header container has no defined height (CSS value, initially 4rem).</p>\n","declType":"string"},{"id":"UI.LayoutContainer.INSIDE_GUTTER_WIDTH","name":"INSIDE_GUTTER_WIDTH","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Components/Containers/LayoutContainer.d.ts","line":8,"code":"static INSIDE_GUTTER_WIDTH: string;","doc":"<p>Default inside gutter width, used when inside gutter container has no defined width (CSS value, initially 18rem).</p>\n","declType":"string"},{"id":"UI.LayoutContainer.Initializer","name":"Initializer","isInterface":true,"file":"dist/core/typings/UI/Components/Containers/LayoutContainer.d.ts","line":30,"code":"interface Initializer extends Container.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["UI.Container.Initializer"],"items":[{"id":"UI.LayoutContainer.Initializer/footer","name":"footer","isProperty":true,"file":"dist/core/typings/UI/Components/Containers/LayoutContainer.d.ts","line":34,"code":"footer?: ComponentFactory.SpecEltOrList | null;","doc":"<p>Property initializer: footer container.</p>\n","declType":"ComponentFactory.SpecEltOrList | null"},{"id":"UI.LayoutContainer.Initializer/header","name":"header","isProperty":true,"file":"dist/core/typings/UI/Components/Containers/LayoutContainer.d.ts","line":32,"code":"header?: ComponentFactory.SpecEltOrList | null;","doc":"<p>Property initializer: header container.</p>\n","declType":"ComponentFactory.SpecEltOrList | null"},{"id":"UI.LayoutContainer.Initializer/insideGutter","name":"insideGutter","isProperty":true,"file":"dist/core/typings/UI/Components/Containers/LayoutContainer.d.ts","line":36,"code":"insideGutter?: ComponentFactory.SpecEltOrList | null;","doc":"<p>Property initializer: inside gutter container (i.e. on the left for default ltr mode).</p>\n","declType":"ComponentFactory.SpecEltOrList | null"},{"id":"UI.LayoutContainer.Initializer/outsideGutter","name":"outsideGutter","isProperty":true,"file":"dist/core/typings/UI/Components/Containers/LayoutContainer.d.ts","line":38,"code":"outsideGutter?: ComponentFactory.SpecEltOrList | null;","doc":"<p>Property initializer: outside gutter container (i.e. on the right for default ltr mode).</p>\n","declType":"ComponentFactory.SpecEltOrList | null"}],"inherits":["UI.Component.Initializer/ArrowDownKeyPressed","UI.Component.Initializer/ArrowLeftKeyPressed","UI.Component.Initializer/ArrowRightKeyPressed","UI.Component.Initializer/ArrowUpKeyPressed","UI.Component.Initializer/BackspaceKeyPressed","UI.Component.Initializer/Blur","UI.Component.Initializer/Click","UI.Component.Initializer/Clicked","UI.Component.Initializer/DeleteKeyPressed","UI.Component.Initializer/DoubleClick","UI.Component.Initializer/DoubleClicked","UI.Component.Initializer/DragDrop","UI.Component.Initializer/DragEnter","UI.Component.Initializer/DragLeave","UI.Component.Initializer/DragStart","UI.Component.Initializer/EnterKeyPressed","UI.Component.Initializer/EscapeKeyPressed","UI.Component.Initializer/Focus","UI.Component.Initializer/FocusGained","UI.Component.Initializer/FocusLost","UI.Component.Initializer/KeyDown","UI.Component.Initializer/KeyPress","UI.Component.Initializer/MouseContextMenu","UI.Component.Initializer/MouseEnter","UI.Component.Initializer/MouseLeave","UI.Component.Initializer/Press","UI.Component.Initializer/Pressed","UI.Component.Initializer/Rendered","UI.Component.Initializer/SpaceBarPressed","UI.Component.Initializer/animations","UI.Container.Initializer/content","UI.Container.Initializer/displayOptions","UI.Container.Initializer/focusFirst","UI.Component.Initializer/focusMode","UI.Component.Initializer/hasFocus","UI.Component.Initializer/height","UI.Component.Initializer/hidden","UI.Container.Initializer/horzAlign","UI.Component.Initializer/id","UI.Container.Initializer/maxContentWidth","UI.Component.Initializer/renderOptions","UI.Container.Initializer/scrollBottomThreshold","UI.Container.Initializer/scrollTopThreshold","UI.Container.Initializer/scrollable","UI.Component.Initializer/selected","UI.Component.Initializer/selectionMode","UI.Component.Initializer/shadowEffect","UI.Component.Initializer/shadowEffectOnFocus","UI.Component.Initializer/shadowEffectOnHover","UI.Component.Initializer/style","UI.Container.Initializer/vertAlign","UI.Component.Initializer/width"]},{"id":"UI.LayoutContainer.OUTSIDE_GUTTER_WIDTH","name":"OUTSIDE_GUTTER_WIDTH","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Components/Containers/LayoutContainer.d.ts","line":10,"code":"static OUTSIDE_GUTTER_WIDTH: string;","doc":"<p>Default outside gutter width, used when outside gutter container has no defined width (CSS value, initially 22rem).</p>\n","declType":"string"},{"id":"UI.LayoutContainer.with","name":"with","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Components/Containers/LayoutContainer.d.ts","line":4,"code":"static with: ComponentFactory.WithMethod<LayoutContainer.Initializer>;","doc":"<p>Create a component factory for this class.</p>\n","declType":"ComponentFactory.WithMethod<LayoutContainer.Initializer>"},{"id":"UI.LayoutContainer/footer","name":"footer","isProperty":true,"file":"dist/core/typings/UI/Components/Containers/LayoutContainer.d.ts","line":18,"code":"footer?: Container;","doc":"<p>Footer container, if any (observed).</p>\n","declType":"Container"},{"id":"UI.LayoutContainer/getChildren","name":"getChildren","hasParams":false,"isMethod":true,"file":"dist/core/typings/UI/Components/Containers/LayoutContainer.d.ts","line":26,"code":"getChildren(): Component[];","doc":"<p>Returns an array of directly contained components (observable).</p>\n","declType":"Component[]"},{"id":"UI.LayoutContainer/header","name":"header","isProperty":true,"file":"dist/core/typings/UI/Components/Containers/LayoutContainer.d.ts","line":16,"code":"header?: Container;","doc":"<p>Header container, if any (observed).</p>\n","declType":"Container"},{"id":"UI.LayoutContainer/initializeWith","name":"initializeWith","isProperty":true,"file":"dist/core/typings/UI/Components/Containers/LayoutContainer.d.ts","line":6,"code":"initializeWith: ComponentFactory.InitializeWithMethod<LayoutContainer.Initializer>;","doc":"<p>Initialize this component with given properties; returns this.</p>\n","declType":"ComponentFactory.InitializeWithMethod<LayoutContainer.Initializer>"},{"id":"UI.LayoutContainer/insideGutter","name":"insideGutter","isProperty":true,"file":"dist/core/typings/UI/Components/Containers/LayoutContainer.d.ts","line":20,"code":"insideGutter?: Container;","doc":"<p>Inside gutter container, i.e. default on left side for left-to-right flow direction, if any (observed).</p>\n","declType":"Container"},{"id":"UI.LayoutContainer/outsideGutter","name":"outsideGutter","isProperty":true,"file":"dist/core/typings/UI/Components/Containers/LayoutContainer.d.ts","line":22,"code":"outsideGutter?: Container;","doc":"<p>Outside gutter container, i.e. default on right side for left-to-right flow direction, if any (observed).</p>\n","declType":"Container"},{"id":"UI.LayoutContainer/scrollable","name":"scrollable","isProperty":true,"file":"dist/core/typings/UI/Components/Containers/LayoutContainer.d.ts","line":24,"code":"scrollable?: boolean;","doc":"<p>Set to true to make content within container scrollable; defaults to true for <code>LayoutContainer</code> (observed).</p>\n","declType":"boolean"}],"isNamespace":true,"inherits":["UI.Component.addStyleOverride","UI.Container.constructor","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Container/appendChild","UI.Component/contains","UI.Container/content","UI.Container/displayOptions","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Container/hasEmptyList","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Container/horzAlign","UI.Component/hoverState","UI.Component/id","UI.Component/initialize","UI.Container/maxContentWidth","UI.Component/out","UI.Component/render","UI.Component/renderOptions","UI.Container/scrollBottomThreshold","UI.Container/scrollTopThreshold","UI.Container/scrolledToBottom","UI.Container/scrolledToLeft","UI.Container/scrolledToRight","UI.Container/scrolledToTop","UI.Component/selected","UI.Component/selectionMode","UI.Component/setFormValues","UI.Component/shadowEffect","UI.Component/style","UI.Component/uid","UI.Container/vertAlign","UI.Component/width","UI.Component/beforeFirstRender","UI.Component/Renderer","UI.Component/createComponentSignal","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Container/ScrolledDown","UI.Container/ScrolledUp","UI.Component/SpaceBarPressed"]},{"id":"UI.LinkButton","name":"LinkButton","isClass":true,"file":"dist/core/typings/UI/Components/Controls/Button.d.ts","line":92,"code":"class LinkButton extends Button","doc":"<p>Link-styled button control (“btn-link” class).</p>\n","extends":["UI.Button"],"items":[],"inherits":["UI.Component.addStyleOverride","UI.Button.withIcon","UI.Button.withLabel","UI.Button.constructor","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Component/appendChild","UI.Button/badge","UI.Component/contains","UI.Button/disabled","UI.Component/displayOptions","UI.Button/dropdown","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Component/getChildren","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Component/hoverState","UI.Button/icon","UI.Button/iconAfter","UI.Component/id","UI.Component/initialize","UI.Button/initializeWith","UI.Button/label","UI.Component/out","UI.Button/primary","UI.Button/remGutter","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/setFormValues","UI.Component/shadowEffect","UI.Button/shrinkwrap","UI.Component/style","UI.Button/style_button","UI.Button/target","UI.Button/tooltipText","UI.Component/uid","UI.ControlElement/width","UI.ControlElement/wrapText","UI.Component/beforeFirstRender","UI.Component/createComponentSignal","UI.Component/Renderer","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Button/DropdownClicked","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed"]},{"id":"UI.List","name":"List","isClass":true,"file":"dist/core/typings/UI/Components/Blocks/List.d.ts","line":5,"code":"class List<BlockT extends Block> extends Block","doc":"<p>Represents a list of blocks.</p>\n","extends":["UI.Block"],"typeParams":["BlockT extends Block"],"items":[{"id":"UI.List.Initializer","name":"Initializer","isInterface":true,"file":"dist/core/typings/UI/Components/Blocks/List.d.ts","line":41,"code":"interface Initializer<BlockT extends Block> extends Block.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["UI.Block.Initializer"],"typeParams":["BlockT extends Block"],"items":[{"id":"UI.List.Initializer/SelectionChange","name":"SelectionChange","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/List.d.ts","line":51,"code":"SelectionChange?: string | ListSelectionHandler<BlockT>;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | ListSelectionHandler<BlockT>"},{"id":"UI.List.Initializer/divider","name":"divider","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/List.d.ts","line":45,"code":"divider?: Divider.Initializer;","doc":"<p>Divider initializer spec.</p>\n","declType":"Divider.Initializer"},{"id":"UI.List.Initializer/items","name":"items","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/List.d.ts","line":43,"code":"items?: ComponentFactory.SpecList;","doc":"<p>Property initializer: list of items.</p>\n","declType":"ComponentFactory.SpecList"},{"id":"UI.List.Initializer/name","name":"name","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/List.d.ts","line":49,"code":"name?: string;","doc":"<p>Property initializer: form values list name.</p>\n","declType":"string"},{"id":"UI.List.Initializer/selectedIndex","name":"selectedIndex","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/List.d.ts","line":47,"code":"selectedIndex?: UIValueOrAsync<number>;","doc":"<p>Property initializer: (last) selected item index.</p>\n","declType":"UIValueOrAsync<number>"}],"inherits":["UI.Component.Initializer/ArrowDownKeyPressed","UI.Component.Initializer/ArrowLeftKeyPressed","UI.Component.Initializer/ArrowRightKeyPressed","UI.Component.Initializer/ArrowUpKeyPressed","UI.Component.Initializer/BackspaceKeyPressed","UI.Component.Initializer/Blur","UI.Component.Initializer/Click","UI.Component.Initializer/Clicked","UI.Component.Initializer/DeleteKeyPressed","UI.Component.Initializer/DoubleClick","UI.Component.Initializer/DoubleClicked","UI.Component.Initializer/DragDrop","UI.Component.Initializer/DragEnter","UI.Component.Initializer/DragLeave","UI.Component.Initializer/DragStart","UI.Component.Initializer/EnterKeyPressed","UI.Component.Initializer/EscapeKeyPressed","UI.Component.Initializer/Focus","UI.Component.Initializer/FocusGained","UI.Component.Initializer/FocusLost","UI.Component.Initializer/KeyDown","UI.Component.Initializer/KeyPress","UI.Component.Initializer/MouseContextMenu","UI.Component.Initializer/MouseEnter","UI.Component.Initializer/MouseLeave","UI.Component.Initializer/Press","UI.Component.Initializer/Pressed","UI.Component.Initializer/Rendered","UI.Component.Initializer/SpaceBarPressed","UI.Component.Initializer/animations","UI.Block.Initializer/displayOptions","UI.Component.Initializer/focusMode","UI.Component.Initializer/hasFocus","UI.Component.Initializer/height","UI.Component.Initializer/hidden","UI.Component.Initializer/id","UI.Block.Initializer/overlayPosition","UI.Component.Initializer/renderOptions","UI.Component.Initializer/selected","UI.Component.Initializer/selectionMode","UI.Component.Initializer/shadowEffect","UI.Component.Initializer/shadowEffectOnFocus","UI.Component.Initializer/shadowEffectOnHover","UI.Component.Initializer/style","UI.Component.Initializer/width"]},{"id":"UI.List.ItemEvent","name":"ItemEvent","isInterface":true,"file":"dist/core/typings/UI/Components/Blocks/List.d.ts","line":54,"code":"interface ItemEvent<T extends Block>","doc":"<p>Data that is emitted after the item selection of a list component changes.</p>\n","isStatic":true,"typeParams":["T extends Block"],"items":[{"id":"UI.List.ItemEvent/index","name":"index","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/List.d.ts","line":56,"code":"index: number;","doc":"<p>The target item index.</p>\n","declType":"number"},{"id":"UI.List.ItemEvent/item","name":"item","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/List.d.ts","line":58,"code":"item?: T;","doc":"<p>The target item.</p>\n","declType":"T"}]},{"id":"UI.List.SelectionSignal","name":"SelectionSignal","isClass":true,"file":"dist/core/typings/UI/Components/Blocks/List.d.ts","line":61,"code":"class SelectionSignal<T extends Block> extends ComponentSignal<ItemEvent<T>>","doc":"<p>Signal that is emitted when a list selection event occurs.</p>\n","isStatic":true,"extends":["UI.ComponentSignal"],"typeParams":["T extends Block"],"items":[],"inherits":["Async.Signal.create","Async.Signal.constructor","Async.Signal/catch","Async.Signal/data","Async.Signal/emit","Async.Signal/results","Async.Signal/then"]},{"id":"UI.List.with","name":"with","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/List.d.ts","line":7,"code":"static with: ComponentFactory.WithMethod<List.Initializer<Block>>;","doc":"<p>Create a component factory for this class.</p>\n","declType":"ComponentFactory.WithMethod<List.Initializer<Block>>"},{"id":"UI.List.constructor","name":"new List","hasParams":true,"isCtor":true,"file":"dist/core/typings/UI/Components/Blocks/List.d.ts","line":11,"code":"constructor(items?: Array<BlockT | undefined>);","doc":"<p>Create a list component with given items.</p>\n"},{"id":"UI.List/appendChild","name":"appendChild","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Blocks/List.d.ts","line":28,"code":"appendChild(block?: BlockT): this;","doc":"<p>Append a block to this list.</p>\n","declType":"this"},{"id":"UI.List/deselectAll","name":"deselectAll","hasParams":false,"isMethod":true,"file":"dist/core/typings/UI/Components/Blocks/List.d.ts","line":24,"code":"deselectAll(): void;","doc":"<p>Deselect all items currently in this list.</p>\n","declType":"void"},{"id":"UI.List/divider","name":"divider","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/List.d.ts","line":20,"code":"divider: Divider.Initializer;","doc":"<p>Set to an initializer spec for the Divider component to insert a divider between each element (observed).</p>\n","declType":"Divider.Initializer"},{"id":"UI.List/getChildren","name":"getChildren","hasParams":false,"isMethod":true,"file":"dist/core/typings/UI/Components/Blocks/List.d.ts","line":30,"code":"getChildren(): Component[];","doc":"<p>Returns an array of directly contained components (observable).</p>\n","declType":"Component[]"},{"id":"UI.List/getFormValues","name":"getFormValues","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Blocks/List.d.ts","line":32,"code":"getFormValues(result?: any): any;","doc":"<p>Returns an object containing all current values of input elements (observable).</p>\n"},{"id":"UI.List/initializeWith","name":"initializeWith","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/List.d.ts","line":9,"code":"initializeWith: ComponentFactory.InitializeWithMethod<List.Initializer<BlockT>>;","doc":"<p>Initialize this component with given properties; returns this.</p>\n","declType":"ComponentFactory.InitializeWithMethod<List.Initializer<BlockT>>"},{"id":"UI.List/items","name":"items","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/List.d.ts","line":15,"code":"items: Array<BlockT | undefined>;","doc":"<p>List content (observed).</p>\n","declType":"Array<BlockT | undefined>"},{"id":"UI.List/name","name":"name","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/List.d.ts","line":22,"code":"name: string;","doc":"<p>Set to a string value to have getFormValues add an ObservableArray with form values of list items.</p>\n","declType":"string"},{"id":"UI.List/selectItem","name":"selectItem","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Blocks/List.d.ts","line":26,"code":"selectItem(item: BlockT | undefined): void;","doc":"<p>Select given item (block), and immediately deselect others if <code>.selectionMode</code> is <code>ItemClick</code> or <code>ItemFocus</code>; does <em>not</em> check if the item is included in <code>.items</code> at all for performance reasons.</p>\n","declType":"void"},{"id":"UI.List/selectedIndex","name":"selectedIndex","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/List.d.ts","line":17,"code":"selectedIndex: number;","doc":"<p>Current (last) selected item index (base 0), or -1 if no item is selected (observed).</p>\n","declType":"number"},{"id":"UI.List/setFormValues","name":"setFormValues","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Blocks/List.d.ts","line":34,"code":"setFormValues(values: any): void;","doc":"<p>Set all input values by element name.</p>\n","declType":"void"},{"id":"UI.List/beforeFirstRender","name":"beforeFirstRender","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Blocks/List.d.ts","line":13,"code":"protected beforeFirstRender(renderer: ComponentRenderer<this, any>): void;","doc":"<p>Method that is called immediately after the renderer for this list is constructed; adds observers for item selection.</p>\n","isProtected":true,"declType":"void"},{"id":"UI.List/SelectionChange","name":"SelectionChange","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Blocks/List.d.ts","line":36,"code":"readonly SelectionChange: ComponentSignal.Emittable<List.ItemEvent<any>>;","doc":"<p>Signal emitted when the list selection changes, while displayed on screen.</p>\n","declType":"ComponentSignal.Emittable<List.ItemEvent<any>>","isSignal":true}],"isNamespace":true,"inherits":["UI.Component.addStyleOverride","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Component/contains","UI.Component/displayOptions","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Component/hoverState","UI.Component/id","UI.Component/initialize","UI.Component/out","UI.Block/overlayPosition","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/shadowEffect","UI.Component/style","UI.Component/uid","UI.Component/width","UI.Component/createComponentSignal","UI.Component/Renderer","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed"]},{"id":"UI.ListSelectionHandler","name":"ListSelectionHandler","isClass":true,"file":"dist/core/typings/UI/Components/Blocks/List.d.ts","line":65,"code":"class ListSelectionHandler<T extends Block> extends ComponentSignalHandler<List.ItemEvent<T>>","doc":"<p>Constructor for a list selection event handler.</p>\n","extends":["UI.ComponentSignalHandler"],"typeParams":["T extends Block"],"items":[],"inherits":["UI.ComponentSignalHandler.-call","UI.ComponentSignalHandler/connectTo","UI.ComponentSignalHandler/isEventHandler"]},{"id":"UI.Menu","name":"Menu","isNamespace":true,"file":"dist/core/typings/UI/Menu.d.ts","line":0,"code":"namespace Menu","doc":"<p>Contains methods for displaying dropdown menus and context menus.</p>\n","items":[{"id":"UI.Menu.Option","name":"Option","isInterface":true,"file":"dist/core/typings/UI/Menu.d.ts","line":8,"code":"interface Option","doc":"<p>Represents a context/dropdown menu option or divider.</p>\n","isStatic":true,"items":[{"id":"UI.Menu.Option/disabled","name":"disabled","isProperty":true,"file":"dist/core/typings/UI/Menu.d.ts","line":18,"code":"disabled?: boolean;","doc":"<p>Set to true to disable this menu item.</p>\n","declType":"boolean"},{"id":"UI.Menu.Option/divider","name":"divider","isProperty":true,"file":"dist/core/typings/UI/Menu.d.ts","line":20,"code":"divider?: boolean;","doc":"<p>Set to true (and leave other properties out) to display a divider instead of a menu option in this position.</p>\n","declType":"boolean"},{"id":"UI.Menu.Option/icon","name":"icon","isProperty":true,"file":"dist/core/typings/UI/Menu.d.ts","line":14,"code":"icon?: string;","doc":"<p>Menu item icon.</p>\n","declType":"string"},{"id":"UI.Menu.Option/key","name":"key","isProperty":true,"file":"dist/core/typings/UI/Menu.d.ts","line":10,"code":"key?: string;","doc":"<p>Optional key (string) used as an identifier.</p>\n","declType":"string"},{"id":"UI.Menu.Option/label","name":"label","isProperty":true,"file":"dist/core/typings/UI/Menu.d.ts","line":12,"code":"label?: string | TextLabelFactory;","doc":"<p>Menu item label text.</p>\n","declType":"string | TextLabelFactory"},{"id":"UI.Menu.Option/sideIcon","name":"sideIcon","isProperty":true,"file":"dist/core/typings/UI/Menu.d.ts","line":16,"code":"sideIcon?: string;","doc":"<p>Menu item icon displayed on the far side, next to where a sub menu would open.</p>\n","declType":"string"},{"id":"UI.Menu.Option/subMenu","name":"subMenu","isProperty":true,"file":"dist/core/typings/UI/Menu.d.ts","line":22,"code":"subMenu?: Option[];","doc":"<p>Sub menu options, displayed when this item is selected/focused.</p>\n","declType":"Option[]"}]},{"id":"UI.Menu.dismiss","name":"dismiss","hasParams":false,"isStatic":true,"isMethod":true,"file":"dist/core/typings/UI/Menu.d.ts","line":6,"code":"function dismiss(): void;","doc":"<p>Dismiss the menu currently on screen, if any.</p>\n","declType":"void"},{"id":"UI.Menu.displayContextMenu","name":"displayContextMenu","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/core/typings/UI/Menu.d.ts","line":2,"code":"function displayContextMenu(options: Menu.Option[], event: PointerEvent): PromiseLike<string | number>;","doc":"<p>Display a modal context menu; returns a Promise that resolves to the index(base 1)/key of the selected menu item, or is rejected if the user cancels the context menu.</p>\n","declType":"PromiseLike<string | number>","isAsync":true},{"id":"UI.Menu.displayDropdown","name":"displayDropdown","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/core/typings/UI/Menu.d.ts","line":4,"code":"function displayDropdown(options: Menu.Option[], component: Component): PromiseLike<string | number>;","doc":"<p>Display a modal dropdown menu below the given component (or above, depending on available screen space); returns a Promise that resolves to the index(base 1)/key of the selected menu item, or is rejected if the user cancels the context menu.</p>\n","declType":"PromiseLike<string | number>","isAsync":true}]},{"id":"UI.NavList","name":"NavList","isClass":true,"file":"dist/core/typings/UI/Components/Blocks/NavList.d.ts","line":6,"code":"class NavList extends Block","doc":"<p>Represents a list of tabs or links.</p>\n","extends":["UI.Block"],"items":[{"id":"UI.NavList.Activation","name":"Activation","isClass":true,"file":"dist/core/typings/UI/Components/Blocks/NavList.d.ts","line":43,"code":"class Activation","doc":"<p>Contains injectable methods for activating targets and querying activation state; instantiated by <code>NavList</code>.</p>\n","isStatic":true,"items":[{"id":"UI.NavList.Activation/activate","name":"activate","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Blocks/NavList.d.ts","line":45,"code":"activate(target: any): void;","doc":"<p>Injectable method to activate given target (e.g. URL, or Activity instance or class); default ony handles URLs, <code>Application</code> instance injects more functionality here.</p>\n","declType":"void"},{"id":"UI.NavList.Activation/isActive","name":"isActive","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Blocks/NavList.d.ts","line":47,"code":"isActive(target: any): boolean;","doc":"<p>Injectable method that returns true (observable) if and when given target matches the current target, i.e. URL/path matches, or activity/class matches current activity or one of its parent activities; this method is called from within an observable context to be able to observe changes to target states.</p>\n","declType":"boolean"}]},{"id":"UI.NavList.Initializer","name":"Initializer","isInterface":true,"file":"dist/core/typings/UI/Components/Blocks/NavList.d.ts","line":74,"code":"interface Initializer extends Block.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["UI.Block.Initializer"],"items":[{"id":"UI.NavList.Initializer/NavChange","name":"NavChange","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/NavList.d.ts","line":86,"code":"NavChange?: string | NavListSelectionHandler;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | NavListSelectionHandler"},{"id":"UI.NavList.Initializer/activate","name":"activate","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/NavList.d.ts","line":80,"code":"activate?: number | string;","doc":"<p>Initializer: activate item automatically, by index or key.</p>\n","declType":"number | string"},{"id":"UI.NavList.Initializer/justified","name":"justified","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/NavList.d.ts","line":84,"code":"justified?: UIValueOrAsync<boolean>;","doc":"<p>Property initializer: true to fill all horizontal space.</p>\n","declType":"UIValueOrAsync<boolean>"},{"id":"UI.NavList.Initializer/navItems","name":"navItems","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/NavList.d.ts","line":76,"code":"navItems?: UIValueOrAsync<NavList.NavItem[]>;","doc":"<p>Property initializer: navlist items.</p>\n","declType":"UIValueOrAsync<NavList.NavItem[]>"},{"id":"UI.NavList.Initializer/selectedIndex","name":"selectedIndex","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/NavList.d.ts","line":78,"code":"selectedIndex?: UIValueOrAsync<number>;","doc":"<p>Property initializer: initial item index.</p>\n","declType":"UIValueOrAsync<number>"},{"id":"UI.NavList.Initializer/type","name":"type","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/NavList.d.ts","line":82,"code":"type?: UIValueOrAsync<NavList.Type>;","doc":"<p>Property initializer: nav display type.</p>\n","declType":"UIValueOrAsync<NavList.Type>"}],"inherits":["UI.Component.Initializer/ArrowDownKeyPressed","UI.Component.Initializer/ArrowLeftKeyPressed","UI.Component.Initializer/ArrowRightKeyPressed","UI.Component.Initializer/ArrowUpKeyPressed","UI.Component.Initializer/BackspaceKeyPressed","UI.Component.Initializer/Blur","UI.Component.Initializer/Click","UI.Component.Initializer/Clicked","UI.Component.Initializer/DeleteKeyPressed","UI.Component.Initializer/DoubleClick","UI.Component.Initializer/DoubleClicked","UI.Component.Initializer/DragDrop","UI.Component.Initializer/DragEnter","UI.Component.Initializer/DragLeave","UI.Component.Initializer/DragStart","UI.Component.Initializer/EnterKeyPressed","UI.Component.Initializer/EscapeKeyPressed","UI.Component.Initializer/Focus","UI.Component.Initializer/FocusGained","UI.Component.Initializer/FocusLost","UI.Component.Initializer/KeyDown","UI.Component.Initializer/KeyPress","UI.Component.Initializer/MouseContextMenu","UI.Component.Initializer/MouseEnter","UI.Component.Initializer/MouseLeave","UI.Component.Initializer/Press","UI.Component.Initializer/Pressed","UI.Component.Initializer/Rendered","UI.Component.Initializer/SpaceBarPressed","UI.Component.Initializer/animations","UI.Block.Initializer/displayOptions","UI.Component.Initializer/focusMode","UI.Component.Initializer/hasFocus","UI.Component.Initializer/height","UI.Component.Initializer/hidden","UI.Component.Initializer/id","UI.Block.Initializer/overlayPosition","UI.Component.Initializer/renderOptions","UI.Component.Initializer/selected","UI.Component.Initializer/selectionMode","UI.Component.Initializer/shadowEffect","UI.Component.Initializer/shadowEffectOnFocus","UI.Component.Initializer/shadowEffectOnHover","UI.Component.Initializer/style","UI.Component.Initializer/width"]},{"id":"UI.NavList.NavItem","name":"NavItem","isInterface":true,"file":"dist/core/typings/UI/Components/Blocks/NavList.d.ts","line":50,"code":"interface NavItem","doc":"<p>Represents an item in a navigation list (tab or link).</p>\n","isStatic":true,"items":[{"id":"UI.NavList.NavItem/badge","name":"badge","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/NavList.d.ts","line":56,"code":"badge?: string;","doc":"<p>Badge text</p>\n","declType":"string"},{"id":"UI.NavList.NavItem/container","name":"container","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/NavList.d.ts","line":60,"code":"container?: Container | ComponentFactory<Container>;","doc":"<p>Container to be displayed below tabs/links when this item is selected.</p>\n","declType":"Container | ComponentFactory<Container>"},{"id":"UI.NavList.NavItem/icon","name":"icon","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/NavList.d.ts","line":54,"code":"icon?: string;","doc":"<p>Icon (see <code>Label</code> component).</p>\n","declType":"string"},{"id":"UI.NavList.NavItem/key","name":"key","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/NavList.d.ts","line":58,"code":"key?: string;","doc":"<p>Key (identifier string) of the item, used to populate <code>NavList/selectedKey</code>.</p>\n","declType":"string"},{"id":"UI.NavList.NavItem/label","name":"label","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/NavList.d.ts","line":52,"code":"label?: string | TextLabelFactory;","doc":"<p>Text label</p>\n","declType":"string | TextLabelFactory"},{"id":"UI.NavList.NavItem/target","name":"target","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/NavList.d.ts","line":62,"code":"target?: any;","doc":"<p>URL/path string, or (App module) <code>Activity</code> instance or <code>Activity</code> class that will be activated when this item is selected; also, the item will be automatically selected if/when its target is active (i.e. URL/path matches, or activity/class matches current activity or one of its parent activities).</p>\n"}]},{"id":"UI.NavList.SelectionEvent","name":"SelectionEvent","isInterface":true,"file":"dist/core/typings/UI/Components/Blocks/NavList.d.ts","line":89,"code":"interface SelectionEvent","doc":"<p>Data that is emitted when a navlist’s selection changes.</p>\n","isStatic":true,"items":[{"id":"UI.NavList.SelectionEvent/container","name":"container","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/NavList.d.ts","line":95,"code":"container?: Container;","doc":"<p>The container to be displayed, if any.</p>\n","declType":"Container"},{"id":"UI.NavList.SelectionEvent/index","name":"index","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/NavList.d.ts","line":91,"code":"index: number;","doc":"<p>The new selection index.</p>\n","declType":"number"},{"id":"UI.NavList.SelectionEvent/key","name":"key","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/NavList.d.ts","line":93,"code":"key?: string;","doc":"<p>The new selection key, if any.</p>\n","declType":"string"}]},{"id":"UI.NavList.SelectionSignal","name":"SelectionSignal","isClass":true,"file":"dist/core/typings/UI/Components/Blocks/NavList.d.ts","line":98,"code":"class SelectionSignal extends ComponentSignal<SelectionEvent>","doc":"<p>Signal that is emitted when a navlist’s selection changes.</p>\n","isStatic":true,"extends":["UI.ComponentSignal"],"items":[],"inherits":["Async.Signal.create","Async.Signal.constructor","Async.Signal/catch","Async.Signal/data","Async.Signal/emit","Async.Signal/results","Async.Signal/then"]},{"id":"UI.NavList.with","name":"with","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/NavList.d.ts","line":8,"code":"static with: ComponentFactory.WithMethodNoContent<NavList.Initializer>;","doc":"<p>Create a component factory for this class.</p>\n","declType":"ComponentFactory.WithMethodNoContent<NavList.Initializer>"},{"id":"UI.NavList.Type","name":"Type","isEnum":true,"file":"dist/core/typings/UI/Components/Blocks/NavList.d.ts","line":65,"code":"enum Type","doc":"<p>NavList display type.</p>\n","isStatic":true,"items":[{"id":"UI.NavList.Type.Pills","name":"Pills","isStatic":true,"isConst":true,"file":"dist/core/typings/UI/Components/Blocks/NavList.d.ts","line":69,"code":"enum Type { ...Pills }","doc":"<p>Display as a row of pills.</p>\n"},{"id":"UI.NavList.Type.StackedPills","name":"StackedPills","isStatic":true,"isConst":true,"file":"dist/core/typings/UI/Components/Blocks/NavList.d.ts","line":71,"code":"enum Type { ...StackedPills }","doc":"<p>Display as a list of pills.</p>\n"},{"id":"UI.NavList.Type.Tabs","name":"Tabs","isStatic":true,"isConst":true,"file":"dist/core/typings/UI/Components/Blocks/NavList.d.ts","line":67,"code":"enum Type { ...Tabs }","doc":"<p>Display as a row of tabs.</p>\n"}]},{"id":"UI.NavList.constructor","name":"new NavList","hasParams":true,"isCtor":true,"file":"dist/core/typings/UI/Components/Blocks/NavList.d.ts","line":12,"code":"constructor(navItems?: NavList.NavItem[], type?: NavList.Type, selectedIndex?: number);","doc":"<p>Create a navigation list component.</p>\n"},{"id":"UI.NavList/activate","name":"activate","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Blocks/NavList.d.ts","line":29,"code":"activate(selection: number | string): this;","doc":"<p>Select nav item by index or key, display associated container if any, and/or start associated activity if any; returns this.</p>\n","declType":"this"},{"id":"UI.NavList/getChildren","name":"getChildren","hasParams":false,"isMethod":true,"file":"dist/core/typings/UI/Components/Blocks/NavList.d.ts","line":31,"code":"getChildren(): Component[];","doc":"<p>Returns an array of directly contained components (observable).</p>\n","declType":"Component[]"},{"id":"UI.NavList/initializeWith","name":"initializeWith","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/NavList.d.ts","line":10,"code":"initializeWith: ComponentFactory.InitializeWithMethod<NavList.Initializer>;","doc":"<p>Initialize this component with given properties; returns this.</p>\n","declType":"ComponentFactory.InitializeWithMethod<NavList.Initializer>"},{"id":"UI.NavList/justified","name":"justified","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/NavList.d.ts","line":27,"code":"justified: boolean;","doc":"<p>Set to true to fill all horizontal space.</p>\n","declType":"boolean"},{"id":"UI.NavList/navItems","name":"navItems","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/NavList.d.ts","line":16,"code":"navItems: NavList.NavItem[];","doc":"<p>Nav labels, icons, and badges (observed).</p>\n","declType":"NavList.NavItem[]"},{"id":"UI.NavList/remGutter","name":"remGutter","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/NavList.d.ts","line":18,"code":"remGutter: number;","doc":"<p>Space reserved for icons (rem units), if &gt; 0 (observed).</p>\n","declType":"number"},{"id":"UI.NavList/selectedIndex","name":"selectedIndex","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/NavList.d.ts","line":20,"code":"selectedIndex: number;","doc":"<p>Index of selected nav item (base 0), or -1 if no selection (observed); does not automatically activate nav item targets; to do so, use the <code>.activate(...)</code> function instead.</p>\n","declType":"number"},{"id":"UI.NavList/selectedKey","name":"selectedKey","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Blocks/NavList.d.ts","line":23,"code":"readonly selectedKey: string | undefined;","doc":"<p>Key (string value) of selected item, if any (read-only, observable).</p>\n","declType":"string | undefined"},{"id":"UI.NavList/type","name":"type","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/NavList.d.ts","line":25,"code":"type: NavList.Type;","doc":"<p>Type of nav: tabs or pills, inline or stacked; default tabs (observed).</p>\n","declType":"NavList.Type"},{"id":"UI.NavList/beforeFirstRender","name":"beforeFirstRender","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Blocks/NavList.d.ts","line":14,"code":"protected beforeFirstRender(renderer: ComponentRenderer<this, any>): void;","doc":"<p>Method that is called immediately after the renderer for this component is constructed; adds observers for nav item selection.</p>\n","isProtected":true,"declType":"void"},{"id":"UI.NavList/NavChange","name":"NavChange","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Blocks/NavList.d.ts","line":33,"code":"readonly NavChange: ComponentSignal.Emittable<NavList.SelectionEvent>;","doc":"<p>Signal emitted when the selected nav item changes, while displayed on screen.</p>\n","declType":"ComponentSignal.Emittable<NavList.SelectionEvent>","isSignal":true}],"isNamespace":true,"inherits":["UI.Component.addStyleOverride","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Component/appendChild","UI.Component/contains","UI.Component/displayOptions","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Component/hoverState","UI.Component/id","UI.Component/initialize","UI.Component/out","UI.Block/overlayPosition","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/setFormValues","UI.Component/shadowEffect","UI.Component/style","UI.Component/uid","UI.Component/width","UI.Component/Renderer","UI.Component/createComponentSignal","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed"]},{"id":"UI.NavListSelectionHandler","name":"NavListSelectionHandler","isClass":true,"file":"dist/core/typings/UI/Components/Blocks/NavList.d.ts","line":102,"code":"class NavListSelectionHandler extends ComponentSignalHandler<NavList.SelectionEvent>","doc":"<p>Constructor for a navlist selection event handler.</p>\n","extends":["UI.ComponentSignalHandler"],"items":[],"inherits":["UI.ComponentSignalHandler.-call","UI.ComponentSignalHandler/connectTo","UI.ComponentSignalHandler/isEventHandler"]},{"id":"UI.OppositeDrawerContainer","name":"OppositeDrawerContainer","isClass":true,"file":"dist/core/typings/UI/Components/Containers/DrawerContainer.d.ts","line":11,"code":"class OppositeDrawerContainer extends DrawerContainer","doc":"<p>Represents a modal container displayed on the right hand side of the screen (i.e. DrawerContainer with different alignment and animations).</p>\n","extends":["UI.DrawerContainer"],"items":[{"id":"UI.OppositeDrawerContainer.APPEAR_ANIMATION","name":"APPEAR_ANIMATION","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Components/Containers/DrawerContainer.d.ts","line":15,"code":"static APPEAR_ANIMATION?: Animation;","doc":"<p>Default “appear” animation, added to every new <code>OppositeDrawerContainer</code> instance by the constructor.</p>\n","declType":"Animation"},{"id":"UI.OppositeDrawerContainer.DISAPPEAR_ANIMATION","name":"DISAPPEAR_ANIMATION","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Components/Containers/DrawerContainer.d.ts","line":17,"code":"static DISAPPEAR_ANIMATION?: Animation;","doc":"<p>Default “disappear” animation, added to every new <code>OppositeDrawerContainer</code> instance by the constructor.</p>\n","declType":"Animation"},{"id":"UI.OppositeDrawerContainer.constructor","name":"new OppositeDrawerContainer","hasParams":true,"isCtor":true,"file":"dist/core/typings/UI/Components/Containers/DrawerContainer.d.ts","line":13,"code":"constructor(content?: Block[], width?: string);","doc":"<p>Create a drawer component with given content, if any.</p>\n"}],"inherits":["UI.Component.addStyleOverride","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Container/appendChild","UI.DialogContainer/close","UI.Component/contains","UI.Container/content","UI.DialogContainer/displayOptions","UI.Component/flowDirection","UI.Component/focusMode","UI.DialogContainer/footer","UI.Component/getActualDimensions","UI.DialogContainer/getChildren","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Container/hasEmptyList","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.DialogContainer/header","UI.Component/height","UI.Component/hidden","UI.Container/horzAlign","UI.Component/hoverState","UI.Component/id","UI.Component/initialize","UI.DialogContainer/initializeWith","UI.Container/maxContentWidth","UI.DialogContainer/openAsync","UI.Component/out","UI.Component/render","UI.Component/renderOptions","UI.Container/scrollBottomThreshold","UI.Container/scrollTopThreshold","UI.Container/scrollable","UI.Container/scrolledToBottom","UI.Container/scrolledToLeft","UI.Container/scrolledToRight","UI.Container/scrolledToTop","UI.Component/selected","UI.Component/selectionMode","UI.DialogContainer/setDragHandle","UI.Component/setFormValues","UI.Component/shadowEffect","UI.Component/style","UI.Component/uid","UI.Container/vertAlign","UI.Component/width","UI.Component/Renderer","UI.Component/beforeFirstRender","UI.Component/createComponentSignal","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.DialogContainer/Closed","UI.DialogContainer/Closing","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.DialogContainer/Opening","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Container/ScrolledDown","UI.Container/ScrolledUp","UI.Component/SpaceBarPressed"]},{"id":"UI.OppositeRow","name":"OppositeRow","isClass":true,"file":"dist/core/typings/UI/Components/Blocks/Row.d.ts","line":40,"code":"class OppositeRow extends Row","doc":"<p>A row element with components aligned to the opposite side (“end” alignment, i.e. right-aligned for left-to-right languages).</p>\n","extends":["UI.Row"],"items":[{"id":"UI.OppositeRow/horzAlign","name":"horzAlign","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Row.d.ts","line":42,"code":"horzAlign?: \"start\" | \"end\" | \"left\" | \"center\" | \"right\";","doc":"<p>Horizontal positioning of content within the outer boundaries of the row (observed), set to “end” for <code>OppositeRow</code> instances.</p>\n","declType":"\"start\" | \"end\" | \"left\" | \"center\" | \"right\""}],"inherits":["UI.Component.addStyleOverride","UI.Row.constructor","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Row/appendChild","UI.Component/contains","UI.Row/content","UI.Component/displayOptions","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Row/getChildren","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Component/hoverState","UI.Component/id","UI.Component/initialize","UI.Row/initializeWith","UI.Component/out","UI.Block/overlayPosition","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/setFormValues","UI.Component/shadowEffect","UI.Row/spacing","UI.Component/style","UI.Component/uid","UI.Row/verticalSpacing","UI.Component/width","UI.Component/Renderer","UI.Component/createComponentSignal","UI.Component/beforeFirstRender","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed"]},{"id":"UI.Page","name":"Page","isClass":true,"file":"dist/core/typings/UI/Page.d.ts","line":1,"code":"class Page","doc":"<p>Represents a page to be displayed on screen.</p>\n","items":[{"id":"UI.Page.DisplayOptions","name":"DisplayOptions","isInterface":true,"file":"dist/core/typings/UI/Page.d.ts","line":53,"code":"interface DisplayOptions","doc":"<p>Options to be set on the <code>.displayOptions</code> object property of a component, if any, to define its positioning and behavior when displayed directly on a page.</p>\n","isStatic":true,"items":[{"id":"UI.Page.DisplayOptions/alignMargin","name":"alignMargin","isProperty":true,"file":"dist/core/typings/UI/Page.d.ts","line":65,"code":"alignMargin?: string;","doc":"<p>Margin around the side(s) of this component that are aligned to the side(s) of the screen (CSS length value, defaults to 0).</p>\n","declType":"string"},{"id":"UI.Page.DisplayOptions/flowDirection","name":"flowDirection","isProperty":true,"file":"dist/core/typings/UI/Page.d.ts","line":69,"code":"flowDirection?: \"ltr\" | \"rtl\";","doc":"<p>Flow direction: <code>ltr</code> or <code>rtl</code>, defaults to <code>ltr</code> if not set.</p>\n","declType":"\"ltr\" | \"rtl\""},{"id":"UI.Page.DisplayOptions/modal","name":"modal","isProperty":true,"file":"dist/core/typings/UI/Page.d.ts","line":57,"code":"modal?: boolean;","doc":"<p>Set to true to float this component on top of previous components on the page, and block input to components below.</p>\n","declType":"boolean"},{"id":"UI.Page.DisplayOptions/modalHorzAlign","name":"modalHorzAlign","isProperty":true,"file":"dist/core/typings/UI/Page.d.ts","line":63,"code":"modalHorzAlign?: \"start\" | \"end\" | \"left\" | \"center\" | \"right\";","doc":"<p>Horizontal alignment of this component relative to the page; only relevant if <code>.modal</code> is also true.</p>\n","declType":"\"start\" | \"end\" | \"left\" | \"center\" | \"right\""},{"id":"UI.Page.DisplayOptions/modalVertAlign","name":"modalVertAlign","isProperty":true,"file":"dist/core/typings/UI/Page.d.ts","line":61,"code":"modalVertAlign?: \"top\" | \"middle\" | \"bottom\";","doc":"<p>Vertical alignment of this component relative to the page; only relevant if <code>.modal</code> is also true.</p>\n","declType":"\"top\" | \"middle\" | \"bottom\""},{"id":"UI.Page.DisplayOptions/onEsc","name":"onEsc","isProperty":true,"file":"dist/core/typings/UI/Page.d.ts","line":71,"code":"onEsc?: () => void;","doc":"<p>Callback invoked when the user clicks or touches outside of this component, presses a modal-close button, or presses the escape key.</p>\n","declType":"() => void"},{"id":"UI.Page.DisplayOptions/outerMargin","name":"outerMargin","isProperty":true,"file":"dist/core/typings/UI/Page.d.ts","line":67,"code":"outerMargin?: string;","doc":"<p>Margin around the side(s) of this component that are away from the side(s) of the screen (CSS length value, defaults to 0).</p>\n","declType":"string"},{"id":"UI.Page.DisplayOptions/shade","name":"shade","isProperty":true,"file":"dist/core/typings/UI/Page.d.ts","line":55,"code":"shade?: boolean;","doc":"<p>Set to true to add a backdrop behind this component.</p>\n","declType":"boolean"},{"id":"UI.Page.DisplayOptions/stayOnTop","name":"stayOnTop","isProperty":true,"file":"dist/core/typings/UI/Page.d.ts","line":59,"code":"stayOnTop?: boolean;","doc":"<p>Set to true to keep this component on top of all other components; only relevant if <code>.modal</code> is also true.</p>\n","declType":"boolean"}]},{"id":"UI.Page.getCurrentPage","name":"getCurrentPage","hasParams":false,"isStatic":true,"isMethod":true,"file":"dist/core/typings/UI/Page.d.ts","line":3,"code":"static getCurrentPage(): Page | undefined;","doc":"<p>Returns the page currently displayed on screen, if any (observable).</p>\n","declType":"Page | undefined"},{"id":"UI.Page.withContent","name":"withContent","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/core/typings/UI/Page.d.ts","line":5,"code":"static withContent(...componentClasses: Array<{ new (): Component; }>): { new (): Page; };","doc":"<p>Returns a new Page class with a constructor that creates instances of given component classes and appends them to the page content array.</p>\n","declType":"{\n        new (): Page;\n    }"},{"id":"UI.Page.constructor","name":"new Page","hasParams":true,"isCtor":true,"file":"dist/core/typings/UI/Page.d.ts","line":11,"code":"constructor(content?: Array<Component | undefined>);","doc":"<p>Create a page with given content, if any.</p>\n"},{"id":"UI.Page/contains","name":"contains","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Page.d.ts","line":27,"code":"contains(component: Component): boolean;","doc":"<p>Returns true if given component is a child component of this page or any of its child components (observable, but triggers re-evaluation upon every change in child [sub] components).</p>\n","declType":"boolean"},{"id":"UI.Page/content","name":"content","isProperty":true,"file":"dist/core/typings/UI/Page.d.ts","line":15,"code":"content: Array<Component | undefined>;","doc":"<p>Components that are displayed on this page, each component stacked on top of the previous one along the z-axis (observed).</p>\n","declType":"Array<Component | undefined>"},{"id":"UI.Page/disable","name":"disable","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Page.d.ts","line":37,"code":"disable(promise?: PromiseLike<any>): void;","doc":"<p>Block all input events on this page, until given promise is resolved, or until page is re-displayed.</p>\n","declType":"void"},{"id":"UI.Page/displayAsync","name":"displayAsync","hasParams":false,"isMethod":true,"file":"dist/core/typings/UI/Page.d.ts","line":33,"code":"displayAsync(): PromiseLike<void>;","doc":"<p>Display this page on screen; also re-enables the page if input was blocked; replaces the currently displaying page on screen, which is removed automatically, but the result may be an empty screen if this page has no content; always waits for <code>Screen.ready</code>; returns a promise that is fulfilled when the components on this page have been rendered.</p>\n","declType":"PromiseLike<void>","isAsync":true},{"id":"UI.Page/flowDirection","name":"flowDirection","isProperty":true,"file":"dist/core/typings/UI/Page.d.ts","line":47,"code":"flowDirection?: \"ltr\" | \"rtl\";","doc":"<p>Layout/text flow direction for switching between left-to-right and right-to-left languages.</p>\n","declType":"\"ltr\" | \"rtl\""},{"id":"UI.Page/getComponentById","name":"getComponentById","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Page.d.ts","line":17,"code":"getComponentById(id: string): Component | undefined;\ngetComponentById<C extends Component>(id: string, componentClass: typeof Component & { new (...p: any[]): C; }): C | undefined;","doc":"<p>[1]. Returns the nearest matching child element with given ID, if any (observable).</p>\n<p>[2]. Returns the nearest matching child element with given ID <em>and</em> that is an instance of given class, if any (observable).</p>\n","declType":"Component | undefined | C | undefined","count":2},{"id":"UI.Page/getComponentsByType","name":"getComponentsByType","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Page.d.ts","line":23,"code":"getComponentsByType<C extends Component>(componentClass: typeof Component & { new (...p: any[]): C; }): C[];","doc":"<p>Returns all (recursive) child elements that are an instance of given class (observable).</p>\n","typeParams":["C extends Component"],"declType":"C[]"},{"id":"UI.Page/handleEsc","name":"handleEsc","hasParams":false,"isMethod":true,"file":"dist/core/typings/UI/Page.d.ts","line":29,"code":"handleEsc(): boolean;","doc":"<p>Invoke the <code>onEsc</code> handler of the component closest to the foreground that defines it (usually a modal dialog container in the foreground); returns true if handler was called, otherwise does nothing and returns false.</p>\n","declType":"boolean"},{"id":"UI.Page/remove","name":"remove","hasParams":false,"isMethod":true,"file":"dist/core/typings/UI/Page.d.ts","line":35,"code":"remove(): this;","doc":"<p>Remove this page from the screen, if currently displayed; returns this.</p>\n","declType":"this"},{"id":"UI.Page/scrollTo","name":"scrollTo","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Page.d.ts","line":31,"code":"scrollTo(component: Component): void;","doc":"<p>Scroll the page and all parent components of given component, such that the entire component becomes visible.</p>\n","declType":"void"},{"id":"UI.Page/uid","name":"uid","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Page.d.ts","line":13,"code":"readonly uid: string;","doc":"<p>Globally unique page identifier.</p>\n","declType":"string"},{"id":"UI.Page/Displayed","name":"Displayed","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Page.d.ts","line":39,"code":"readonly Displayed: Signal.VoidEmittable;","doc":"<p>Signal that is emitted after this page is displayed on screen.</p>\n","declType":"Signal.VoidEmittable","isSignal":true},{"id":"UI.Page/KeyDown","name":"KeyDown","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Page.d.ts","line":45,"code":"readonly KeyDown: Signal.Emittable<KeyboardEvent>;","doc":"<p>Signal that is emitted when a key is being pressed on the keyboard, while this page is displayed in the foreground.</p>\n","declType":"Signal.Emittable<KeyboardEvent>","isSignal":true},{"id":"UI.Page/Removed","name":"Removed","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Page.d.ts","line":41,"code":"readonly Removed: Signal.VoidEmittable;","doc":"<p>Signal that is emitted after this page has been removed from the screen.</p>\n","declType":"Signal.VoidEmittable","isSignal":true},{"id":"UI.Page/Rendered","name":"Rendered","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Page.d.ts","line":43,"code":"readonly Rendered: Signal.VoidEmittable;","doc":"<p>Signal that is emitted after the content of this page has been (re-) rendered, e.g. when a component is added or removed (but not when one of the components itself is re-rendered due to changes in its own sub content, use the <code>Component#Rendered</code> signal for that).</p>\n","declType":"Signal.VoidEmittable","isSignal":true}],"isNamespace":true,"text":[{"content":"<p>Use this class to manage the contents of the screen manually (i.e. without <code>App.Activity</code> and/or <code>UI.Screen</code> methods).</p>\n<p>At any time, contents of only a <em>single</em> Page can be visible. Displaying a second page will immediately remove the current page’s content off the screen.</p>\n"},{"title":"Example","subHeading":true,"type":"example","displayResult":"button","content":"<pre><code class=\"language-typescript\">var docsPage = UI.Page.getCurrentPage()!;\nvar View = UI.Container.with(\n    {\n        style: { background: &quot;#ccc&quot; },\n        vertAlign: &quot;middle&quot;\n    },\n    UI.CenterRow.with(\n        UI.RoundButton.withIcon(&quot;fa-arrow-left&quot;,\n            new UI.ActionHandler(() =&gt; { docsPage.displayAsync() })),\n        UI.tl`Hello, world!`\n    )\n);\n\nvar p = new UI.Page();\np.content.push(new View());\n\nvar button = new UI.Button(&quot;Show page&quot;);\nbutton.Clicked.connect(() =&gt; {\n    p.displayAsync();\n});\n</code></pre>\n"}],"sourceIdx":26},{"id":"UI.Paragraph","name":"Paragraph","isClass":true,"file":"dist/core/typings/UI/Components/Controls/Label.d.ts","line":54,"code":"class Paragraph extends Label","doc":"<p>Paragraph control: a label that expands horizontally, with text that breaks automatically across lines, and added line spacing for enhanced readability.</p>\n","extends":["UI.Label"],"items":[{"id":"UI.Paragraph/shrinkwrap","name":"shrinkwrap","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Label.d.ts","line":56,"code":"shrinkwrap: boolean;","doc":"<p>Set to true to shrink horizontally (default false; observed).</p>\n","declType":"boolean"},{"id":"UI.Paragraph/wrapText","name":"wrapText","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Label.d.ts","line":58,"code":"wrapText: boolean;","doc":"<p>Automatically break text across lines (default true, observed).</p>\n","declType":"boolean"}],"inherits":["UI.Component.addStyleOverride","UI.Label.withText","UI.Label.constructor","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Component/appendChild","UI.Label/badge","UI.Component/contains","UI.Component/displayOptions","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Component/getChildren","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Component/hoverState","UI.Label/icon","UI.Component/id","UI.Component/initialize","UI.Label/initializeWith","UI.Component/out","UI.Label/remGutter","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/setFormValues","UI.Component/shadowEffect","UI.Component/style","UI.Label/text","UI.Label/textAfter","UI.Label/textBefore","UI.Label/tooltipText","UI.Component/uid","UI.ControlElement/width","UI.Component/Renderer","UI.Component/createComponentSignal","UI.Component/beforeFirstRender","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed"]},{"id":"UI.PointerEvent","name":"PointerEvent","isInterface":true,"file":"dist/core/typings/UI/Components/ComponentSignal.d.ts","line":46,"code":"interface PointerEvent","doc":"<p>Interface definition of a platform agnostic mouse/pointer event.</p>\n","items":[{"id":"UI.PointerEvent/altKey","name":"altKey","isProperty":true,"file":"dist/core/typings/UI/Components/ComponentSignal.d.ts","line":48,"code":"altKey?: boolean;","doc":"<p>True if <code>alt</code> key is held down.</p>\n","declType":"boolean"},{"id":"UI.PointerEvent/button","name":"button","isProperty":true,"file":"dist/core/typings/UI/Components/ComponentSignal.d.ts","line":56,"code":"button?: number;","doc":"<p>Mouse button affected: 0 = primary, 2 = secondary.</p>\n","declType":"number"},{"id":"UI.PointerEvent/clientX","name":"clientX","isProperty":true,"file":"dist/core/typings/UI/Components/ComponentSignal.d.ts","line":58,"code":"clientX?: number;","doc":"<p>Horizontal coordinate relative to the browser window.</p>\n","declType":"number"},{"id":"UI.PointerEvent/clientY","name":"clientY","isProperty":true,"file":"dist/core/typings/UI/Components/ComponentSignal.d.ts","line":60,"code":"clientY?: number;","doc":"<p>Vertical coordinate relative to the browser window.</p>\n","declType":"number"},{"id":"UI.PointerEvent/ctrlKey","name":"ctrlKey","isProperty":true,"file":"dist/core/typings/UI/Components/ComponentSignal.d.ts","line":50,"code":"ctrlKey?: boolean;","doc":"<p>True if <code>ctrl</code> key is held down.</p>\n","declType":"boolean"},{"id":"UI.PointerEvent/metaKey","name":"metaKey","isProperty":true,"file":"dist/core/typings/UI/Components/ComponentSignal.d.ts","line":52,"code":"metaKey?: boolean;","doc":"<p>True if <code>meta</code> key is held down.</p>\n","declType":"boolean"},{"id":"UI.PointerEvent/preventDefault","name":"preventDefault","isProperty":true,"file":"dist/core/typings/UI/Components/ComponentSignal.d.ts","line":62,"code":"preventDefault?: () => void;","doc":"<p>Stop the default action for this event from taking place.</p>\n","declType":"() => void"},{"id":"UI.PointerEvent/shiftKey","name":"shiftKey","isProperty":true,"file":"dist/core/typings/UI/Components/ComponentSignal.d.ts","line":54,"code":"shiftKey?: boolean;","doc":"<p>True if <code>shift</code> key is held down.</p>\n","declType":"boolean"}]},{"id":"UI.PointerEventSignal","name":"PointerEventSignal","isClass":true,"file":"dist/core/typings/UI/Components/ComponentSignal.d.ts","line":79,"code":"class PointerEventSignal extends ComponentSignal<PointerEvent>","doc":"<p>Signal that is emitted when a mouse/pointer event occurs.</p>\n","extends":["UI.ComponentSignal"],"items":[],"inherits":["Async.Signal.create","Async.Signal.constructor","Async.Signal/catch","Async.Signal/data","Async.Signal/emit","Async.Signal/results","Async.Signal/then"]},{"id":"UI.PointerHandler","name":"PointerHandler","isClass":true,"file":"dist/core/typings/UI/Components/ComponentSignal.d.ts","line":82,"code":"class PointerHandler extends ComponentSignalHandler<PointerEvent>","doc":"<p>Constructor for a mouse/pointer event handler.</p>\n","extends":["UI.ComponentSignalHandler"],"items":[],"inherits":["UI.ComponentSignalHandler.-call","UI.ComponentSignalHandler/connectTo","UI.ComponentSignalHandler/isEventHandler"]},{"id":"UI.PrimaryButton","name":"PrimaryButton","isClass":true,"file":"dist/core/typings/UI/Components/Controls/Button.d.ts","line":84,"code":"class PrimaryButton extends Button","doc":"<p>Primary button control (shortcut for setting <code>.primary</code> on regular <code>Button</code> class).</p>\n","extends":["UI.Button"],"items":[{"id":"UI.PrimaryButton/primary","name":"primary","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Button.d.ts","line":86,"code":"primary: boolean;","doc":"<p>No description</p>\n","declType":"boolean"}],"inherits":["UI.Component.addStyleOverride","UI.Button.withIcon","UI.Button.withLabel","UI.Button.constructor","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Component/appendChild","UI.Button/badge","UI.Component/contains","UI.Button/disabled","UI.Component/displayOptions","UI.Button/dropdown","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Component/getChildren","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Component/hoverState","UI.Button/icon","UI.Button/iconAfter","UI.Component/id","UI.Component/initialize","UI.Button/initializeWith","UI.Button/label","UI.Component/out","UI.Button/remGutter","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/setFormValues","UI.Component/shadowEffect","UI.Button/shrinkwrap","UI.Component/style","UI.Button/style_button","UI.Button/target","UI.Button/tooltipText","UI.Component/uid","UI.ControlElement/width","UI.ControlElement/wrapText","UI.Component/beforeFirstRender","UI.Component/createComponentSignal","UI.Component/Renderer","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Button/DropdownClicked","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed"]},{"id":"UI.ProgressBar","name":"ProgressBar","isClass":true,"file":"dist/core/typings/UI/Components/Controls/ProgressBar.d.ts","line":3,"code":"class ProgressBar extends ControlElement","doc":"<p>Represents a progress bar control (full width by default).</p>\n","extends":["UI.ControlElement"],"items":[{"id":"UI.ProgressBar.Initializer","name":"Initializer","isInterface":true,"file":"dist/core/typings/UI/Components/Controls/ProgressBar.d.ts","line":21,"code":"interface Initializer extends ControlElement.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["UI.ControlElement.Initializer"],"items":[{"id":"UI.ProgressBar.Initializer/progress","name":"progress","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/ProgressBar.d.ts","line":23,"code":"progress?: UIValueOrAsync<number>;","doc":"<p>Property initializer: progress value (0-1).</p>\n","declType":"UIValueOrAsync<number>"},{"id":"UI.ProgressBar.Initializer/style_bar","name":"style_bar","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/ProgressBar.d.ts","line":27,"code":"style_bar?: UIValueOrAsync<Style | Style.StyleSet>;","doc":"<p>Property initializer: inner bar element style.</p>\n","declType":"UIValueOrAsync<Style | Style.StyleSet>"},{"id":"UI.ProgressBar.Initializer/tooltipText","name":"tooltipText","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/ProgressBar.d.ts","line":25,"code":"tooltipText?: UIValueOrAsync<string | TextLabelFactory>;","doc":"<p>Property initializer: tooltip text.</p>\n","declType":"UIValueOrAsync<string | TextLabelFactory>"}],"inherits":["UI.Component.Initializer/ArrowDownKeyPressed","UI.Component.Initializer/ArrowLeftKeyPressed","UI.Component.Initializer/ArrowRightKeyPressed","UI.Component.Initializer/ArrowUpKeyPressed","UI.Component.Initializer/BackspaceKeyPressed","UI.Component.Initializer/Blur","UI.Component.Initializer/Click","UI.Component.Initializer/Clicked","UI.Component.Initializer/DeleteKeyPressed","UI.Component.Initializer/DoubleClick","UI.Component.Initializer/DoubleClicked","UI.Component.Initializer/DragDrop","UI.Component.Initializer/DragEnter","UI.Component.Initializer/DragLeave","UI.Component.Initializer/DragStart","UI.Component.Initializer/EnterKeyPressed","UI.Component.Initializer/EscapeKeyPressed","UI.Component.Initializer/Focus","UI.Component.Initializer/FocusGained","UI.Component.Initializer/FocusLost","UI.Component.Initializer/KeyDown","UI.Component.Initializer/KeyPress","UI.Component.Initializer/MouseContextMenu","UI.Component.Initializer/MouseEnter","UI.Component.Initializer/MouseLeave","UI.Component.Initializer/Press","UI.Component.Initializer/Pressed","UI.Component.Initializer/Rendered","UI.Component.Initializer/SpaceBarPressed","UI.Component.Initializer/animations","UI.Component.Initializer/focusMode","UI.ControlElement.Initializer/hasFocus","UI.Component.Initializer/height","UI.Component.Initializer/hidden","UI.Component.Initializer/id","UI.Component.Initializer/renderOptions","UI.Component.Initializer/selected","UI.Component.Initializer/selectionMode","UI.Component.Initializer/shadowEffect","UI.Component.Initializer/shadowEffectOnFocus","UI.Component.Initializer/shadowEffectOnHover","UI.ControlElement.Initializer/shrinkwrap","UI.Component.Initializer/style","UI.ControlElement.Initializer/width"]},{"id":"UI.ProgressBar.with","name":"with","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Components/Controls/ProgressBar.d.ts","line":5,"code":"static with: ComponentFactory.WithMethodNoContent<ProgressBar.Initializer>;","doc":"<p>Create a component factory for this class.</p>\n","declType":"ComponentFactory.WithMethodNoContent<ProgressBar.Initializer>"},{"id":"UI.ProgressBar.withProgress","name":"withProgress","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Controls/ProgressBar.d.ts","line":7,"code":"static withProgress<T extends typeof ProgressBar>(this: T, progress: UIValueOrAsync<number>): T & ComponentFactory<ProgressBar>;","doc":"<p>Initialize a progress bar control factory with given progress value (0-1).</p>\n","typeParams":["T extends typeof ProgressBar"],"declType":"T & ComponentFactory<ProgressBar>"},{"id":"UI.ProgressBar.constructor","name":"new ProgressBar","hasParams":true,"isCtor":true,"file":"dist/core/typings/UI/Components/Controls/ProgressBar.d.ts","line":11,"code":"constructor(progress?: number);","doc":"<p>Create a progress bar control element.</p>\n"},{"id":"UI.ProgressBar/initializeWith","name":"initializeWith","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/ProgressBar.d.ts","line":9,"code":"initializeWith: ComponentFactory.InitializeWithMethod<ProgressBar.Initializer>;","doc":"<p>Initialize this component with given properties; returns this.</p>\n","declType":"ComponentFactory.InitializeWithMethod<ProgressBar.Initializer>"},{"id":"UI.ProgressBar/progress","name":"progress","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/ProgressBar.d.ts","line":13,"code":"progress: number;","doc":"<p>Current progress value, between 0 and 1, inclusive (observed).</p>\n","declType":"number"},{"id":"UI.ProgressBar/style_bar","name":"style_bar","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Controls/ProgressBar.d.ts","line":17,"code":"readonly style_bar: Style;","doc":"<p>Encapsulation of inner bar style (observed).</p>\n","declType":"Style"},{"id":"UI.ProgressBar/tooltipText","name":"tooltipText","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/ProgressBar.d.ts","line":15,"code":"tooltipText: string;","doc":"<p>Tooltip text (observed).</p>\n","declType":"string"}],"isNamespace":true,"inherits":["UI.Component.addStyleOverride","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Component/appendChild","UI.Component/contains","UI.Component/displayOptions","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Component/getChildren","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Component/hoverState","UI.Component/id","UI.Component/initialize","UI.Component/out","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/setFormValues","UI.Component/shadowEffect","UI.ControlElement/shrinkwrap","UI.Component/style","UI.Component/uid","UI.ControlElement/width","UI.ControlElement/wrapText","UI.Component/Renderer","UI.Component/createComponentSignal","UI.Component/beforeFirstRender","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed"]},{"id":"UI.RoundButton","name":"RoundButton","isClass":true,"file":"dist/core/typings/UI/Components/Controls/Button.d.ts","line":98,"code":"class RoundButton extends Button","doc":"<p>Round button control (e.g. with an icon).</p>\n","extends":["UI.Button"],"items":[],"inherits":["UI.Component.addStyleOverride","UI.Button.withIcon","UI.Button.withLabel","UI.Button.constructor","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Component/appendChild","UI.Button/badge","UI.Component/contains","UI.Button/disabled","UI.Component/displayOptions","UI.Button/dropdown","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Component/getChildren","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Component/hoverState","UI.Button/icon","UI.Button/iconAfter","UI.Component/id","UI.Component/initialize","UI.Button/initializeWith","UI.Button/label","UI.Component/out","UI.Button/primary","UI.Button/remGutter","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/setFormValues","UI.Component/shadowEffect","UI.Button/shrinkwrap","UI.Component/style","UI.Button/style_button","UI.Button/target","UI.Button/tooltipText","UI.Component/uid","UI.ControlElement/width","UI.ControlElement/wrapText","UI.Component/beforeFirstRender","UI.Component/createComponentSignal","UI.Component/Renderer","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Button/DropdownClicked","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed"]},{"id":"UI.Row","name":"Row","isClass":true,"file":"dist/core/typings/UI/Components/Blocks/Row.d.ts","line":3,"code":"class Row extends Block","doc":"<p>Represents a row containing control elements placed horizontally.</p>\n","extends":["UI.Block"],"items":[{"id":"UI.Row.Initializer","name":"Initializer","isInterface":true,"file":"dist/core/typings/UI/Components/Blocks/Row.d.ts","line":25,"code":"interface Initializer extends Block.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["UI.Block.Initializer"],"items":[{"id":"UI.Row.Initializer/content","name":"content","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Row.d.ts","line":27,"code":"content?: ComponentFactory.SpecList;","doc":"<p>Property initializer: list of control elements.</p>\n","declType":"ComponentFactory.SpecList"},{"id":"UI.Row.Initializer/spacing","name":"spacing","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Row.d.ts","line":29,"code":"spacing?: UIValueOrAsync<string>;","doc":"<p>Property initializer: spacing around controls.</p>\n","declType":"UIValueOrAsync<string>"},{"id":"UI.Row.Initializer/verticalSpacing","name":"verticalSpacing","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Row.d.ts","line":31,"code":"verticalSpacing?: UIValueOrAsync<string>;","doc":"<p>Property initializer: vertical spacing above and below controls.</p>\n","declType":"UIValueOrAsync<string>"}],"inherits":["UI.Component.Initializer/ArrowDownKeyPressed","UI.Component.Initializer/ArrowLeftKeyPressed","UI.Component.Initializer/ArrowRightKeyPressed","UI.Component.Initializer/ArrowUpKeyPressed","UI.Component.Initializer/BackspaceKeyPressed","UI.Component.Initializer/Blur","UI.Component.Initializer/Click","UI.Component.Initializer/Clicked","UI.Component.Initializer/DeleteKeyPressed","UI.Component.Initializer/DoubleClick","UI.Component.Initializer/DoubleClicked","UI.Component.Initializer/DragDrop","UI.Component.Initializer/DragEnter","UI.Component.Initializer/DragLeave","UI.Component.Initializer/DragStart","UI.Component.Initializer/EnterKeyPressed","UI.Component.Initializer/EscapeKeyPressed","UI.Component.Initializer/Focus","UI.Component.Initializer/FocusGained","UI.Component.Initializer/FocusLost","UI.Component.Initializer/KeyDown","UI.Component.Initializer/KeyPress","UI.Component.Initializer/MouseContextMenu","UI.Component.Initializer/MouseEnter","UI.Component.Initializer/MouseLeave","UI.Component.Initializer/Press","UI.Component.Initializer/Pressed","UI.Component.Initializer/Rendered","UI.Component.Initializer/SpaceBarPressed","UI.Component.Initializer/animations","UI.Block.Initializer/displayOptions","UI.Component.Initializer/focusMode","UI.Component.Initializer/hasFocus","UI.Component.Initializer/height","UI.Component.Initializer/hidden","UI.Component.Initializer/id","UI.Block.Initializer/overlayPosition","UI.Component.Initializer/renderOptions","UI.Component.Initializer/selected","UI.Component.Initializer/selectionMode","UI.Component.Initializer/shadowEffect","UI.Component.Initializer/shadowEffectOnFocus","UI.Component.Initializer/shadowEffectOnHover","UI.Component.Initializer/style","UI.Component.Initializer/width"]},{"id":"UI.Row.with","name":"with","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Row.d.ts","line":5,"code":"static with: ComponentFactory.WithMethod<Row.Initializer>;","doc":"<p>Create a component factory for this class.</p>\n","declType":"ComponentFactory.WithMethod<Row.Initializer>"},{"id":"UI.Row.constructor","name":"new Row","hasParams":true,"isCtor":true,"file":"dist/core/typings/UI/Components/Blocks/Row.d.ts","line":9,"code":"constructor(content?: ControlElement[]);","doc":"<p>Create a row block with given content, if any.</p>\n"},{"id":"UI.Row/appendChild","name":"appendChild","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Blocks/Row.d.ts","line":19,"code":"appendChild(controlElement?: ControlElement): this;","doc":"<p>Append a control element to this row.</p>\n","declType":"this"},{"id":"UI.Row/content","name":"content","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Row.d.ts","line":11,"code":"content: Array<ControlElement | undefined>;","doc":"<p>Array of elements that go into this row (observed).</p>\n","declType":"Array<ControlElement | undefined>"},{"id":"UI.Row/getChildren","name":"getChildren","hasParams":false,"isMethod":true,"file":"dist/core/typings/UI/Components/Blocks/Row.d.ts","line":21,"code":"getChildren(): Component[];","doc":"<p>Returns an array of directly contained components (observable).</p>\n","declType":"Component[]"},{"id":"UI.Row/horzAlign","name":"horzAlign","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Row.d.ts","line":17,"code":"horzAlign?: \"start\" | \"end\" | \"left\" | \"center\" | \"right\";","doc":"<p>Horizontal positioning of content within the outer boundaries of the row (observed), defaults to “start” if not defined.</p>\n","declType":"\"start\" | \"end\" | \"left\" | \"center\" | \"right\""},{"id":"UI.Row/initializeWith","name":"initializeWith","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Row.d.ts","line":7,"code":"initializeWith: ComponentFactory.InitializeWithMethod<Row.Initializer>;","doc":"<p>Initialize this component with given properties; returns this.</p>\n","declType":"ComponentFactory.InitializeWithMethod<Row.Initializer>"},{"id":"UI.Row/spacing","name":"spacing","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Row.d.ts","line":13,"code":"spacing: string;","doc":"<p>Spacing between elements (CSS value, platform default used if empty, observed).</p>\n","declType":"string"},{"id":"UI.Row/verticalSpacing","name":"verticalSpacing","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Row.d.ts","line":15,"code":"verticalSpacing: string;","doc":"<p>Vertical spacing (margin) for this row (CSS value, value of <code>.spacing</code> used if empty, observed); not applicable if <code>.height</code> is set.</p>\n","declType":"string"}],"isNamespace":true,"text":[{"content":"<p>Within a row, you can place one or more <code>UI.ControlElement</code> components, i.e. controls, such as labels, buttons, and text fields. These are positioned in a single line horizontally within the row (from left to right – that is, if the current <code>culture</code> is configured for left-to-right flow). Space around and between elements is added automatically, using the <code>.spacing</code> and <code>.verticalSpacing</code> properties.</p>\n<p>Not all controls get the same width: you can adjust each control’s width so that it takes up more or less space within the containing row. Use these properties:</p>\n<ul>\n<li><a href=\"~/UI.ControlElement/width\"><code>.width</code></a>: set to a CSS length value such as <code>12rem</code>, <code>20px</code>, or <code>50%</code>, to specify a control’s width explicitly.</li>\n<li><a href=\"~/UI.ControlElement/shrinkwrap\"><code>.shrinkwrap</code></a>: set to <code>true</code> to have the control’s width <em>minimized</em> to the point where it fits its contents exactly (useful for a label or a button). Set to <code>false</code> to have the control take up as <em>much</em> space as it can within the row.</li>\n</ul>\n<p>By default, text fields are not ‘shrinkwrapped’ (except for <code>UI.WideLabel</code> and <code>UI.Paragraph</code>), whereas labels and buttons are. The special <code>UI.Spacer</code> component is a blank control that can be used to take up space between other elements.</p>\n<p>You can also place non-control components in a row, but these need to be wrapped in a <code>UI.ContainerControl</code> or <code>UI.BlockControl</code>. This is done automatically by a component factory if you pass containers or blocks into <a href=\"~/UI.Row.with\"><code>UI.Row.with(...)</code></a>. Multiple controls can be stacked vertically with the <code>UI.ControlStack</code> component.</p>\n"},{"title":"Examples","type":"example","collapse":"heading","displayResult":"rows","content":"<pre hidden>var rows = UI.Container.with(\n</pre>\n<pre><code class=\"language-typescript\">// 1. default: button shrinkwrapped, text field not\nUI.Row.with(\n    UI.tl`1.`, // &lt;== 'text label' shortcut function\n    UI.TextField.with({ placeholderText: &quot;Long input&quot; }),\n    UI.Button.withLabel(&quot;Button&quot;)\n),\nUI.Divider,\n\n// 2. you can un-shrink the button, too:\nUI.Row.with(\n    UI.tl`2.`,\n    UI.Button.with({ label: &quot;Long button&quot;, shrinkwrap: false })\n),\nUI.Divider,\n\n// 3. set widths for more precise control:\nUI.CenterRow.with(\n    UI.tl`3.`,\n    UI.CloseControlStack.with(\n        { horzAlign: &quot;right&quot;, width: &quot;4rem&quot; },\n        UI.tl`up`, UI.tl`down`\n    ),\n    UI.TextField.with({ width: &quot;4rem&quot;, shrinkwrap: true }),\n    UI.TextField.with({ width: &quot;4rem&quot;, shrinkwrap: true }),\n    UI.TextField.with({ width: &quot;4rem&quot;, shrinkwrap: true })\n),\nUI.Divider,\n\n// 4. set spacing:\nUI.Row.with(\n    { spacing: &quot;2rem&quot; },\n    UI.tl`4.`,\n    UI.Label.withText(&quot;More space&quot;),\n    UI.Paragraph.withText(&quot;Use a paragraph if you need text &quot; +\n        &quot;to flow across lines within a label. The paragraph &quot; +\n        &quot;component is not shrinkwrapped by default, so it &quot; +\n        &quot;expands to the available width within a row.&quot;)\n),\n\n// 5. set row height explicitly if needed:\nUI.Row.with(\n    { height: &quot;2rem&quot;, style: { background: &quot;#eee&quot; } },\n    UI.tl`5.`,\n    UI.Heading2.withText(&quot;Left&quot;),\n    UI.Spacer,\n    UI.Label.withText(&quot;Right&quot;)\n)\n</code></pre>\n<pre hidden>)</pre>\n"}],"sourceIdx":27,"inherits":["UI.Component.addStyleOverride","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Component/contains","UI.Component/displayOptions","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Component/hoverState","UI.Component/id","UI.Component/initialize","UI.Component/out","UI.Block/overlayPosition","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/setFormValues","UI.Component/shadowEffect","UI.Component/style","UI.Component/uid","UI.Component/width","UI.Component/Renderer","UI.Component/createComponentSignal","UI.Component/beforeFirstRender","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed"]},{"id":"UI.Screen","name":"Screen","isNamespace":true,"file":"dist/core/typings/UI/Screen.d.ts","line":1,"code":"namespace Screen","doc":"<p>Methods for managing the available (fixed) screen space in the application viewport.</p>\n","items":[{"id":"UI.Screen.Dimensions","name":"Dimensions","isInterface":true,"file":"dist/core/typings/UI/Screen.d.ts","line":17,"code":"interface Dimensions extends Async.ObservableObject","doc":"<p>Type definition for the <code>Screen.dimensions</code> observable object.</p>\n","isStatic":true,"extends":["Async.ObservableObject"],"items":[{"id":"UI.Screen.Dimensions/height","name":"height","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Screen.d.ts","line":21,"code":"readonly height: number;","doc":"<p>Number of logical pixels available on vertical axis (observable).</p>\n","declType":"number"},{"id":"UI.Screen.Dimensions/isExtraWide","name":"isExtraWide","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Screen.d.ts","line":31,"code":"readonly isExtraWide: boolean;","doc":"<p>True if viewport width is EXTRAWIDE_WIDTH or above; implies that .isWide is also true (observable).</p>\n","declType":"boolean"},{"id":"UI.Screen.Dimensions/isLandscape","name":"isLandscape","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Screen.d.ts","line":23,"code":"readonly isLandscape: boolean;","doc":"<p>True if the width of the viewport is greater than its height.</p>\n","declType":"boolean"},{"id":"UI.Screen.Dimensions/isNarrow","name":"isNarrow","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Screen.d.ts","line":25,"code":"readonly isNarrow: boolean;","doc":"<p>True if viewport width is less than NARROW_WIDTH; implies that .isSmall is also true (observable).</p>\n","declType":"boolean"},{"id":"UI.Screen.Dimensions/isSmall","name":"isSmall","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Screen.d.ts","line":27,"code":"readonly isSmall: boolean;","doc":"<p>True if viewport width is less than SMALL_WIDTH (observable).</p>\n","declType":"boolean"},{"id":"UI.Screen.Dimensions/isWide","name":"isWide","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Screen.d.ts","line":29,"code":"readonly isWide: boolean;","doc":"<p>True if viewport width is WIDE_WIDTH or above (observable).</p>\n","declType":"boolean"},{"id":"UI.Screen.Dimensions/width","name":"width","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Screen.d.ts","line":19,"code":"readonly width: number;","doc":"<p>Number of logical pixels available on horizontal axis (observable).</p>\n","declType":"number"}],"inherits":["Async.ObservableObject.constructor","Async.ObservableObject/addObservableProperty","Async.ObservableObject/hasObservableProperty","Async.ObservableObject/PropertyChange"]},{"id":"UI.Screen.EXTRAWIDE_WIDTH","name":"EXTRAWIDE_WIDTH","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Screen.d.ts","line":42,"code":"EXTRAWIDE_WIDTH: number","doc":"<p>“Extra wide” horizontal root width in logical pixels, default 1200.</p>\n","declType":"number"},{"id":"UI.Screen.NARROW_WIDTH","name":"NARROW_WIDTH","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Screen.d.ts","line":36,"code":"NARROW_WIDTH: number","doc":"<p>“Narrow” horizontal root width in logical pixels, default 550.</p>\n","declType":"number"},{"id":"UI.Screen.SMALL_WIDTH","name":"SMALL_WIDTH","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Screen.d.ts","line":38,"code":"SMALL_WIDTH: number","doc":"<p>“Small” horizontal root width in logical pixels, default 720.</p>\n","declType":"number"},{"id":"UI.Screen.WIDE_WIDTH","name":"WIDE_WIDTH","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Screen.d.ts","line":40,"code":"WIDE_WIDTH: number","doc":"<p>“Wide” horizontal root width in logical pixels, default 960.</p>\n","declType":"number"},{"id":"UI.Screen.defaultFlowDirection","name":"defaultFlowDirection","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Screen.d.ts","line":15,"code":"defaultFlowDirection: \"ltr\" | \"rtl\" | undefined","doc":"<p>Default flow direction for all pages upon rendering (if not overridden at page or component level); this value is set asynchronously by the <code>App</code> sub module when the current <code>App.CultureService</code> changes.</p>\n","declType":"\"ltr\" | \"rtl\" | undefined"},{"id":"UI.Screen.dimensions","name":"dimensions","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Screen.d.ts","line":17,"code":"dimensions: Dimensions & Async.ObservableObject","doc":"<p>Viewport dimensions (sealed observable object).</p>\n","declType":"Dimensions & Async.ObservableObject"},{"id":"UI.Screen.displayAsync","name":"displayAsync","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/core/typings/UI/Screen.d.ts","line":3,"code":"function displayAsync(view: Component | Page): PromiseLike<void>;","doc":"<p>Display given view in the foreground, replacing the current page or adding to it (or to a new blank page, if none was displayed); returns a promise that is fulfilled after the component is rendered.</p>\n","declType":"PromiseLike<void>","isAsync":true},{"id":"UI.Screen.isDisplayed","name":"isDisplayed","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/core/typings/UI/Screen.d.ts","line":5,"code":"function isDisplayed(view: Component | Page): boolean | undefined;","doc":"<p>Returns true if given Page is currently displayed, or given Component is displayed <em>directly</em> on the current page (i.e. not as a child component).</p>\n","declType":"boolean | undefined"},{"id":"UI.Screen.ready","name":"ready","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Screen.d.ts","line":13,"code":"ready: PromiseLike<true>","doc":"<p>Promise that resolves to true when ready to display the UI, after all static resources have been loaded.</p>\n","declType":"PromiseLike<true>","isAsync":true},{"id":"UI.Screen.remove","name":"remove","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/core/typings/UI/Screen.d.ts","line":7,"code":"function remove(view: Component): void;\nfunction remove(view: Page): void;","doc":"<p>[1]. Remove given component from the page (i.e. the page it was <em>last displayed</em> on using the <code>.display(...)</code> method).</p>\n<p>[2]. Remove given page from the screen, if it is currently displayed.</p>\n","declType":"void | void","count":2}]},{"id":"UI.SelectField","name":"SelectField","isClass":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/SelectField.d.ts","line":2,"code":"class SelectField extends InputControl","doc":"<p>Represents a native dropdown selection field control.</p>\n","extends":["UI.InputControl"],"items":[{"id":"UI.SelectField.Initializer","name":"Initializer","isInterface":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/SelectField.d.ts","line":29,"code":"interface Initializer extends InputControl.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["UI.InputControl.Initializer"],"items":[{"id":"UI.SelectField.Initializer/options","name":"options","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/SelectField.d.ts","line":31,"code":"options?: UIValueOrAsync<SelectField.Option[]>;","doc":"<p>Property initializer: options with text labels and (optional) values.</p>\n","declType":"UIValueOrAsync<SelectField.Option[]>"}],"inherits":["UI.Component.Initializer/ArrowDownKeyPressed","UI.Component.Initializer/ArrowLeftKeyPressed","UI.Component.Initializer/ArrowRightKeyPressed","UI.Component.Initializer/ArrowUpKeyPressed","UI.Component.Initializer/BackspaceKeyPressed","UI.Component.Initializer/Blur","UI.Component.Initializer/Click","UI.Component.Initializer/Clicked","UI.Component.Initializer/DeleteKeyPressed","UI.Component.Initializer/DoubleClick","UI.Component.Initializer/DoubleClicked","UI.Component.Initializer/DragDrop","UI.Component.Initializer/DragEnter","UI.Component.Initializer/DragLeave","UI.Component.Initializer/DragStart","UI.Component.Initializer/EnterKeyPressed","UI.Component.Initializer/EscapeKeyPressed","UI.Component.Initializer/Focus","UI.Component.Initializer/FocusGained","UI.Component.Initializer/FocusLost","UI.Component.Initializer/KeyDown","UI.Component.Initializer/KeyPress","UI.Component.Initializer/MouseContextMenu","UI.Component.Initializer/MouseEnter","UI.Component.Initializer/MouseLeave","UI.Component.Initializer/Press","UI.Component.Initializer/Pressed","UI.Component.Initializer/Rendered","UI.Component.Initializer/SpaceBarPressed","UI.InputControl.Initializer/ValueChange","UI.InputControl.Initializer/ValueInput","UI.Component.Initializer/animations","UI.InputControl.Initializer/disabled","UI.Component.Initializer/focusMode","UI.ControlElement.Initializer/hasFocus","UI.Component.Initializer/height","UI.Component.Initializer/hidden","UI.Component.Initializer/id","UI.InputControl.Initializer/label","UI.InputControl.Initializer/name","UI.Component.Initializer/renderOptions","UI.Component.Initializer/selected","UI.Component.Initializer/selectionMode","UI.Component.Initializer/shadowEffect","UI.Component.Initializer/shadowEffectOnFocus","UI.Component.Initializer/shadowEffectOnHover","UI.ControlElement.Initializer/shrinkwrap","UI.Component.Initializer/style","UI.InputControl.Initializer/style_input","UI.InputControl.Initializer/style_label","UI.InputControl.Initializer/tooltipText","UI.InputControl.Initializer/value","UI.ControlElement.Initializer/width"]},{"id":"UI.SelectField.Option","name":"Option","isInterface":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/SelectField.d.ts","line":22,"code":"interface Option","doc":"<p>Represents a select field option.</p>\n","isStatic":true,"items":[{"id":"UI.SelectField.Option/text","name":"text","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/SelectField.d.ts","line":26,"code":"text: string | TextLabelFactory;","doc":"<p>Text label</p>\n","declType":"string | TextLabelFactory"},{"id":"UI.SelectField.Option/value","name":"value","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/SelectField.d.ts","line":24,"code":"value?: string;","doc":"<p>Selection value</p>\n","declType":"string"}]},{"id":"UI.SelectField.with","name":"with","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/SelectField.d.ts","line":4,"code":"static with: ComponentFactory.WithMethodNoContent<SelectField.Initializer>;","doc":"<p>Create a component factory for this class.</p>\n","declType":"ComponentFactory.WithMethodNoContent<SelectField.Initializer>"},{"id":"UI.SelectField.withOptions","name":"withOptions","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/SelectField.d.ts","line":6,"code":"static withOptions<T extends typeof SelectField>(this: T, name: string, label?: string | TextLabelFactory, options?: UIValueOrAsync<SelectField.Option[]>): T & ComponentFactory<SelectField>;","doc":"<p>Initialize a select field control factory with given name, label, and options.</p>\n","typeParams":["T extends typeof SelectField"],"declType":"T & ComponentFactory<SelectField>"},{"id":"UI.SelectField.constructor","name":"new SelectField","hasParams":true,"isCtor":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/SelectField.d.ts","line":10,"code":"constructor(name?: string, label?: string | TextLabelFactory, options?: SelectField.Option[]);","doc":"<p>Create a select field element.</p>\n"},{"id":"UI.SelectField/getFormValues","name":"getFormValues","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/SelectField.d.ts","line":16,"code":"getFormValues(result?: any): any;","doc":"<p>Returns an object containing all current values of input elements (observable).</p>\n"},{"id":"UI.SelectField/initializeWith","name":"initializeWith","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/SelectField.d.ts","line":8,"code":"initializeWith: ComponentFactory.InitializeWithMethod<SelectField.Initializer>;","doc":"<p>Initialize this component with given properties; returns this.</p>\n","declType":"ComponentFactory.InitializeWithMethod<SelectField.Initializer>"},{"id":"UI.SelectField/options","name":"options","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/SelectField.d.ts","line":12,"code":"options: Array<SelectField.Option | undefined>;","doc":"<p>List of options and their values (observed).</p>\n","declType":"Array<SelectField.Option | undefined>"},{"id":"UI.SelectField/setFormValues","name":"setFormValues","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/SelectField.d.ts","line":18,"code":"setFormValues(values: any): void;","doc":"<p>Sets all input values by element name.</p>\n","declType":"void"},{"id":"UI.SelectField/value","name":"value","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/SelectField.d.ts","line":14,"code":"value: string;","doc":"<p>Currently selected value (read/write observable).</p>\n","declType":"string"}],"isNamespace":true,"inherits":["UI.Component.addStyleOverride","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Component/appendChild","UI.Component/contains","UI.InputControl/disabled","UI.Component/displayOptions","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Component/getChildren","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Component/hoverState","UI.Component/id","UI.Component/initialize","UI.InputControl/label","UI.InputControl/name","UI.Component/out","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/shadowEffect","UI.ControlElement/shrinkwrap","UI.Component/style","UI.InputControl/style_input","UI.InputControl/style_label","UI.InputControl/tooltipText","UI.Component/uid","UI.ControlElement/width","UI.ControlElement/wrapText","UI.Component/createComponentSignal","UI.Component/beforeFirstRender","UI.Component/Renderer","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed","UI.InputControl/ValueChange","UI.InputControl/ValueInput"]},{"id":"UI.Spacer","name":"Spacer","isClass":true,"file":"dist/core/typings/UI/Components/Controls/Spacer.d.ts","line":1,"code":"class Spacer extends ControlElement","doc":"<p>Represents an empty control element to take up horizontal space within a row.</p>\n","extends":["UI.ControlElement"],"items":[{"id":"UI.Spacer.Initializer","name":"Initializer","isInterface":true,"file":"dist/core/typings/UI/Components/Controls/Spacer.d.ts","line":13,"code":"interface Initializer extends ControlElement.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["UI.ControlElement.Initializer"],"items":[],"inherits":["UI.Component.Initializer/ArrowDownKeyPressed","UI.Component.Initializer/ArrowLeftKeyPressed","UI.Component.Initializer/ArrowRightKeyPressed","UI.Component.Initializer/ArrowUpKeyPressed","UI.Component.Initializer/BackspaceKeyPressed","UI.Component.Initializer/Blur","UI.Component.Initializer/Click","UI.Component.Initializer/Clicked","UI.Component.Initializer/DeleteKeyPressed","UI.Component.Initializer/DoubleClick","UI.Component.Initializer/DoubleClicked","UI.Component.Initializer/DragDrop","UI.Component.Initializer/DragEnter","UI.Component.Initializer/DragLeave","UI.Component.Initializer/DragStart","UI.Component.Initializer/EnterKeyPressed","UI.Component.Initializer/EscapeKeyPressed","UI.Component.Initializer/Focus","UI.Component.Initializer/FocusGained","UI.Component.Initializer/FocusLost","UI.Component.Initializer/KeyDown","UI.Component.Initializer/KeyPress","UI.Component.Initializer/MouseContextMenu","UI.Component.Initializer/MouseEnter","UI.Component.Initializer/MouseLeave","UI.Component.Initializer/Press","UI.Component.Initializer/Pressed","UI.Component.Initializer/Rendered","UI.Component.Initializer/SpaceBarPressed","UI.Component.Initializer/animations","UI.Component.Initializer/focusMode","UI.ControlElement.Initializer/hasFocus","UI.Component.Initializer/height","UI.Component.Initializer/hidden","UI.Component.Initializer/id","UI.Component.Initializer/renderOptions","UI.Component.Initializer/selected","UI.Component.Initializer/selectionMode","UI.Component.Initializer/shadowEffect","UI.Component.Initializer/shadowEffectOnFocus","UI.Component.Initializer/shadowEffectOnHover","UI.ControlElement.Initializer/shrinkwrap","UI.Component.Initializer/style","UI.ControlElement.Initializer/width"]},{"id":"UI.Spacer.with","name":"with","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Spacer.d.ts","line":3,"code":"static with: ComponentFactory.WithMethodNoContent<Spacer.Initializer>;","doc":"<p>Create a component factory for this class.</p>\n","declType":"ComponentFactory.WithMethodNoContent<Spacer.Initializer>"},{"id":"UI.Spacer.withSize","name":"withSize","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Controls/Spacer.d.ts","line":5,"code":"static withSize<T extends typeof Spacer>(this: T, width?: UIValueOrAsync<string>, height?: UIValueOrAsync<string>): T & ComponentFactory<Spacer>;","doc":"<p>Initialize a spacer control factory with given size (CSS lengths); also sets <code>.shrinkwrap</code> to true if a width is given.</p>\n","typeParams":["T extends typeof Spacer"],"declType":"T & ComponentFactory<Spacer>"},{"id":"UI.Spacer.constructor","name":"new Spacer","hasParams":true,"isCtor":true,"file":"dist/core/typings/UI/Components/Controls/Spacer.d.ts","line":9,"code":"constructor(height?: string);","doc":"<p>Create a spacer element with given height (default 1px).</p>\n"},{"id":"UI.Spacer/initializeWith","name":"initializeWith","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Spacer.d.ts","line":7,"code":"initializeWith: ComponentFactory.InitializeWithMethod<Spacer.Initializer>;","doc":"<p>Initialize this component with given properties; returns this.</p>\n","declType":"ComponentFactory.InitializeWithMethod<Spacer.Initializer>"}],"isNamespace":true,"inherits":["UI.Component.addStyleOverride","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Component/appendChild","UI.Component/contains","UI.Component/displayOptions","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Component/getChildren","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Component/hoverState","UI.Component/id","UI.Component/initialize","UI.Component/out","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/setFormValues","UI.Component/shadowEffect","UI.ControlElement/shrinkwrap","UI.Component/style","UI.Component/uid","UI.ControlElement/width","UI.ControlElement/wrapText","UI.Component/Renderer","UI.Component/createComponentSignal","UI.Component/beforeFirstRender","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed"]},{"id":"UI.Style","name":"Style","isClass":true,"file":"dist/core/typings/UI/Style.d.ts","line":0,"code":"class Style","doc":"<p>Encapsulates CSS style properties, classes, and hidden/selected attributes; these styles are observed when applied to components on screen, by themselves or overridden using another Style instance (see <code>.override(...)</code>); properties are always applied in alphabetical order, i.e <code>backgroundColor</code> after <code>background</code>, <code>paddingTop</code> after <code>padding</code>, etc.</p>\n","items":[{"id":"UI.Style.StyleSet","name":"StyleSet","isInterface":true,"file":"dist/core/typings/UI/Style.d.ts","line":48,"code":"interface StyleSet","doc":"<p>A set of styles: properties with CSS values, e.g. { textAlign: “left” }; the operator “||” may be used within CSS value strings to indicate fallbacks for older platforms, e.g. “start || left” where “left” is applied before “start”.</p>\n","isStatic":true,"items":[{"id":"UI.Style.StyleSet.-index-string","name":"[string]","isProperty":true,"file":"dist/core/typings/UI/Style.d.ts","line":50,"code":"[cssProperty: string]: string | Async.ObservableValue<string>;","doc":"<p>No description</p>\n","declType":"string | Async.ObservableValue<string>"}]},{"id":"UI.Style.withClass","name":"withClass","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/core/typings/UI/Style.d.ts","line":2,"code":"static withClass(className: string): Style;","doc":"<p>Create a Style instance that only contains given class name(s); alias for new Style(undefined, className).</p>\n","declType":"Style"},{"id":"UI.Style.constructor","name":"new Style","hasParams":true,"isCtor":true,"file":"dist/core/typings/UI/Style.d.ts","line":4,"code":"constructor(styles?: Style.StyleSet, className?: string, hidden?: boolean);","doc":"<p>Create a new instance with given styles; class name argument may contain multiple class names separated with spaces.</p>\n"},{"id":"UI.Style/addClass","name":"addClass","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Style.d.ts","line":8,"code":"addClass(...classNames: string[]): this;","doc":"<p>Add the given class name(s); returns this.</p>\n","declType":"this"},{"id":"UI.Style/addShadowEffect","name":"addShadowEffect","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Style.d.ts","line":18,"code":"addShadowEffect(depth: number | Async.ObservableValue<number>): this;","doc":"<p>Add a drop shadow effect, with given depth factor (0-1); returns this.</p>\n","declType":"this"},{"id":"UI.Style/deselect","name":"deselect","hasParams":false,"isMethod":true,"file":"dist/core/typings/UI/Style.d.ts","line":32,"code":"deselect(): this;","doc":"<p>Remove the “selected” attribute; returns this.</p>\n","declType":"this"},{"id":"UI.Style/get","name":"get","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Style.d.ts","line":16,"code":"get(propertyName: string): string | undefined;","doc":"<p>Returns value for given property; the property must be set explicitly on this Style instance or overriding Style instances.</p>\n","declType":"string | undefined"},{"id":"UI.Style/getClassName","name":"getClassName","hasParams":false,"isMethod":true,"file":"dist/core/typings/UI/Style.d.ts","line":14,"code":"getClassName(): string;","doc":"<p>Returns the current CSS class name(s) stored in this instance (observable).</p>\n","declType":"string"},{"id":"UI.Style/getOverrides","name":"getOverrides","hasParams":false,"isMethod":true,"file":"dist/core/typings/UI/Style.d.ts","line":42,"code":"getOverrides(): Style[];","doc":"<p>Returns a list that consists of this Style instance itself, plus any recursively overriding Style instances in effect; except for instances without any non-empty properties or classes (observable).</p>\n","declType":"Style[]"},{"id":"UI.Style/hide","name":"hide","hasParams":false,"isMethod":true,"file":"dist/core/typings/UI/Style.d.ts","line":20,"code":"hide(): this;\nhide(hidden?: boolean | Async.ObservableValue<boolean>): this;","doc":"<p>[1]. Add the “hidden” attribute; returns this.</p>\n<p>[2]. Map the “hidden” attribute to the value of given observable; returns this.</p>\n","declType":"this | this","count":2},{"id":"UI.Style/isHidden","name":"isHidden","hasParams":false,"isMethod":true,"file":"dist/core/typings/UI/Style.d.ts","line":26,"code":"isHidden(): string | boolean | undefined;","doc":"<p>Returns hidden state for this Style instance, true if explicitly hidden, false if explicity shown, undefined otherwise (observable).</p>\n","declType":"string | boolean | undefined"},{"id":"UI.Style/isSelected","name":"isSelected","hasParams":false,"isMethod":true,"file":"dist/core/typings/UI/Style.d.ts","line":34,"code":"isSelected(): string | boolean | undefined;","doc":"<p>Returns selection state for this Style instance, true if explicitly selected, false if explicity deselected, undefined otherwise (observable).</p>\n","declType":"string | boolean | undefined"},{"id":"UI.Style/override","name":"override","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Style.d.ts","line":40,"code":"override(style?: Style | Style.StyleSet | Async.ObservableObject | Async.ObservableValue<Style | Style.StyleSet | Async.ObservableObject | undefined>): this;","doc":"<p>Override styles and classes with those from given Style instance; returns this.</p>\n","declType":"this"},{"id":"UI.Style/removeClass","name":"removeClass","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Style.d.ts","line":10,"code":"removeClass(...classNames: string[]): this;","doc":"<p>Remove the given class name(s), from this instance as well as any instances that this instance overrides; returns this.</p>\n","declType":"this"},{"id":"UI.Style/select","name":"select","hasParams":false,"isMethod":true,"file":"dist/core/typings/UI/Style.d.ts","line":28,"code":"select(): this;\nselect(selected?: boolean | Async.ObservableValue<boolean>): this;","doc":"<p>[1]. Add the “selected” attribute; returns this.</p>\n<p>[2]. Map the “selected” attribute to the value of given observable; returns this.</p>\n","declType":"this | this","count":2},{"id":"UI.Style/set","name":"set","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Style.d.ts","line":36,"code":"set(propertyName: string, value: string | Async.ObservableValue<string>): this;\nset(obj: Style.StyleSet | Async.ObservableObject): this;","doc":"<p>[1]. Set a style property; if given value is observable, this value will be observed while this Style instance is applied to an element on screen; returns this.</p>\n<p>[2]. Set multiple style properties using values (strings or <code>ObservableValue</code> instances) in given object; if given object is an <code>ObservableObject</code>, only <em>existing observable</em> properties are observed; returns this.</p>\n","declType":"this | this","count":2},{"id":"UI.Style/setClass","name":"setClass","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Style.d.ts","line":12,"code":"setClass(...classNames: string[]): this;","doc":"<p>Remove (all) existing CSS class name(s) and use given class(es) (only on this Style instance, not on overriding or overridden styles); returns this.</p>\n","declType":"this"},{"id":"UI.Style/show","name":"show","hasParams":false,"isMethod":true,"file":"dist/core/typings/UI/Style.d.ts","line":24,"code":"show(): this;","doc":"<p>Remove the “hidden” attribute; returns this.</p>\n","declType":"this"},{"id":"UI.Style/uid","name":"uid","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Style.d.ts","line":6,"code":"readonly uid: string;","doc":"<p>Globally unique ID for this Style instance.</p>\n","declType":"string"}],"isNamespace":true},{"id":"UI.Table","name":"Table","isClass":true,"file":"dist/core/typings/UI/Components/Blocks/Table.d.ts","line":5,"code":"class Table<TableRowT extends TableRow> extends Block","doc":"<p>Represents a table block component.</p>\n","extends":["UI.Block"],"typeParams":["TableRowT extends TableRow"],"items":[{"id":"UI.Table.Initializer","name":"Initializer","isInterface":true,"file":"dist/core/typings/UI/Components/Blocks/Table.d.ts","line":29,"code":"interface Initializer extends Block.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["UI.Block.Initializer"],"items":[{"id":"UI.Table.Initializer/header","name":"header","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Table.d.ts","line":33,"code":"header?: ComponentFactory.SpecEltOrListTCol;","doc":"<p>Property initializer: header row.</p>\n","declType":"ComponentFactory.SpecEltOrListTCol"},{"id":"UI.Table.Initializer/name","name":"name","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Table.d.ts","line":35,"code":"name?: string;","doc":"<p>Property initializer: form values list name.</p>\n","declType":"string"},{"id":"UI.Table.Initializer/rows","name":"rows","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Table.d.ts","line":31,"code":"rows?: ComponentFactory.SpecList2TCol;","doc":"<p>Property initializer: list of rows.</p>\n","declType":"ComponentFactory.SpecList2TCol"}],"inherits":["UI.Component.Initializer/ArrowDownKeyPressed","UI.Component.Initializer/ArrowLeftKeyPressed","UI.Component.Initializer/ArrowRightKeyPressed","UI.Component.Initializer/ArrowUpKeyPressed","UI.Component.Initializer/BackspaceKeyPressed","UI.Component.Initializer/Blur","UI.Component.Initializer/Click","UI.Component.Initializer/Clicked","UI.Component.Initializer/DeleteKeyPressed","UI.Component.Initializer/DoubleClick","UI.Component.Initializer/DoubleClicked","UI.Component.Initializer/DragDrop","UI.Component.Initializer/DragEnter","UI.Component.Initializer/DragLeave","UI.Component.Initializer/DragStart","UI.Component.Initializer/EnterKeyPressed","UI.Component.Initializer/EscapeKeyPressed","UI.Component.Initializer/Focus","UI.Component.Initializer/FocusGained","UI.Component.Initializer/FocusLost","UI.Component.Initializer/KeyDown","UI.Component.Initializer/KeyPress","UI.Component.Initializer/MouseContextMenu","UI.Component.Initializer/MouseEnter","UI.Component.Initializer/MouseLeave","UI.Component.Initializer/Press","UI.Component.Initializer/Pressed","UI.Component.Initializer/Rendered","UI.Component.Initializer/SpaceBarPressed","UI.Component.Initializer/animations","UI.Block.Initializer/displayOptions","UI.Component.Initializer/focusMode","UI.Component.Initializer/hasFocus","UI.Component.Initializer/height","UI.Component.Initializer/hidden","UI.Component.Initializer/id","UI.Block.Initializer/overlayPosition","UI.Component.Initializer/renderOptions","UI.Component.Initializer/selected","UI.Component.Initializer/selectionMode","UI.Component.Initializer/shadowEffect","UI.Component.Initializer/shadowEffectOnFocus","UI.Component.Initializer/shadowEffectOnHover","UI.Component.Initializer/style","UI.Component.Initializer/width"]},{"id":"UI.Table.with","name":"with","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Table.d.ts","line":7,"code":"static with: ComponentFactory.WithMethod<Table.Initializer>;","doc":"<p>Create a component factory for this class.</p>\n","declType":"ComponentFactory.WithMethod<Table.Initializer>"},{"id":"UI.Table.constructor","name":"new Table","hasParams":true,"isCtor":true,"file":"dist/core/typings/UI/Components/Blocks/Table.d.ts","line":11,"code":"constructor(headerColumns?: Array<string | ControlElement | Block>, widths?: string[], rows?: TableRowT[] | Async.ObservableArray<TableRowT>);","doc":"<p>Create a table with given header and rows, if any.</p>\n"},{"id":"UI.Table/appendChild","name":"appendChild","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Blocks/Table.d.ts","line":19,"code":"appendChild(tableRow?: TableRowT): this;","doc":"<p>Append a row to this table.</p>\n","declType":"this"},{"id":"UI.Table/getChildren","name":"getChildren","hasParams":false,"isMethod":true,"file":"dist/core/typings/UI/Components/Blocks/Table.d.ts","line":21,"code":"getChildren(): Component[];","doc":"<p>Returns an array of directly contained components (observable).</p>\n","declType":"Component[]"},{"id":"UI.Table/getFormValues","name":"getFormValues","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Blocks/Table.d.ts","line":23,"code":"getFormValues(result?: any): any;","doc":"<p>Returns an object containing all current values of input elements (observable).</p>\n"},{"id":"UI.Table/header","name":"header","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Table.d.ts","line":13,"code":"header?: TableHeader;","doc":"<p>Header row; not rendered if undefined, or does not contain columns, OR if table itself has no rows (observed).</p>\n","declType":"TableHeader"},{"id":"UI.Table/initializeWith","name":"initializeWith","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Table.d.ts","line":9,"code":"initializeWith: ComponentFactory.InitializeWithMethod<Table.Initializer>;","doc":"<p>Initialize this component with given properties; returns this.</p>\n","declType":"ComponentFactory.InitializeWithMethod<Table.Initializer>"},{"id":"UI.Table/name","name":"name","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Table.d.ts","line":17,"code":"name?: string;","doc":"<p>Set to a string value to have getFormValues add an ObservableArray with form values of table rows.</p>\n","declType":"string"},{"id":"UI.Table/rows","name":"rows","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/Table.d.ts","line":15,"code":"rows: Array<TableRowT | undefined>;","doc":"<p>List of rows; each row should have the same number of columns (observed).</p>\n","declType":"Array<TableRowT | undefined>"},{"id":"UI.Table/setFormValues","name":"setFormValues","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Blocks/Table.d.ts","line":25,"code":"setFormValues(values: any): void;","doc":"<p>Set all input values by element name.</p>\n","declType":"void"}],"isNamespace":true,"inherits":["UI.Component.addStyleOverride","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Component/contains","UI.Component/displayOptions","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Component/hoverState","UI.Component/id","UI.Component/initialize","UI.Component/out","UI.Block/overlayPosition","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/shadowEffect","UI.Component/style","UI.Component/uid","UI.Component/width","UI.Component/Renderer","UI.Component/createComponentSignal","UI.Component/beforeFirstRender","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed"]},{"id":"UI.TableHeader","name":"TableHeader","isClass":true,"file":"dist/core/typings/UI/Components/Blocks/TableRow.d.ts","line":36,"code":"class TableHeader extends TableRow","doc":"<p>A table header at the top of a table.</p>\n","extends":["UI.TableRow"],"items":[{"id":"UI.TableHeader/focusMode","name":"focusMode","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/TableRow.d.ts","line":40,"code":"focusMode: Component.FocusMode;","doc":"<p>Automatic focus management mode: table header rows are not focusable.</p>\n","declType":"Component.FocusMode"},{"id":"UI.TableHeader/selectionMode","name":"selectionMode","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/TableRow.d.ts","line":38,"code":"selectionMode: Component.SelectionMode;","doc":"<p>Automatic selection management mode: table header rows are not selectable.</p>\n","declType":"Component.SelectionMode"}],"inherits":["UI.Component.addStyleOverride","UI.TableRow.constructor","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.TableRow/appendChild","UI.TableRow/columns","UI.Component/contains","UI.Component/displayOptions","UI.Component/flowDirection","UI.Component/getActualDimensions","UI.TableRow/getChildren","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Component/hoverState","UI.Component/id","UI.Component/initialize","UI.TableRow/initializeWith","UI.Component/out","UI.Block/overlayPosition","UI.Component/render","UI.Component/renderOptions","UI.TableRow/rowIndex","UI.Component/selected","UI.Component/setFormValues","UI.Component/shadowEffect","UI.Component/style","UI.TableRow/styles","UI.Component/uid","UI.Component/width","UI.TableRow/widths","UI.Component/createComponentSignal","UI.Component/beforeFirstRender","UI.Component/Renderer","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed"]},{"id":"UI.TableRow","name":"TableRow","isClass":true,"file":"dist/core/typings/UI/Components/Blocks/TableRow.d.ts","line":4,"code":"class TableRow extends Block","doc":"<p>Represents a row within a <code>Table</code> component.</p>\n","extends":["UI.Block"],"items":[{"id":"UI.TableRow.Initializer","name":"Initializer","isInterface":true,"file":"dist/core/typings/UI/Components/Blocks/TableRow.d.ts","line":26,"code":"interface Initializer extends Block.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["UI.Block.Initializer"],"items":[{"id":"UI.TableRow.Initializer/columns","name":"columns","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/TableRow.d.ts","line":28,"code":"columns?: ComponentFactory.SpecListTCol;","doc":"<p>Property initializer: content of all columns, as strings, control elements, or blocks.</p>\n","declType":"ComponentFactory.SpecListTCol"},{"id":"UI.TableRow.Initializer/styles","name":"styles","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/TableRow.d.ts","line":32,"code":"styles?: UIValueOrAsync<Array<Style | Style.StyleSet | undefined>>;","doc":"<p>Property initializer: additional styles for all columns.</p>\n","declType":"UIValueOrAsync<Array<Style | Style.StyleSet | undefined>>"},{"id":"UI.TableRow.Initializer/widths","name":"widths","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/TableRow.d.ts","line":30,"code":"widths?: UIValueOrAsync<Array<string | undefined>>;","doc":"<p>Property initializer: widths of all columns.</p>\n","declType":"UIValueOrAsync<Array<string | undefined>>"}],"inherits":["UI.Component.Initializer/ArrowDownKeyPressed","UI.Component.Initializer/ArrowLeftKeyPressed","UI.Component.Initializer/ArrowRightKeyPressed","UI.Component.Initializer/ArrowUpKeyPressed","UI.Component.Initializer/BackspaceKeyPressed","UI.Component.Initializer/Blur","UI.Component.Initializer/Click","UI.Component.Initializer/Clicked","UI.Component.Initializer/DeleteKeyPressed","UI.Component.Initializer/DoubleClick","UI.Component.Initializer/DoubleClicked","UI.Component.Initializer/DragDrop","UI.Component.Initializer/DragEnter","UI.Component.Initializer/DragLeave","UI.Component.Initializer/DragStart","UI.Component.Initializer/EnterKeyPressed","UI.Component.Initializer/EscapeKeyPressed","UI.Component.Initializer/Focus","UI.Component.Initializer/FocusGained","UI.Component.Initializer/FocusLost","UI.Component.Initializer/KeyDown","UI.Component.Initializer/KeyPress","UI.Component.Initializer/MouseContextMenu","UI.Component.Initializer/MouseEnter","UI.Component.Initializer/MouseLeave","UI.Component.Initializer/Press","UI.Component.Initializer/Pressed","UI.Component.Initializer/Rendered","UI.Component.Initializer/SpaceBarPressed","UI.Component.Initializer/animations","UI.Block.Initializer/displayOptions","UI.Component.Initializer/focusMode","UI.Component.Initializer/hasFocus","UI.Component.Initializer/height","UI.Component.Initializer/hidden","UI.Component.Initializer/id","UI.Block.Initializer/overlayPosition","UI.Component.Initializer/renderOptions","UI.Component.Initializer/selected","UI.Component.Initializer/selectionMode","UI.Component.Initializer/shadowEffect","UI.Component.Initializer/shadowEffectOnFocus","UI.Component.Initializer/shadowEffectOnHover","UI.Component.Initializer/style","UI.Component.Initializer/width"]},{"id":"UI.TableRow.with","name":"with","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/TableRow.d.ts","line":6,"code":"static with: ComponentFactory.WithMethod<TableRow.Initializer>;","doc":"<p>Create a component factory for this class.</p>\n","declType":"ComponentFactory.WithMethod<TableRow.Initializer>"},{"id":"UI.TableRow.constructor","name":"new TableRow","hasParams":true,"isCtor":true,"file":"dist/core/typings/UI/Components/Blocks/TableRow.d.ts","line":10,"code":"constructor(columns?: Array<string | ControlElement | Block>, widths?: string[], styles?: Array<Style | Style.StyleSet>);","doc":"<p>Create a table row with given columns, if any.</p>\n"},{"id":"UI.TableRow/appendChild","name":"appendChild","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Blocks/TableRow.d.ts","line":20,"code":"appendChild(cell?: string | ControlElement | Block): this;","doc":"<p>Append a table cell to this row.</p>\n","declType":"this"},{"id":"UI.TableRow/columns","name":"columns","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/TableRow.d.ts","line":12,"code":"columns: Array<string | ControlElement | Block | undefined>;","doc":"<p>Column content as strings, control elements, or blocks (observed).</p>\n","declType":"Array<string | ControlElement | Block | undefined>"},{"id":"UI.TableRow/getChildren","name":"getChildren","hasParams":false,"isMethod":true,"file":"dist/core/typings/UI/Components/Blocks/TableRow.d.ts","line":22,"code":"getChildren(): Component[];","doc":"<p>Returns an array of directly contained components.</p>\n","declType":"Component[]"},{"id":"UI.TableRow/initializeWith","name":"initializeWith","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/TableRow.d.ts","line":8,"code":"initializeWith: ComponentFactory.InitializeWithMethod<TableRow.Initializer>;","doc":"<p>Initialize this component with given properties; returns this.</p>\n","declType":"ComponentFactory.InitializeWithMethod<TableRow.Initializer>"},{"id":"UI.TableRow/rowIndex","name":"rowIndex","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/TableRow.d.ts","line":18,"code":"rowIndex: number;","doc":"<p>Row index (base 0) the last time this row was rendered, or -1 (observable).</p>\n","declType":"number"},{"id":"UI.TableRow/styles","name":"styles","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/TableRow.d.ts","line":16,"code":"styles: Array<Style | Style.StyleSet | undefined>;","doc":"<p>Additional styles for all columns (observed).</p>\n","declType":"Array<Style | Style.StyleSet | undefined>"},{"id":"UI.TableRow/widths","name":"widths","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/TableRow.d.ts","line":14,"code":"widths: Array<string | undefined>;","doc":"<p>Column widths for all columns (CSS values, observed).</p>\n","declType":"Array<string | undefined>"}],"isNamespace":true,"inherits":["UI.Component.addStyleOverride","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Component/contains","UI.Component/displayOptions","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Component/hoverState","UI.Component/id","UI.Component/initialize","UI.Component/out","UI.Block/overlayPosition","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/setFormValues","UI.Component/shadowEffect","UI.Component/style","UI.Component/uid","UI.Component/width","UI.Component/Renderer","UI.Component/createComponentSignal","UI.Component/beforeFirstRender","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed"]},{"id":"UI.TextButton","name":"TextButton","isClass":true,"file":"dist/core/typings/UI/Components/Controls/Button.d.ts","line":95,"code":"class TextButton extends Button","doc":"<p>Button control that is not decorated as a button.</p>\n","extends":["UI.Button"],"items":[],"inherits":["UI.Component.addStyleOverride","UI.Button.withIcon","UI.Button.withLabel","UI.Button.constructor","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Component/appendChild","UI.Button/badge","UI.Component/contains","UI.Button/disabled","UI.Component/displayOptions","UI.Button/dropdown","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Component/getChildren","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Component/hoverState","UI.Button/icon","UI.Button/iconAfter","UI.Component/id","UI.Component/initialize","UI.Button/initializeWith","UI.Button/label","UI.Component/out","UI.Button/primary","UI.Button/remGutter","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/setFormValues","UI.Component/shadowEffect","UI.Button/shrinkwrap","UI.Component/style","UI.Button/style_button","UI.Button/target","UI.Button/tooltipText","UI.Component/uid","UI.ControlElement/width","UI.ControlElement/wrapText","UI.Component/beforeFirstRender","UI.Component/createComponentSignal","UI.Component/Renderer","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Button/DropdownClicked","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed"]},{"id":"UI.TextField","name":"TextField","isClass":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":2,"code":"class TextField extends InputControl","doc":"<p>Represents a single- or multi-line text input field control.</p>\n","extends":["UI.InputControl"],"items":[{"id":"UI.TextField.Initializer","name":"Initializer","isInterface":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":46,"code":"interface Initializer extends InputControl.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["UI.InputControl.Initializer"],"items":[{"id":"UI.TextField.Initializer/immediateValueUpdate","name":"immediateValueUpdate","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":54,"code":"immediateValueUpdate?: UIValueOrAsync<boolean>;","doc":"<p>Property initializer: true to update value immediately on input.</p>\n","declType":"UIValueOrAsync<boolean>"},{"id":"UI.TextField.Initializer/placeholderText","name":"placeholderText","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":52,"code":"placeholderText?: UIValueOrAsync<string | TextLabelFactory>;","doc":"<p>Property initializer: placeholder text.</p>\n","declType":"UIValueOrAsync<string | TextLabelFactory>"},{"id":"UI.TextField.Initializer/textareaLines","name":"textareaLines","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":48,"code":"textareaLines?: UIValueOrAsync<number>;","doc":"<p>Property initializer: number of text area lines.</p>\n","declType":"UIValueOrAsync<number>"},{"id":"UI.TextField.Initializer/type","name":"type","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":50,"code":"type?: UIValueOrAsync<TextField.Type>;","doc":"<p>Property initializer: text field type.</p>\n","declType":"UIValueOrAsync<TextField.Type>"}],"inherits":["UI.Component.Initializer/ArrowDownKeyPressed","UI.Component.Initializer/ArrowLeftKeyPressed","UI.Component.Initializer/ArrowRightKeyPressed","UI.Component.Initializer/ArrowUpKeyPressed","UI.Component.Initializer/BackspaceKeyPressed","UI.Component.Initializer/Blur","UI.Component.Initializer/Click","UI.Component.Initializer/Clicked","UI.Component.Initializer/DeleteKeyPressed","UI.Component.Initializer/DoubleClick","UI.Component.Initializer/DoubleClicked","UI.Component.Initializer/DragDrop","UI.Component.Initializer/DragEnter","UI.Component.Initializer/DragLeave","UI.Component.Initializer/DragStart","UI.Component.Initializer/EnterKeyPressed","UI.Component.Initializer/EscapeKeyPressed","UI.Component.Initializer/Focus","UI.Component.Initializer/FocusGained","UI.Component.Initializer/FocusLost","UI.Component.Initializer/KeyDown","UI.Component.Initializer/KeyPress","UI.Component.Initializer/MouseContextMenu","UI.Component.Initializer/MouseEnter","UI.Component.Initializer/MouseLeave","UI.Component.Initializer/Press","UI.Component.Initializer/Pressed","UI.Component.Initializer/Rendered","UI.Component.Initializer/SpaceBarPressed","UI.InputControl.Initializer/ValueChange","UI.InputControl.Initializer/ValueInput","UI.Component.Initializer/animations","UI.InputControl.Initializer/disabled","UI.Component.Initializer/focusMode","UI.ControlElement.Initializer/hasFocus","UI.Component.Initializer/height","UI.Component.Initializer/hidden","UI.Component.Initializer/id","UI.InputControl.Initializer/label","UI.InputControl.Initializer/name","UI.Component.Initializer/renderOptions","UI.Component.Initializer/selected","UI.Component.Initializer/selectionMode","UI.Component.Initializer/shadowEffect","UI.Component.Initializer/shadowEffectOnFocus","UI.Component.Initializer/shadowEffectOnHover","UI.ControlElement.Initializer/shrinkwrap","UI.Component.Initializer/style","UI.InputControl.Initializer/style_input","UI.InputControl.Initializer/style_label","UI.InputControl.Initializer/tooltipText","UI.InputControl.Initializer/value","UI.ControlElement.Initializer/width"]},{"id":"UI.TextField.with","name":"with","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":4,"code":"static with: ComponentFactory.WithMethodNoContent<TextField.Initializer>;","doc":"<p>Create a component factory for this class.</p>\n","declType":"ComponentFactory.WithMethodNoContent<TextField.Initializer>"},{"id":"UI.TextField.withName","name":"withName","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":6,"code":"static withName<T extends typeof TextField>(this: T, name: string, label?: string | TextLabelFactory, placeholderText?: string | TextLabelFactory): T & ComponentFactory<TextField>;","doc":"<p>Initialize a text field control factory with given name, label, and placeholder.</p>\n","typeParams":["T extends typeof TextField"],"declType":"T & ComponentFactory<TextField>"},{"id":"UI.TextField.Type","name":"Type","isEnum":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":30,"code":"enum Type","doc":"<p>Text field type options (e.g. Text, Password, Email etc.).</p>\n","isStatic":true,"items":[{"id":"UI.TextField.Type.Color","name":"Color","isStatic":true,"isConst":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":44,"code":"enum Type { ...Color }","doc":"<p>No description</p>\n"},{"id":"UI.TextField.Type.Date","name":"Date","isStatic":true,"isConst":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":35,"code":"enum Type { ...Date }","doc":"<p>No description</p>\n"},{"id":"UI.TextField.Type.DateTime","name":"DateTime","isStatic":true,"isConst":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":34,"code":"enum Type { ...DateTime }","doc":"<p>No description</p>\n"},{"id":"UI.TextField.Type.Email","name":"Email","isStatic":true,"isConst":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":40,"code":"enum Type { ...Email }","doc":"<p>No description</p>\n"},{"id":"UI.TextField.Type.Month","name":"Month","isStatic":true,"isConst":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":36,"code":"enum Type { ...Month }","doc":"<p>No description</p>\n"},{"id":"UI.TextField.Type.Number","name":"Number","isStatic":true,"isConst":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":39,"code":"enum Type { ...Number }","doc":"<p>No description</p>\n"},{"id":"UI.TextField.Type.Password","name":"Password","isStatic":true,"isConst":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":33,"code":"enum Type { ...Password }","doc":"<p>No description</p>\n"},{"id":"UI.TextField.Type.Search","name":"Search","isStatic":true,"isConst":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":42,"code":"enum Type { ...Search }","doc":"<p>No description</p>\n"},{"id":"UI.TextField.Type.Tel","name":"Tel","isStatic":true,"isConst":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":43,"code":"enum Type { ...Tel }","doc":"<p>No description</p>\n"},{"id":"UI.TextField.Type.Text","name":"Text","isStatic":true,"isConst":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":32,"code":"enum Type { ...Text }","doc":"<p>No description</p>\n"},{"id":"UI.TextField.Type.Time","name":"Time","isStatic":true,"isConst":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":37,"code":"enum Type { ...Time }","doc":"<p>No description</p>\n"},{"id":"UI.TextField.Type.Url","name":"Url","isStatic":true,"isConst":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":41,"code":"enum Type { ...Url }","doc":"<p>No description</p>\n"},{"id":"UI.TextField.Type.Week","name":"Week","isStatic":true,"isConst":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":38,"code":"enum Type { ...Week }","doc":"<p>No description</p>\n"}]},{"id":"UI.TextField.constructor","name":"new TextField","hasParams":true,"isCtor":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":10,"code":"constructor(name?: string, label?: string | TextLabelFactory, textareaLines?: number);","doc":"<p>Create a text field.</p>\n"},{"id":"UI.TextField/getFormValues","name":"getFormValues","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":24,"code":"getFormValues(result?: any): any;","doc":"<p>Returns an object containing all current values of input elements (observable).</p>\n"},{"id":"UI.TextField/immediateValueUpdate","name":"immediateValueUpdate","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":20,"code":"immediateValueUpdate: boolean;","doc":"<p>Set to true to update <code>.value</code> immediately after the input field text has changed, instead of only on blur or enter press (observed).</p>\n","declType":"boolean"},{"id":"UI.TextField/initializeWith","name":"initializeWith","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":8,"code":"initializeWith: ComponentFactory.InitializeWithMethod<TextField.Initializer>;","doc":"<p>Initialize this component with given properties; returns this.</p>\n","declType":"ComponentFactory.InitializeWithMethod<TextField.Initializer>"},{"id":"UI.TextField/placeholderText","name":"placeholderText","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":18,"code":"placeholderText: string;","doc":"<p>Placeholder text (observed).</p>\n","declType":"string"},{"id":"UI.TextField/selectText","name":"selectText","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":22,"code":"selectText(start?: number, end?: number): this;","doc":"<p>Select (a part of) the text in this text field, returns this.</p>\n","declType":"this"},{"id":"UI.TextField/setFormValues","name":"setFormValues","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":26,"code":"setFormValues(values: any): void;","doc":"<p>Sets all input values by element name.</p>\n","declType":"void"},{"id":"UI.TextField/textareaLines","name":"textareaLines","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":12,"code":"textareaLines: number;","doc":"<p>Number of rows for a multiline text field, default 0 (NOT observed).</p>\n","declType":"number"},{"id":"UI.TextField/type","name":"type","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":14,"code":"type: TextField.Type;","doc":"<p>Text field type (text, password, number, etc.; observed).</p>\n","declType":"TextField.Type"},{"id":"UI.TextField/value","name":"value","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/InputControls/TextField.d.ts","line":16,"code":"value: string;","doc":"<p>Current input value (read/write observable) value changes only on blur or enter press unless <code>.immediateValueUpdate</code> is set.</p>\n","declType":"string"}],"isNamespace":true,"inherits":["UI.Component.addStyleOverride","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Component/appendChild","UI.Component/contains","UI.InputControl/disabled","UI.Component/displayOptions","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Component/getChildren","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Component/hoverState","UI.Component/id","UI.Component/initialize","UI.InputControl/label","UI.InputControl/name","UI.Component/out","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/shadowEffect","UI.ControlElement/shrinkwrap","UI.Component/style","UI.InputControl/style_input","UI.InputControl/style_label","UI.InputControl/tooltipText","UI.Component/uid","UI.ControlElement/width","UI.ControlElement/wrapText","UI.Component/createComponentSignal","UI.Component/beforeFirstRender","UI.Component/Renderer","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed","UI.InputControl/ValueChange","UI.InputControl/ValueInput"]},{"id":"UI.TextLabelFactory","name":"TextLabelFactory","isClass":true,"file":"dist/core/typings/UI/Components/TextLabelFactory.d.ts","line":3,"code":"class TextLabelFactory","doc":"<p>Shared factory implementation for a piece of text as a string and/or as (an observable value representing) a Label instance (or sub class); can be used in Component factory specs using UI.tl(…) or with backticks.</p>\n","items":[{"id":"UI.TextLabelFactory.constructor","name":"new TextLabelFactory","hasParams":true,"isCtor":true,"file":"dist/core/typings/UI/Components/TextLabelFactory.d.ts","line":5,"code":"constructor(text: { toString: () => string; } | Async.ObservableValue<{ toString: () => string; }>, args?: Array<string | Async.ObservableValue<string>> | ((baseComponent: Component, propertyName: string) => Array<string | Async.ObservableValue<string>>), observeArgs?: boolean, baseClass?: typeof Label);","doc":"<p>Create the text label factory using the given string, stringable (object with a <code>toString</code> method), or observable value, along with an optional array of (observable) substitution arguments or a function that returns such an array for a component to bind to, and a Label base class that is used if not overridden by string content prefix.</p>\n"},{"id":"UI.TextLabelFactory/getComponent","name":"getComponent","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/TextLabelFactory.d.ts","line":13,"code":"getComponent(baseComponent?: Component, propertyName?: string): Label | Async.ObservableValue<Label>;","doc":"<p>Get the encapsulated text wrapped in a new Label (or derived) instance, or an observable value representing the instance; uses {…} prefix to control component type and its properties; parameters are used by component factory to initialize bindings used in <code>tl</code> strings, if any.</p>\n","declType":"Label | Async.ObservableValue<Label>"},{"id":"UI.TextLabelFactory/toString","name":"toString","hasParams":false,"isMethod":true,"file":"dist/core/typings/UI/Components/TextLabelFactory.d.ts","line":11,"code":"toString(): string;","doc":"<p>Get the (translated) encapsulated text as a string; adds a dependency on the observable value if called from an observable value getter; trims {…} prefix if present.</p>\n","declType":"string"}]},{"id":"UI.ToggleButton","name":"ToggleButton","isClass":true,"file":"dist/core/typings/UI/Components/Controls/Button.d.ts","line":88,"code":"class ToggleButton extends Button","doc":"<p>Button that switches between selected (active) and deselected (inactive) when clicked (shortcut for setting <code>toggleMode</code> on regular <code>Button</code> class).</p>\n","extends":["UI.Button"],"items":[{"id":"UI.ToggleButton.constructor","name":"new ToggleButton","hasParams":true,"isCtor":true,"file":"dist/core/typings/UI/Components/Controls/Button.d.ts","line":90,"code":"constructor(label?: string | TextLabelFactory, icon?: string);","doc":"<p>No description</p>\n"}],"inherits":["UI.Component.addStyleOverride","UI.Button.withIcon","UI.Button.withLabel","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Component/appendChild","UI.Button/badge","UI.Component/contains","UI.Button/disabled","UI.Component/displayOptions","UI.Button/dropdown","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Component/getChildren","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Component/hoverState","UI.Button/icon","UI.Button/iconAfter","UI.Component/id","UI.Component/initialize","UI.Button/initializeWith","UI.Button/label","UI.Component/out","UI.Button/primary","UI.Button/remGutter","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/setFormValues","UI.Component/shadowEffect","UI.Button/shrinkwrap","UI.Component/style","UI.Button/style_button","UI.Button/target","UI.Button/tooltipText","UI.Component/uid","UI.ControlElement/width","UI.ControlElement/wrapText","UI.Component/beforeFirstRender","UI.Component/createComponentSignal","UI.Component/Renderer","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Button/DropdownClicked","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed"]},{"id":"UI.TreeList","name":"TreeList","isClass":true,"file":"dist/core/typings/UI/Components/Blocks/TreeList.d.ts","line":4,"code":"class TreeList<BlockT extends TreeList.BlockItem> extends Block","doc":"<p>Represents a hierarchical list of blocks.</p>\n","extends":["UI.Block"],"typeParams":["BlockT extends TreeList.BlockItem"],"items":[{"id":"UI.TreeList.BlockItem","name":"BlockItem","isInterface":true,"file":"dist/core/typings/UI/Components/Blocks/TreeList.d.ts","line":47,"code":"interface BlockItem extends Block","doc":"<p>Represents a <code>Block</code> component with optional properties that define the hierarchical structure used by <code>TreeList</code>.</p>\n","isStatic":true,"extends":["UI.Block"],"items":[{"id":"UI.TreeList.BlockItem/collapsed","name":"collapsed","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/TreeList.d.ts","line":51,"code":"collapsed?: boolean;","doc":"<p>Optional flag, set to true to collapse the hierarchy below this item; this property should be observable to update rendered components asynchronously.</p>\n","declType":"boolean"},{"id":"UI.TreeList.BlockItem/key","name":"key","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/TreeList.d.ts","line":49,"code":"key?: string;","doc":"<p>Optional key (identifier string) of the item, used to populate <code>TreeList/selectedKey</code>.</p>\n","declType":"string"},{"id":"UI.TreeList.BlockItem/treeListItems","name":"treeListItems","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/TreeList.d.ts","line":53,"code":"treeListItems?: Array<TreeList.BlockItem | undefined>;","doc":"<p>Optional (observable) array containing tree list items to be displayed below this item; this property should be observable to update rendered components asynchronously.</p>\n","declType":"Array<TreeList.BlockItem | undefined>"}],"inherits":["UI.Component.addStyleOverride","UI.Block.constructor","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Component/appendChild","UI.Component/contains","UI.Component/displayOptions","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Component/getChildren","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Component/hoverState","UI.Component/id","UI.Component/initialize","UI.Block/initializeWith","UI.Component/out","UI.Block/overlayPosition","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/setFormValues","UI.Component/shadowEffect","UI.Component/style","UI.Component/uid","UI.Component/width","UI.Component/beforeFirstRender","UI.Component/createComponentSignal","UI.Component/Renderer","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed"]},{"id":"UI.TreeList.FoldSignal","name":"FoldSignal","isClass":true,"file":"dist/core/typings/UI/Components/Blocks/TreeList.d.ts","line":66,"code":"class FoldSignal<T extends TreeList.BlockItem> extends ComponentSignal<ItemEvent<T>>","doc":"<p>Signal that is emitted when a tree list item is collapsed or expanded.</p>\n","isStatic":true,"extends":["UI.ComponentSignal"],"typeParams":["T extends TreeList.BlockItem"],"items":[],"inherits":["Async.Signal.create","Async.Signal.constructor","Async.Signal/catch","Async.Signal/data","Async.Signal/emit","Async.Signal/results","Async.Signal/then"]},{"id":"UI.TreeList.Initializer","name":"Initializer","isInterface":true,"file":"dist/core/typings/UI/Components/Blocks/TreeList.d.ts","line":36,"code":"interface Initializer<BlockT extends Block> extends Block.Initializer","doc":"<p>Initializer for .with({ … }).</p>\n","isStatic":true,"extends":["UI.Block.Initializer"],"typeParams":["BlockT extends Block"],"items":[{"id":"UI.TreeList.Initializer/ItemCollapsed","name":"ItemCollapsed","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/TreeList.d.ts","line":42,"code":"ItemCollapsed?: string | TreeListFoldHandler<BlockT>;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | TreeListFoldHandler<BlockT>"},{"id":"UI.TreeList.Initializer/ItemExpanded","name":"ItemExpanded","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/TreeList.d.ts","line":44,"code":"ItemExpanded?: string | TreeListFoldHandler<BlockT>;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | TreeListFoldHandler<BlockT>"},{"id":"UI.TreeList.Initializer/SelectionChange","name":"SelectionChange","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/TreeList.d.ts","line":40,"code":"SelectionChange?: string | TreeListSelectionHandler<BlockT>;","doc":"<p>Signal initializer: method name or handler.</p>\n","declType":"string | TreeListSelectionHandler<BlockT>"},{"id":"UI.TreeList.Initializer/items","name":"items","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/TreeList.d.ts","line":38,"code":"items?: ComponentFactory.SpecList;","doc":"<p>Property initializer: nested list of items.</p>\n","declType":"ComponentFactory.SpecList"}],"inherits":["UI.Component.Initializer/ArrowDownKeyPressed","UI.Component.Initializer/ArrowLeftKeyPressed","UI.Component.Initializer/ArrowRightKeyPressed","UI.Component.Initializer/ArrowUpKeyPressed","UI.Component.Initializer/BackspaceKeyPressed","UI.Component.Initializer/Blur","UI.Component.Initializer/Click","UI.Component.Initializer/Clicked","UI.Component.Initializer/DeleteKeyPressed","UI.Component.Initializer/DoubleClick","UI.Component.Initializer/DoubleClicked","UI.Component.Initializer/DragDrop","UI.Component.Initializer/DragEnter","UI.Component.Initializer/DragLeave","UI.Component.Initializer/DragStart","UI.Component.Initializer/EnterKeyPressed","UI.Component.Initializer/EscapeKeyPressed","UI.Component.Initializer/Focus","UI.Component.Initializer/FocusGained","UI.Component.Initializer/FocusLost","UI.Component.Initializer/KeyDown","UI.Component.Initializer/KeyPress","UI.Component.Initializer/MouseContextMenu","UI.Component.Initializer/MouseEnter","UI.Component.Initializer/MouseLeave","UI.Component.Initializer/Press","UI.Component.Initializer/Pressed","UI.Component.Initializer/Rendered","UI.Component.Initializer/SpaceBarPressed","UI.Component.Initializer/animations","UI.Block.Initializer/displayOptions","UI.Component.Initializer/focusMode","UI.Component.Initializer/hasFocus","UI.Component.Initializer/height","UI.Component.Initializer/hidden","UI.Component.Initializer/id","UI.Block.Initializer/overlayPosition","UI.Component.Initializer/renderOptions","UI.Component.Initializer/selected","UI.Component.Initializer/selectionMode","UI.Component.Initializer/shadowEffect","UI.Component.Initializer/shadowEffectOnFocus","UI.Component.Initializer/shadowEffectOnHover","UI.Component.Initializer/style","UI.Component.Initializer/width"]},{"id":"UI.TreeList.ItemEvent","name":"ItemEvent","isInterface":true,"file":"dist/core/typings/UI/Components/Blocks/TreeList.d.ts","line":56,"code":"interface ItemEvent<T extends TreeList.BlockItem>","doc":"<p>Data that is emitted after the item selection of a tree list component changes, or when a tree list item is collapsed/expanded.</p>\n","isStatic":true,"typeParams":["T extends TreeList.BlockItem"],"items":[{"id":"UI.TreeList.ItemEvent/item","name":"item","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/TreeList.d.ts","line":58,"code":"item?: T;","doc":"<p>The newly selected item.</p>\n","declType":"T"},{"id":"UI.TreeList.ItemEvent/key","name":"key","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/TreeList.d.ts","line":60,"code":"key?: string;","doc":"<p>The key (string value) of the newly selected item, if any.</p>\n","declType":"string"}]},{"id":"UI.TreeList.SelectionSignal","name":"SelectionSignal","isClass":true,"file":"dist/core/typings/UI/Components/Blocks/TreeList.d.ts","line":63,"code":"class SelectionSignal<T extends TreeList.BlockItem> extends ComponentSignal<ItemEvent<T>>","doc":"<p>Signal that is emitted when a tree list selection event occurs.</p>\n","isStatic":true,"extends":["UI.ComponentSignal"],"typeParams":["T extends TreeList.BlockItem"],"items":[],"inherits":["Async.Signal.create","Async.Signal.constructor","Async.Signal/catch","Async.Signal/data","Async.Signal/emit","Async.Signal/results","Async.Signal/then"]},{"id":"UI.TreeList.with","name":"with","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/TreeList.d.ts","line":6,"code":"static with: ComponentFactory.WithMethod<TreeList.Initializer<Block>>;","doc":"<p>Create a component factory for this class.</p>\n","declType":"ComponentFactory.WithMethod<TreeList.Initializer<Block>>"},{"id":"UI.TreeList.constructor","name":"new TreeList","hasParams":true,"isCtor":true,"file":"dist/core/typings/UI/Components/Blocks/TreeList.d.ts","line":10,"code":"constructor(items?: Array<BlockT | undefined>);","doc":"<p>Create a tree list component with given items.</p>\n"},{"id":"UI.TreeList/appendChild","name":"appendChild","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Blocks/TreeList.d.ts","line":22,"code":"appendChild(block?: BlockT): this;","doc":"<p>Append a tree list block to this list.</p>\n","declType":"this"},{"id":"UI.TreeList/getChildren","name":"getChildren","hasParams":false,"isMethod":true,"file":"dist/core/typings/UI/Components/Blocks/TreeList.d.ts","line":24,"code":"getChildren(): Component[];","doc":"<p>Returns an array of directly contained components (observable); i.e. a flattened list of all <em>visible</em> tree list items.</p>\n","declType":"Component[]"},{"id":"UI.TreeList/initializeWith","name":"initializeWith","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/TreeList.d.ts","line":8,"code":"initializeWith: ComponentFactory.InitializeWithMethod<TreeList.Initializer<BlockT>>;","doc":"<p>Initialize this component with given properties; returns this.</p>\n","declType":"ComponentFactory.InitializeWithMethod<TreeList.Initializer<BlockT>>"},{"id":"UI.TreeList/items","name":"items","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/TreeList.d.ts","line":14,"code":"items: Array<BlockT | undefined>;","doc":"<p>Hierarchical list content (observed); items can use the <code>TreeList.BlockItem</code> interface to provide sub content, see e.g. <code>TreeListRow</code>.</p>\n","declType":"Array<BlockT | undefined>"},{"id":"UI.TreeList/selectItem","name":"selectItem","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Blocks/TreeList.d.ts","line":16,"code":"selectItem(item: BlockT | undefined): void;","doc":"<p>Select given item (block), and immediately deselect others if <code>.selectionMode</code> is <code>ItemClick</code> or <code>ItemFocus</code>; does <em>not</em> check if the item is included in <code>.items</code> at all for performance reasons.</p>\n","declType":"void"},{"id":"UI.TreeList/selectedKey","name":"selectedKey","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/TreeList.d.ts","line":18,"code":"selectedKey: string | undefined;","doc":"<p>Key (string value) of selected item, if any (observable); see <code>TreeList.BlockItem/key</code>; if set to a string value, all items in the hierarchy will be checked for a matching key, and selected or deselected; for selected items, parent items will be expanded automatically; input focus will be removed from deselected items as well, but selected items are not focused automatically.</p>\n","declType":"string | undefined"},{"id":"UI.TreeList/beforeFirstRender","name":"beforeFirstRender","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Blocks/TreeList.d.ts","line":12,"code":"protected beforeFirstRender(renderer: ComponentRenderer<this, any>): void;","doc":"<p>Method that is called immediately after the renderer for this list is constructed; adds observers for item selection.</p>\n","isProtected":true,"declType":"void"},{"id":"UI.TreeList/ItemCollapsed","name":"ItemCollapsed","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Blocks/TreeList.d.ts","line":28,"code":"readonly ItemCollapsed: ComponentSignal.Emittable<TreeList.ItemEvent<any>>;","doc":"<p>Signal emitted when a tree list item is collapsed, while displayed on screen.</p>\n","declType":"ComponentSignal.Emittable<TreeList.ItemEvent<any>>","isSignal":true},{"id":"UI.TreeList/ItemExpanded","name":"ItemExpanded","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Blocks/TreeList.d.ts","line":30,"code":"readonly ItemExpanded: ComponentSignal.Emittable<TreeList.ItemEvent<any>>;","doc":"<p>Signal emitted when a tree list item is expanded, while displayed on screen.</p>\n","declType":"ComponentSignal.Emittable<TreeList.ItemEvent<any>>","isSignal":true},{"id":"UI.TreeList/SelectionChange","name":"SelectionChange","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Blocks/TreeList.d.ts","line":26,"code":"readonly SelectionChange: ComponentSignal.Emittable<TreeList.ItemEvent<any>>;","doc":"<p>Signal emitted when the list selection changes, while displayed on screen.</p>\n","declType":"ComponentSignal.Emittable<TreeList.ItemEvent<any>>","isSignal":true}],"isNamespace":true,"inherits":["UI.Component.addStyleOverride","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Component/contains","UI.Component/displayOptions","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Component/hoverState","UI.Component/id","UI.Component/initialize","UI.Component/out","UI.Block/overlayPosition","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/setFormValues","UI.Component/shadowEffect","UI.Component/style","UI.Component/uid","UI.Component/width","UI.Component/Renderer","UI.Component/createComponentSignal","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed"]},{"id":"UI.TreeListFoldHandler","name":"TreeListFoldHandler","isClass":true,"file":"dist/core/typings/UI/Components/Blocks/TreeList.d.ts","line":73,"code":"class TreeListFoldHandler<T extends TreeList.BlockItem> extends ComponentSignalHandler<TreeList.ItemEvent<T>>","doc":"<p>Constructor for a tree list fold (collapse/expand) event handler.</p>\n","extends":["UI.ComponentSignalHandler"],"typeParams":["T extends TreeList.BlockItem"],"items":[],"inherits":["UI.ComponentSignalHandler.-call","UI.ComponentSignalHandler/connectTo","UI.ComponentSignalHandler/isEventHandler"]},{"id":"UI.TreeListRow","name":"TreeListRow","isClass":true,"file":"dist/core/typings/UI/Components/Blocks/TreeListRow.d.ts","line":3,"code":"class TreeListRow extends CloseRow implements TreeList.BlockItem","doc":"<p>Represents a tree list row, with an optional list of sub rows; implements the <code>TreeList.BlockItem</code> interface.</p>\n","extends":["UI.CloseRow"],"items":[{"id":"UI.TreeListRow.HEIGHT","name":"HEIGHT","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/TreeListRow.d.ts","line":11,"code":"static HEIGHT: string;","doc":"<p>Default height for new instances (CSS length, initially 1.75em).</p>\n","declType":"string"},{"id":"UI.TreeListRow.ItemData","name":"ItemData","isInterface":true,"file":"dist/core/typings/UI/Components/Blocks/TreeListRow.d.ts","line":49,"code":"interface ItemData","doc":"<p>Interface definition of the source data that can be used to construct a <code>TreeListRow</code> instance and its children; actual objects may contain more state information such as an instance of a linked (view) model, however either a <code>content</code> array or a <code>name</code> property is required.</p>\n","isStatic":true,"items":[{"id":"UI.TreeListRow.ItemData/autoExpand","name":"autoExpand","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/TreeListRow.d.ts","line":61,"code":"autoExpand?: boolean;","doc":"<p>True if the created tree list row should be automatically expanded to reveal sub items when rendered.</p>\n","declType":"boolean"},{"id":"UI.TreeListRow.ItemData/content","name":"content","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/TreeListRow.d.ts","line":53,"code":"content?: ComponentFactory.SpecList;","doc":"<p>Row content to be displayed for this item, as a factory initializer spec: an array containing strings, <code>TextLabelFactory</code> instances, <code>Icon</code> instances or factories, etc.</p>\n","declType":"ComponentFactory.SpecList"},{"id":"UI.TreeListRow.ItemData/icon","name":"icon","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/TreeListRow.d.ts","line":57,"code":"icon?: string;","doc":"<p>Name of the icon displayed at the start of the row (after the open/closed icon, if any).</p>\n","declType":"string"},{"id":"UI.TreeListRow.ItemData/items","name":"items","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/TreeListRow.d.ts","line":59,"code":"items?: TreeListRow.ItemData[];","doc":"<p>(Observable) array of sub items to be displayed; child instances of <code>TreeListRow</code> are automatically created for these items upon initialization; if this property is undefined, the tree list row will be displayed as a leaf item; if this array is not observable, the list of sub items will not be updated automatically.</p>\n","declType":"TreeListRow.ItemData[]"},{"id":"UI.TreeListRow.ItemData/key","name":"key","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/TreeListRow.d.ts","line":51,"code":"key?: string;","doc":"<p>Optional key (identifier string) of the item.</p>\n","declType":"string"},{"id":"UI.TreeListRow.ItemData/name","name":"name","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/TreeListRow.d.ts","line":55,"code":"name?: string;","doc":"<p>Item display name, displayed in a <code>WideLabel</code> component if <code>content</code> is undefined.</p>\n","declType":"string"}]},{"id":"UI.TreeListRow.REM_GUTTER","name":"REM_GUTTER","isStatic":true,"isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/TreeListRow.d.ts","line":13,"code":"static REM_GUTTER: number;","doc":"<p>Default gutter width for new instances (CSS length in rem units, initially 1.5).</p>\n","declType":"number"},{"id":"UI.TreeListRow.arrayFromBinding","name":"arrayFromBinding","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Blocks/TreeListRow.d.ts","line":7,"code":"static arrayFromBinding(sourcePath: string, openIcon: string, closedIcon: string, remGutter?: number, height?: string, batchSize?: number): ArrayBinding<Component>;","doc":"<p>Create a new <code>ArrayBinding</code> for given property name/path on the base component, which should contain an array of unique tree item data objects; the binding resolves to an observable array of <code>TreeListRow</code> instances; for use in a component initializer; set the <code>batchSize</code> argument to a value greater than 0 to create rows in batches for faster initial rendering.</p>\n","declType":"ArrayBinding<Component>"},{"id":"UI.TreeListRow.arrayFromItems","name":"arrayFromItems","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/core/typings/UI/Components/Blocks/TreeListRow.d.ts","line":5,"code":"static arrayFromItems(itemData: TreeListRow.ItemData[], openIcon: string, closedIcon: string, remGutter?: number, height?: string): TreeListRow[];","doc":"<p>Create an <em>array</em> of tree list row components from the given array of tree item data objects, with given icons and measurements.</p>\n","declType":"TreeListRow[]"},{"id":"UI.TreeListRow.constructor","name":"new TreeListRow","hasParams":true,"isCtor":true,"file":"dist/core/typings/UI/Components/Blocks/TreeListRow.d.ts","line":9,"code":"constructor(itemData: TreeListRow.ItemData, openIcon: string, closedIcon: string, remGutter?: number, height?: string, batchSize?: number);","doc":"<p>Creates a new tree list row for given item data, with given open/closed icon names and measurements; set the <code>batchSize</code> argument to a value greater than 0 to create child rows in batches for faster initial rendering.</p>\n"},{"id":"UI.TreeListRow/closedIcon","name":"closedIcon","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/TreeListRow.d.ts","line":23,"code":"closedIcon: string;","doc":"<p>Name of the icon that is used in front of rows that have a <code>treeListItems</code> array and are currently collapsed (see <code>Icon/icon</code> property on <code>Icon</code>; observed).</p>\n","declType":"string"},{"id":"UI.TreeListRow/collapsed","name":"collapsed","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/TreeListRow.d.ts","line":27,"code":"collapsed: boolean;","doc":"<p>True if this row is collapsed (defaults to true; observable).</p>\n","declType":"boolean"},{"id":"UI.TreeListRow/content","name":"content","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Blocks/TreeListRow.d.ts","line":31,"code":"readonly content: ControlElement[];","doc":"<p>Tree list row content; automatically generated based on <code>itemData</code> and its properties.</p>\n","declType":"ControlElement[]"},{"id":"UI.TreeListRow/itemData","name":"itemData","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/TreeListRow.d.ts","line":15,"code":"itemData: TreeListRow.ItemData;","doc":"<p>Item data for this row (observed as a shallow reference, i.e. item data properties are not automatically observed, but the reference to the object itself is).</p>\n","declType":"TreeListRow.ItemData"},{"id":"UI.TreeListRow/key","name":"key","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Blocks/TreeListRow.d.ts","line":17,"code":"readonly key: string | undefined;","doc":"<p>Item key for this row (read-only, taken directly from the <code>itemData</code> object; observable).</p>\n","declType":"string | undefined"},{"id":"UI.TreeListRow/openIcon","name":"openIcon","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/TreeListRow.d.ts","line":21,"code":"openIcon: string;","doc":"<p>Name of the icon that is used in front of rows that have a <code>treeListItems</code> array and are not collapsed (see <code>Icon/icon</code> property on <code>Icon</code>; observed).</p>\n","declType":"string"},{"id":"UI.TreeListRow/remGutter","name":"remGutter","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/TreeListRow.d.ts","line":19,"code":"remGutter: number;","doc":"<p>Indent width, i.e. width of space before nested row content, and icon width (CSS length in rem units; observed).</p>\n","declType":"number"},{"id":"UI.TreeListRow/treeListItems","name":"treeListItems","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/UI/Components/Blocks/TreeListRow.d.ts","line":29,"code":"readonly treeListItems: TreeListRow[];","doc":"<p>List of rows displayed below this row in the hierarchical structure of a <code>TreeList</code> component; automatically generated based on <code>itemData</code> and its properties.</p>\n","declType":"TreeListRow[]"},{"id":"UI.TreeListRow/treeListRowParent","name":"treeListRowParent","isProperty":true,"file":"dist/core/typings/UI/Components/Blocks/TreeListRow.d.ts","line":25,"code":"treeListRowParent?: TreeListRow;","doc":"<p>Reference to the <code>TreeListRow</code> instance that created this row, if any, i.e. the parent row in the visual hierarchy; this property is set automatically by a parent constructor, and by the static methods <code>arrayFromItems</code>, and <code>arrayFromBinding</code>; otherwise it <em>must</em> be set before rendering.</p>\n","declType":"TreeListRow"}],"isNamespace":true,"inherits":["UI.Component.addStyleOverride","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Row/appendChild","UI.Component/contains","UI.Component/displayOptions","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Row/getChildren","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Row/horzAlign","UI.Component/hoverState","UI.Component/id","UI.Component/initialize","UI.Row/initializeWith","UI.Component/out","UI.Block/overlayPosition","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/setFormValues","UI.Component/shadowEffect","UI.CloseRow/spacing","UI.Component/style","UI.Component/uid","UI.CloseRow/verticalSpacing","UI.Component/width","UI.Component/Renderer","UI.Component/beforeFirstRender","UI.Component/createComponentSignal","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed"]},{"id":"UI.TreeListSelectionHandler","name":"TreeListSelectionHandler","isClass":true,"file":"dist/core/typings/UI/Components/Blocks/TreeList.d.ts","line":70,"code":"class TreeListSelectionHandler<T extends TreeList.BlockItem> extends ComponentSignalHandler<TreeList.ItemEvent<T>>","doc":"<p>Constructor for a tree list selection event handler.</p>\n","extends":["UI.ComponentSignalHandler"],"typeParams":["T extends TreeList.BlockItem"],"items":[],"inherits":["UI.ComponentSignalHandler.-call","UI.ComponentSignalHandler/connectTo","UI.ComponentSignalHandler/isEventHandler"]},{"id":"UI.TwoWayBinding","name":"TwoWayBinding","isClass":true,"file":"dist/core/typings/UI/Binding.d.ts","line":8,"code":"class TwoWayBinding<ResultT> extends Binding<ResultT>","doc":"<p>Represents a two-way binding (<code>Binding</code> that also includes a setter on the proxy property).</p>\n","extends":["UI.Binding"],"typeParams":["ResultT"],"items":[{"id":"UI.TwoWayBinding.constructor","name":"new TwoWayBinding","hasParams":true,"isCtor":true,"file":"dist/core/typings/UI/Binding.d.ts","line":10,"code":"constructor(sourcePath?: string, getTransform?: (value: any, baseComponent: Component) => (ResultT | Async.ObservableValue<ResultT> | PromiseLike<ResultT>), setTransform?: (value: any, baseComponent: Component) => any);","doc":"<p>Create a new two-way binding based on the given property name/path (see <code>new Binding</code>), and optionally a transformation function, invoked each time a new value is being set (outside of any observable context); if no path is specified, the name of the initializer property that contains this binding is used, if any.</p>\n"},{"id":"UI.TwoWayBinding/observeOn","name":"observeOn","hasParams":true,"isMethod":true,"file":"dist/core/typings/UI/Binding.d.ts","line":12,"code":"observeOn(component: Component, name?: string): Async.ObservableValue<ResultT>;","doc":"<p>Make an ObservableValue that is bound to the value on given component (used by factory initializer to apply binding).</p>\n","declType":"Async.ObservableValue<ResultT>"}],"textSeeAlso":"UI.Binding, UI.ArrayBinding, UI.bind, UI.bind2, UI.bindComponents","text":[{"content":"<p>An instance of this class is commonly obtained as the result of the <code>bind2</code> function.</p>\n"}],"sourceIdx":18},{"id":"UI.WideLabel","name":"WideLabel","isClass":true,"file":"dist/core/typings/UI/Components/Controls/Label.d.ts","line":49,"code":"class WideLabel extends Label","doc":"<p>Stretched label control: a label that expands horizontally, while not breaking across lines (uses ellipsis if available).</p>\n","extends":["UI.Label"],"items":[{"id":"UI.WideLabel/shrinkwrap","name":"shrinkwrap","isProperty":true,"file":"dist/core/typings/UI/Components/Controls/Label.d.ts","line":51,"code":"shrinkwrap: boolean;","doc":"<p>Set to true to shrink horizontally (default false; observed).</p>\n","declType":"boolean"}],"inherits":["UI.Component.addStyleOverride","UI.Label.withText","UI.Label.constructor","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Component/appendChild","UI.Label/badge","UI.Component/contains","UI.Component/displayOptions","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Component/getChildren","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Component/hoverState","UI.Label/icon","UI.Component/id","UI.Component/initialize","UI.Label/initializeWith","UI.Component/out","UI.Label/remGutter","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/setFormValues","UI.Component/shadowEffect","UI.Component/style","UI.Label/text","UI.Label/textAfter","UI.Label/textBefore","UI.Label/tooltipText","UI.Component/uid","UI.ControlElement/width","UI.ControlElement/wrapText","UI.Component/beforeFirstRender","UI.Component/createComponentSignal","UI.Component/Renderer","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed"]},{"id":"UI.UIValueOrAsync","name":"UIValueOrAsync","isType":true,"file":"dist/core/typings/UI/Components/ComponentFactory.d.ts","line":3,"code":"type UIValueOrAsync<T> = T | Async.ObservableValue<T> | PromiseLike<T> | Binding<any>;","doc":"<p>Type definition used by component initializers, that wraps a type as well as the same type within an observable value, promise, or binding.</p>\n","typeParams":["T"],"declType":"T | Async.ObservableValue<T> | PromiseLike<T> | Binding<any>"},{"id":"UI.bind","name":"bind","hasParams":false,"isFunction":true,"file":"dist/core/typings/UI/Binding.d.ts","line":26,"code":"function bind(): Binding<any>;\nfunction bind(sourcePath: string): Binding<any>;\nfunction bind<T>(sourcePath: string, getTransform: (value: any) => T): Binding<T>;","doc":"<p>[1]. Create a new <code>Binding</code> for a property on the base component with the same name as the component initializer property.</p>\n<p>[2]. Create a new <code>Binding</code> for given property name/path on the base component; for use in a component initializer.</p>\n<p>[3]. Create a new <code>Binding</code> for given property name/path on the base component, and transformation function; for use in a component initializer.</p>\n","declType":"Binding<any> | Binding<any> | Binding<T>","count":3},{"id":"UI.bind2","name":"bind2","hasParams":false,"isFunction":true,"file":"dist/core/typings/UI/Binding.d.ts","line":34,"code":"function bind2(): TwoWayBinding<any>;\nfunction bind2(sourcePath: string): TwoWayBinding<any>;\nfunction bind2<T>(sourcePath: string, getTransform: (value: any) => T, setTransform?: (value: any) => any): Binding<T>;","doc":"<p>[1]. Create a new <code>TwoWayBinding</code> for a property on the base component with the same name as the component initializer property.</p>\n<p>[2]. Create a new <code>TwoWayBinding</code> for given property name/path on the base component; for use in a component initializer.</p>\n<p>[3]. Create a new <code>TwoWayBinding</code> for given property name/path on the base component, and transformation function(s); for use in a component initializer.</p>\n","declType":"TwoWayBinding<any> | TwoWayBinding<any> | Binding<T>","count":3},{"id":"UI.bindComponents","name":"bindComponents","hasParams":true,"isFunction":true,"file":"dist/core/typings/UI/Binding.d.ts","line":40,"code":"function bindComponents<ComponentT extends Component>(sourcePath: string, componentClass: { new (value: any, baseComponent: Component): ComponentT; }, uniqueValues?: boolean, batchSize?: number): ArrayBinding<Component>;","doc":"<p>Create a new <code>ArrayBinding</code> for given property name/path on the base component, which should contain an array; the binding resolves to an observable array of instances of given <code>Component</code> class (with a constructor that takes one or two arguments: the original array element value, and optionally the base component reference); for use in a component initializer; uses <code>mapAsync</code> on the observable array by default: deleting a value in the middle of the array will trigger reinstantiation of all components after it; to use <code>mapAsyncValues</code> for better results with arrays of objects, set the <code>uniqueValues</code> argument to true; to create components asynchronously in batches, set the <code>batchSize</code> argument to a number; all arrays are <em>lazily bound</em>, i.e. elements remain undefined until their <code>length</code> property has been evaluated.</p>\n","typeParams":["ComponentT extends Component"],"declType":"ArrayBinding<Component>","text":[{"content":"<p>See this <a href=\"~/samples/bindComponents\">example</a> for an advanced use case of bound component lists.</p>\n"}],"sourceIdx":20},{"id":"UI.tl","name":"tl","hasParams":true,"isFunction":true,"file":"dist/core/typings/UI/Components/TextLabelFactory.d.ts","line":24,"code":"function tl(strings: TemplateStringsArray, ...values: any[]): TextLabelFactory;\nfunction tl(text: string | Async.ObservableValue<string>, baseClass?: typeof Label): TextLabelFactory;\nfunction tl(getter: () => (string | Async.ObservableValue<string>), baseClass?: typeof Label): TextLabelFactory;\nfunction tl(getter: Binding<string>, baseClass?: typeof Label): TextLabelFactory;","doc":"<p>[1]. Tagged template string function that returns a text label factory instance to be used with component factory content lists; functions in the expanded values (i.e. result of <code>${...}</code>), and bindings (instanceof Binding), are used as getters for nested observable string values (e.g. <code>${() =&gt; ...}</code> is observed and converted to a string); pluralization forms can be substituted based on existing arguments by number (base 1) using e.g. <code>%{1|is|are}</code>; prefixes can be used to change the type of component factory created and its styles and properties:</p>\n<ul>\n<li><code>{p}</code> for Paragraph,</li>\n<li><code>{h1-6}</code> for Heading,</li>\n<li><code>{w}</code> for WideLabel,</li>\n<li><code>{b|i|u}</code> for text styles,</li>\n<li><code>{left|center|right}</code> for alignment,</li>\n<li><code>{#...}</code> for text colors,</li>\n<li><code>{nnn}</code> for font weights,</li>\n<li><code>{icon:...}</code> for icons,</li>\n<li><code>{icon:... property-name=...}</code> for icon style properties,</li>\n<li><code>{property-name=...}</code> or <code>{propertyName=...}</code> for individual style properties,</li>\n<li><code>{.classname}</code> and <code>{.class1.class2}</code> for class name(s),</li>\n<li><code>{...%|...em|...rem| etc.}</code> for font sizes, and</li>\n<li><code>{l:...%|...rem| etc.}</code> for Label with given width;</li>\n</ul>\n<p>Prefixes can be combined using the pipe | symbol and may also be the result of an expanded value (i.e. first ${…} part).</p>\n<p>[2]. Simplified version of tagged template helper .tl`…` with a single piece of text, possibly with a base Label class that is used if given string does not override the class using e.g. <code>{p}</code> or <code>{h1}</code>.</p>\n<p>[3]. Simplified version of tagged template helper .tl`…` observing a single piece of text, possibly with a base Label class that is used if given string does not override the class using e.g. <code>{p}</code> or <code>{h1}</code>.</p>\n<p>[4]. Simplified version of tagged template helper .tl`…` observing a single binding, possibly with a base Label class that is used if given string does not override the class using e.g. <code>{p}</code> or <code>{h1}</code>.</p>\n","declType":"TextLabelFactory | TextLabelFactory | TextLabelFactory | TextLabelFactory","count":4},{"id":"UI.mapComponentRenderer","name":"mapComponentRenderer","hasParams":true,"isFunction":true,"file":"dist/core/typings/UI/Components/ComponentRenderer.d.ts","line":46,"code":"function mapComponentRenderer<ComponentT extends Component>(componentClass: typeof Component & { new (...args: any[]): ComponentT; }): (target: new (component: ComponentT) => ComponentRenderer<ComponentT, any>) => void;","doc":"<p><em>Class decorator</em>, maps the decorated <code>ComponentRenderer</code> class to a <code>Component</code> class as its primary renderer; the renderer class constructor must have a single argument, being the component to be rendered; overrides previously mapped renderer entirely, to extend super class renderer functionality inject a class that extends the previous renderer class [decorator].</p>\n","typeParams":["ComponentT extends Component"],"declType":"(target: new (component: ComponentT) => ComponentRenderer<ComponentT, any>) => void","isDecorator":true}],"text":[{"content":"<p>The UI sub module exports classes and functions that can be used to create and update UI components, and respond to user input.</p>\n<p><a href=\"~/start/ui\"><i class=\"fa fa-play\"></i>Get started with the <code>UI</code> module</a></p>\n"}],"isNamespace":true,"sourceIdx":28,"toc":["UI.DOM"]},{"name":"Setting up a project manually","id":"start/setup/files","textSort":"02","text":[{"content":"<p>If you choose not to use Yeoman, you can set up a project structure by yourself. This isn’t such a laborious process as for some other web app frameworks, because Typescene itself has no dependencies and isn’t picky about the way you organize, compile, or bundle your TypeScript code.</p>\n<p>Still, there are a number of different tools involved. You’ll need to complete the following steps:</p>\n<ol>\n<li>Create a project folder</li>\n<li>Set up NPM and add dependencies</li>\n<li>Configure TypeScript and add your code</li>\n<li>Configure a bundler</li>\n</ol>\n"},{"title":"Preparing your project files","content":""},{"title":"Creating a project folder","subHeading":true,"type":"task","content":"<p>Your application code needs to live in a folder on your hard drive, along with its dependencies (i.e. libraries and tools, such as Typescene itself).</p>\n<p>Create a folder using the Finder (Mac), Explorer (Windows) or the terminal:</p>\n<pre><code class=\"language-bash\">mkdir my-project\ncd my-project\n</code></pre>\n"},{"title":"Setting up NPM","subHeading":true,"type":"task","content":"<p>Your project is actually a <em>package</em> just by itself. This means it can refer to other packages as its dependencies, which are all managed by the NPM package manager.</p>\n<p>To configure an NPM package, you need a <code>package.json</code> file. Here’s a version of the package configuration file that can be used to set up a simple Typescene project, and loads up Webpack as a bundler:</p>\n<pre><code class=\"language-json\">{\n  &quot;name&quot;: &quot;my-project&quot;,\n  &quot;private&quot;: true,\n  &quot;version&quot;: &quot;0.1.0&quot;,\n  &quot;scripts&quot;: {\n    &quot;build&quot;: &quot;webpack -p&quot;,\n    &quot;start:dev&quot;: &quot;webpack-dev-server -d --open&quot;\n  },\n  &quot;devDependencies&quot;: {\n    &quot;@typescene/dom&quot;: &quot;0.9&quot;,\n    &quot;typescript&quot;: &quot;2&quot;,\n    &quot;webpack&quot;: &quot;3&quot;,\n    &quot;webpack-dev-server&quot;: &quot;2&quot;,\n    &quot;ts-loader&quot;: &quot;2&quot;,\n    &quot;html-webpack-plugin&quot;: &quot;2&quot;\n  }\n}\n</code></pre>\n<p>With this <code>package.json</code> file, NPM is able to initialize your package and install its dependencies. At the command prompt (or using your IDE, if it has NPM integration), run the following command:</p>\n<pre><code class=\"language-bash\">npm install\n</code></pre>\n<p>This creates a <code>node_modules/</code> folder within your project folder.</p>\n"},{"title":"Configuring TypeScript","subHeading":true,"type":"task","content":"<p>TypeScript needs its own configuration file. At a minimum, you’ll need to specify the following options:</p>\n<ul>\n<li>Output should be generated in the ‘ES5’ version of the JavaScript standard, for general compatibility with IE9+ and all modern browsers.</li>\n<li>Module output should follow the <em>newer</em> ‘ES6’ standard (also known as ‘ES2015’), for better results with Webpack. TypeScript should still look for modules in the standard NPM directories though (the ‘Node’ module resolution model).</li>\n<li>Typescene uses a TypeScript feature called ‘decorators’, which needs to be declared separately.</li>\n</ul>\n<p>Putting it all together, your project’s <code>tsconfig.json</code> file should at least contain the following properties:</p>\n<pre><code class=\"language-json\">{\n  &quot;compilerOptions&quot;: {\n    &quot;target&quot;: &quot;es5&quot;,\n    &quot;module&quot;: &quot;es2015&quot;,\n    &quot;moduleResolution&quot;: &quot;node&quot;,\n    &quot;strict&quot;: true,\n    &quot;experimentalDecorators&quot;: true\n  }\n}\n</code></pre>\n<p>You can place this file at the root of your project folder, but it’s generally better to keep it right next to your source code, so we’ll put in a <code>src/</code> sub folder.</p>\n<p>You can use the <code>src/</code> folder to contain all of your application code. It’s a good idea to create more folders <em>within</em> this folder for all parts and/or features of your application, but for this example you’ll need only a single file, <code>src/main.ts</code>:</p>\n<pre><code class=\"language-typescript\">import { App } from &quot;@typescene/dom&quot;;\nApp.showMessageBox(&quot;Hi&quot;, &quot;Hello, world!&quot;);\n</code></pre>\n"},{"title":"Compiling and running your code","content":""},{"title":"Configuring Webpack as a bundler","subHeading":true,"type":"task","content":"<p>To run your application, you’ll need to load it in a browser. This means you need an <code>.html</code> file, along with a single <code>.js</code> file that contains all of your application code <em>as well as</em> the Typescene framework itself, since otherwise the browser wouldn’t know how to load any this code separately.</p>\n<p><a href=\"https://github.com/webpack/webpack\" target=\"_blank\">Webpack</a> is a great tool for producing a single JavaScript file (a <em>bundle</em>). It concatenates, and optionally minifies all your code in one step. As a bonus, <code>ts-loader</code> compiles TypeScript files, <code>html-webpack-plugin</code> generates an HTML file, and <code>webpack-dev-server</code> can be used to auto-refresh this page during development.</p>\n<p>Webpack reads its configuration from <code>webpack.config.js</code> in your project root folder by default:</p>\n<pre><code class=\"language-javascript\">var path = require(&quot;path&quot;);\nvar HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;);\nmodule.exports = {\n    entry: &quot;./src/main.ts&quot;,\n    output: {\n        filename: &quot;bundle.js&quot;,\n        path: path.resolve(__dirname, &quot;dist&quot;)\n    },\n    resolve: {\n        extensions: [&quot;*&quot;, &quot;.js&quot;, &quot;.ts&quot;],\n    },\n    module: {\n      rules: [\n        { test: /\\.ts$/, loader: &quot;ts-loader&quot; }\n      ]\n    },\n    plugins: [\n      new HtmlWebpackPlugin({ title: &quot;My Application&quot; })\n    ]\n}\n</code></pre>\n"},{"type":"note","content":"<p><i class=\"fa fa-hand-o-right\"></i><strong>Note:</strong> Using Webpack to bundle the application output is optional. You can use any other method to load your TypeScript or JavaScript code into a browser (or application platform such as Electron or a mobile app framework based on Web technologies), as long as the Typescene DOM package code is either included in your <code>.js</code> file(s), or loaded separately as a <code>.min.js</code> file (found in the root folder of the <code>@typescene/dom</code> NPM package).</p>\n"},{"title":"Running your application","subHeading":true,"type":"task","content":"<p>You can now use NPM scripts to compile and run your app:</p>\n<ul>\n<li><code>npm run build</code> to build for production, and</li>\n<li><code>npm run start:dev</code> to start a Webpack development server.</li>\n</ul>\n"},{"title":"Next steps","content":"<p>The code in <code>src/main.ts</code> doesn’t really do anything yet. Start developing your UI by writing your own components.</p>\n<p><a href=\"~/start/ui\"><i class=\"fa fa-play\"></i>Get started creating UI components</a></p>\n"}],"sourceIdx":34,"textParent":"start/setup"},{"name":"Array bindings","id":"start/ui/bindings/arrays","textSort":"02","text":[],"sourceIdx":37,"textParent":"start/ui/bindings"},{"name":"Component factories","id":"start/ui/factories","textSort":"02","text":[{"type":"intro","content":"<p>Streamline the creation of UI component structures with component factories.</p>\n"}],"sourceIdx":41,"textParent":"start/ui"},{"name":"Getting Started","id":"start","textSort":"02","textAutoOpen":"true","textSkipTOC":"true","text":[{"type":"intro","content":"<p>Browse the following sections to familiarize yourself with the most important concepts to get started developing with Typescene.</p>\n"},{"title":"First steps","content":"<dl>\n<dt><a href=\"~/start/setup\"><i class=\"fa fa-file-text-o\"></i>Setting up a new project</a></dt>\n<dd>Initialize a folder on your computer to contain your web app’s source files, and set up dependencies for compilation and deployment.</dd>\n<dt><a href=\"~/start/ui\"><i class=\"fa fa-file-text-o\"></i>Using UI components</a></dt>\n<dd>Learn how to create and combine UI components, and respond to user interactions through event handling and bindings.</dd>\n<dt><a href=\"~/start/async\"><i class=\"fa fa-file-text-o\"></i>Understanding Async</a></dt>\n<dd>Get familiar with the basic concepts of the Async module. Learn how to use them in your own application code.</dd>\n<dt><a href=\"~/start/app\"><i class=\"fa fa-file-text-o\"></i>Making a web app</a></dt>\n<dd>See how everything comes together with the App module’s classes and functions.</dd>\n</dl>\n"}],"sourceIdx":47,"toc":["start/setup","start/ui","start/async","start/app"]},{"name":"App","id":"App","textParent":"reference","textSort":"03","items":[{"id":"App.Activation","name":"Activation","isClass":true,"file":"dist/core/typings/App/Activity/Activation.d.ts","line":1,"code":"class Activation","doc":"<p>Encapsulates a command to start an activity; should be extended into unique classes that <code>Activity</code> classes can be mapped to using <code>mapActivation</code>, and which can be mapped to routes using <code>mapRoute</code>; the latter will enable saving parts of a path (URL) to properties on the activation object.</p>\n","items":[{"id":"App.Activation.route","name":"route","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/core/typings/App/Activity/Activation.d.ts","line":3,"code":"static route(path: string): Activation | undefined;","doc":"<p>Returns a new activation object for the given route path (must start with <code>/</code> or <code>#/</code>), or undefined if none of the currently mapped routes match.</p>\n","declType":"Activation | undefined"},{"id":"App.Activation.constructor","name":"new Activation","hasParams":true,"isCtor":true,"file":"dist/core/typings/App/Activity/Activation.d.ts","line":5,"code":"constructor(properties?: object);","doc":"<p>Create a new activation object, which can be used (with a derived class) to start an activity based on the Activation class type, and stored property values; copies all properties from the given object, if any.</p>\n"},{"id":"App.Activation/getActivityAsync","name":"getActivityAsync","hasParams":false,"isMethod":true,"file":"dist/core/typings/App/Activity/Activation.d.ts","line":7,"code":"getActivityAsync(): PromiseLike<Activity | undefined>;","doc":"<p>Returns a promise for an activity instance, or for undefined if no <code>Activity</code> class is mapped to this activation type; this method is injected by <code>mapActivation</code>, but can also be overridden directly to customize the behavior of creating activities for activation objects (e.g. testing for valid IDs, or lazy loading).</p>\n","declType":"PromiseLike<Activity | undefined>","isAsync":true},{"id":"App.Activation/getPath","name":"getPath","hasParams":false,"isMethod":true,"file":"dist/core/typings/App/Activity/Activation.d.ts","line":9,"code":"getPath(): string | undefined;","doc":"<p>Returns the full path that will route to this activation object (or the path that this object was actually created for, using <code>mapRoute</code>), or undefined if no route has been mapped to this activation class or if one of the route parameters is missing.</p>\n","declType":"string | undefined"},{"id":"App.Activation.-index-string","name":"[string]","isProperty":true,"file":"dist/core/typings/App/Activity/Activation.d.ts","line":11,"code":"[p: string]: any;","doc":"<p>No description</p>\n"}]},{"id":"App.Activity","name":"Activity","isClass":true,"file":"dist/core/typings/App/Activity/Activity.d.ts","line":2,"code":"class Activity extends Async.ObservableObject","doc":"<p>Activity base class, represents a UI activity; to be extended by application code, and registered using an activation decorator (i.e. <code>mapActivation</code> or <code>mapRoute</code>); can be linked to a view class to be displayed by decorating the view (<code>UI.Component</code> or <code>UI.Page</code> class using <code>mapViewActivity</code>).</p>\n","extends":["Async.ObservableObject"],"items":[{"id":"App.Activity.ActivityOptions","name":"ActivityOptions","isInterface":true,"file":"dist/core/typings/App/Activity/Activity.d.ts","line":34,"code":"interface ActivityOptions","doc":"<p>Options for an activity that determine its behavior in the activity stack.</p>\n","isStatic":true,"items":[{"id":"App.Activity.ActivityOptions/isBackgroundActivity","name":"isBackgroundActivity","isProperty":true,"file":"dist/core/typings/App/Activity/Activity.d.ts","line":42,"code":"isBackgroundActivity?: boolean;","doc":"<p>Set to true to mark this activity as a background activity; i.e. it should not be started directly, and it should be skipped when navigating back in history (enforced by <code>Application</code>, not <code>ActivityStack</code> itself, to allow background activities in the foreground temporarily, and to enable skipping past a first background activity on the stack by exiting the application).</p>\n","declType":"boolean"},{"id":"App.Activity.ActivityOptions/isHubActivity","name":"isHubActivity","isProperty":true,"file":"dist/core/typings/App/Activity/Activity.d.ts","line":38,"code":"isHubActivity?: boolean;","doc":"<p>Set to true to require this activity to be in the foreground, or move up to it, when used as a parent activity; i.e. when starting or resuming a child activity, all activities on top of the hub activity are suspended and replaced with the child activity; can be used to prevent buildup of activities on the history stack and therefore possible memory leaks.</p>\n","declType":"boolean"},{"id":"App.Activity.ActivityOptions/isRootActivity","name":"isRootActivity","isProperty":true,"file":"dist/core/typings/App/Activity/Activity.d.ts","line":40,"code":"isRootActivity?: boolean;","doc":"<p>Set to true to allow only one copy of an activity on the stack; i.e. when attempting to push an instance that is already on the stack, the stack is transitioned <em>up</em> to the existing instance instead; use with a singleton activity to implement e.g. an application home activity.</p>\n","declType":"boolean"},{"id":"App.Activity.ActivityOptions/isTransient","name":"isTransient","isProperty":true,"file":"dist/core/typings/App/Activity/Activity.d.ts","line":44,"code":"isTransient?: boolean;","doc":"<p>Set to true to mark this activity as a foreground-only activity; i.e. it will be removed automatically before another activity is started (in replace mode, the new activity replaces the activity on the stack before the transient activity); can be used for e.g. modal dialogs, drawers, and messages.</p>\n","declType":"boolean"},{"id":"App.Activity.ActivityOptions/parentActivity","name":"parentActivity","isProperty":true,"file":"dist/core/typings/App/Activity/Activity.d.ts","line":36,"code":"parentActivity?: Activity | typeof Activity;","doc":"<p>Required parent activity, if any; the activity stack will ensure that the required activity (or an instance of given class) exists in its history stack when activating this activity, or insert it before pushing this activity.</p>\n","declType":"Activity | typeof Activity"}]},{"id":"App.Activity.getInstance","name":"getInstance","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/core/typings/App/Activity/Activity.d.ts","line":4,"code":"static getInstance(activation?: Activation | object): Activity;","doc":"<p>Get an instance of this activity class, can be overridden to alter behavior when e.g. pushing a parent activity by class; by default simply constructs the instance without parameters.</p>\n","declType":"Activity"},{"id":"App.Activity.constructor","name":"new Activity","hasParams":true,"isCtor":true,"file":"dist/core/typings/App/Activity/Activity.d.ts","line":6,"code":"constructor(activation?: Activation | object);","doc":"<p>Create an activity instance, using given activation object if any; if the activation object is the result of a route mapping, it contains all routing parameters as string properties; otherwise the activation object may contain any type of data that can be used to initialize the new activity, and replace it with a new instance (following <code>Application.reactivate</code>).</p>\n"},{"id":"App.Activity/activation","name":"activation","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/App/Activity/Activity.d.ts","line":12,"code":"readonly activation: Activation;","doc":"<p>Activation object that was supplied to the constructor when this activity was instantiated (or an activation object that contains all properties of the object that was supplied, if any).</p>\n","declType":"Activation"},{"id":"App.Activity/options","name":"options","isProperty":true,"file":"dist/core/typings/App/Activity/Activity.d.ts","line":16,"code":"options: Activity.ActivityOptions;","doc":"<p>Object that contains options for this activity (observable, never null or undefined).</p>\n","declType":"Activity.ActivityOptions"},{"id":"App.Activity/title","name":"title","isProperty":true,"file":"dist/core/typings/App/Activity/Activity.d.ts","line":14,"code":"title: string | undefined;","doc":"<p>Display title of this activity (observable).</p>\n","declType":"string | undefined"},{"id":"App.Activity/uid","name":"uid","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/App/Activity/Activity.d.ts","line":10,"code":"readonly uid: string;","doc":"<p>Globally unique activity identifier.</p>\n","declType":"string"},{"id":"App.Activity/onCreateAsync","name":"onCreateAsync","hasParams":false,"isMethod":true,"file":"dist/core/typings/App/Activity/Activity.d.ts","line":8,"code":"protected onCreateAsync(): PromiseLike<any> | undefined | void;","doc":"<p>Method that is called asynchronously after this activity is created; override this method to perform any initialization that must be completed before the activity is started; if this method returns a promise, it must be fulfilled <em>before</em> the activity can be pushed to the foreground.</p>\n","isProtected":true,"declType":"PromiseLike<any> | undefined | void","isAsync":true},{"id":"App.Activity/Deactivated","name":"Deactivated","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/App/Activity/Activity.d.ts","line":30,"code":"readonly Deactivated: Signal.Emittable<ActivityTransition>;","doc":"<p>Signal that is emitted after this activity is removed from history, and will not be resumed anymore.</p>\n","declType":"Signal.Emittable<ActivityTransition>","isSignal":true},{"id":"App.Activity/Resumed","name":"Resumed","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/App/Activity/Activity.d.ts","line":28,"code":"readonly Resumed: Signal.Emittable<ActivityTransition>;","doc":"<p>Signal that is emitted after this activity is in foreground (emitted after <code>.Resuming</code>, or after <code>.Starting</code> together with <code>.Started</code>).</p>\n","declType":"Signal.Emittable<ActivityTransition>","isSignal":true},{"id":"App.Activity/Resuming","name":"Resuming","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/App/Activity/Activity.d.ts","line":26,"code":"readonly Resuming: Signal.Emittable<ActivityTransition>;","doc":"<p>Signal that is emitted before this activity is put back in foreground, if any handler throws an error then the previous activity is not suspended.</p>\n","declType":"Signal.Emittable<ActivityTransition>","isSignal":true},{"id":"App.Activity/Started","name":"Started","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/App/Activity/Activity.d.ts","line":20,"code":"readonly Started: Signal.Emittable<ActivityTransition>;","doc":"<p>Signal that is emitted after this activity is pushed to foreground (note that <code>.Resumed</code> will also always be emitted).</p>\n","declType":"Signal.Emittable<ActivityTransition>","isSignal":true},{"id":"App.Activity/Starting","name":"Starting","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/App/Activity/Activity.d.ts","line":18,"code":"readonly Starting: Signal.Emittable<ActivityTransition>;","doc":"<p>Signal that is emitted before this activity is pushed to foreground, if any handler throws an error then the activity is not activated.</p>\n","declType":"Signal.Emittable<ActivityTransition>","isSignal":true},{"id":"App.Activity/Suspended","name":"Suspended","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/App/Activity/Activity.d.ts","line":24,"code":"readonly Suspended: Signal.Emittable<ActivityTransition>;","doc":"<p>Signal that is emitted after this activity is no longer in foreground.</p>\n","declType":"Signal.Emittable<ActivityTransition>","isSignal":true},{"id":"App.Activity/Suspending","name":"Suspending","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/App/Activity/Activity.d.ts","line":22,"code":"readonly Suspending: Signal.Emittable<ActivityTransition>;","doc":"<p>Signal that is emitted before another activity is pushed to foreground, if any handler throws an error then the activity is not suspended.</p>\n","declType":"Signal.Emittable<ActivityTransition>","isSignal":true}],"isNamespace":true,"inherits":["Async.ObservableObject/addObservableProperty","Async.ObservableObject/hasObservableProperty","Async.ObservableObject/PropertyChange"]},{"id":"App.ActivityStack","name":"ActivityStack","isClass":true,"file":"dist/core/typings/App/Activity/ActivityStack.d.ts","line":1,"code":"class ActivityStack","doc":"<p>Represents a stack of activated activities (like browser history).</p>\n","items":[{"id":"App.ActivityStack.Cursor","name":"Cursor","isInterface":true,"file":"dist/core/typings/App/Activity/ActivityStack.d.ts","line":47,"code":"interface Cursor","doc":"<p>No description</p>\n","isStatic":true,"items":[{"id":"App.ActivityStack.Cursor/activity","name":"activity","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/App/Activity/ActivityStack.d.ts","line":50,"code":"readonly activity?: Activity;","doc":"<p>The current activity; if this is undefined, the cursor has moved past the end (bottom) of the stack.</p>\n","declType":"Activity"},{"id":"App.ActivityStack.Cursor/activityStack","name":"activityStack","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/App/Activity/ActivityStack.d.ts","line":48,"code":"readonly activityStack: ActivityStack;","doc":"<p>The activity stack that this cursor was created on.</p>\n","declType":"ActivityStack"},{"id":"App.ActivityStack.Cursor/clone","name":"clone","hasParams":false,"isMethod":true,"file":"dist/core/typings/App/Activity/ActivityStack.d.ts","line":56,"code":"clone(): Cursor;","doc":"<p>Copy this cursor to another instance that can move independently.</p>\n","declType":"Cursor"},{"id":"App.ActivityStack.Cursor/goBack","name":"goBack","hasParams":false,"isMethod":true,"file":"dist/core/typings/App/Activity/ActivityStack.d.ts","line":52,"code":"goBack(): this;","doc":"<p>Move down the stack to the previous activity; returns this.</p>\n","declType":"this"},{"id":"App.ActivityStack.Cursor/goParent","name":"goParent","hasParams":false,"isMethod":true,"file":"dist/core/typings/App/Activity/ActivityStack.d.ts","line":54,"code":"goParent(): this;","doc":"<p>Move down the stack to the current activity’s parent activity, if any; if there is no parent activity, the cursor will move past the end and stop; returns this.</p>\n","declType":"this"}]},{"id":"App.ActivityStack/contains","name":"contains","hasParams":true,"isMethod":true,"file":"dist/core/typings/App/Activity/ActivityStack.d.ts","line":21,"code":"contains(activity: Activity): boolean;","doc":"<p>Returns true if the stack contains given activity.</p>\n","declType":"boolean"},{"id":"App.ActivityStack/getCursor","name":"getCursor","hasParams":false,"isMethod":true,"file":"dist/core/typings/App/Activity/ActivityStack.d.ts","line":29,"code":"getCursor(): ActivityStack.Cursor;","doc":"<p>Create an activity cursor that starts at the top of this stack, and can move back on the stack and to parent activities; if the <code>activity</code> property is undefined, the cursor has reached the end; note that any changes to the stack while the cursor is in use may yield unexpected results.</p>\n","declType":"ActivityStack.Cursor"},{"id":"App.ActivityStack/getHistoryState","name":"getHistoryState","hasParams":false,"isMethod":true,"file":"dist/core/typings/App/Activity/ActivityStack.d.ts","line":15,"code":"getHistoryState(): string;","doc":"<p>Get an ID that represents the current state, for use with <code>.restoreHistoryStateAsync</code>.</p>\n","declType":"string"},{"id":"App.ActivityStack/getParent","name":"getParent","hasParams":true,"isMethod":true,"file":"dist/core/typings/App/Activity/ActivityStack.d.ts","line":17,"code":"getParent<T>(ActivityClass: typeof Activity & { new (...args: any[]): T; }, before?: Activity): T | undefined;","doc":"<p>Get the activity closest to the foreground of the given type, if any (excluding foreground activity itself, and before given activity in second parameter, if any).</p>\n","typeParams":["T"],"declType":"T | undefined"},{"id":"App.ActivityStack/length","name":"length","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/App/Activity/ActivityStack.d.ts","line":25,"code":"readonly length: number;","doc":"<p>The number of activities on the stack (observable).</p>\n","declType":"number"},{"id":"App.ActivityStack/popAsync","name":"popAsync","hasParams":false,"isMethod":true,"file":"dist/core/typings/App/Activity/ActivityStack.d.ts","line":7,"code":"popAsync(): PromiseLike<ActivityTransition>;\npopAsync(activity: Activity): PromiseLike<ActivityTransition | undefined>;","doc":"<p>[1]. Remove the current foreground activity (go back) asynchronously, returns Promise that resolves to the completed transition.</p>\n<p>[2]. Remove the current foreground activity (go back) asynchronously if and only if it is the given activity, returns Promise that resolves to the completed transition, if any.</p>\n","declType":"PromiseLike<ActivityTransition> | PromiseLike<ActivityTransition | undefined>","isAsync":true,"count":2},{"id":"App.ActivityStack/pushAsync","name":"pushAsync","hasParams":true,"isMethod":true,"file":"dist/core/typings/App/Activity/ActivityStack.d.ts","line":3,"code":"pushAsync(activity: Activity): PromiseLike<ActivityTransition>;","doc":"<p>Add an activity to the foreground asynchronously, does nothing if given activity was already in the foreground; returns Promise that resolves to the completed transition.</p>\n","declType":"PromiseLike<ActivityTransition>","isAsync":true},{"id":"App.ActivityStack/replaceAsync","name":"replaceAsync","hasParams":true,"isMethod":true,"file":"dist/core/typings/App/Activity/ActivityStack.d.ts","line":5,"code":"replaceAsync(activity: Activity): PromiseLike<ActivityTransition>;","doc":"<p>Replace the current activity asynchronously (throws error if none), or remove current activity if given activity was already directly below current activity in the activity stack; returns Promise that resolves to the completed transition.</p>\n","declType":"PromiseLike<ActivityTransition>","isAsync":true},{"id":"App.ActivityStack/restoreHistoryStateAsync","name":"restoreHistoryStateAsync","hasParams":true,"isMethod":true,"file":"dist/core/typings/App/Activity/ActivityStack.d.ts","line":13,"code":"restoreHistoryStateAsync(historyID: string): PromiseLike<void>;","doc":"<p>Reload state using given history ID, if possible (i.e. not yet deactivated relevant activities in the meantime); returns a promise that resolves when the state has been reached.</p>\n","declType":"PromiseLike<void>","isAsync":true},{"id":"App.ActivityStack/title","name":"title","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/App/Activity/ActivityStack.d.ts","line":27,"code":"readonly title: string | undefined;","doc":"<p>The title of the topmost activity that has a title defined (observable).</p>\n","declType":"string | undefined"},{"id":"App.ActivityStack/top","name":"top","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/App/Activity/ActivityStack.d.ts","line":23,"code":"readonly top: Activity | undefined;","doc":"<p>The current foreground activity (top of stack, if any; observable).</p>\n","declType":"Activity | undefined"},{"id":"App.ActivityStack/upAsync","name":"upAsync","hasParams":true,"isMethod":true,"file":"dist/core/typings/App/Activity/ActivityStack.d.ts","line":11,"code":"upAsync(activityOrClass: Activity | typeof Activity): PromiseLike<Activity | undefined>;","doc":"<p>Remove foreground activities until given activity or activity of given type is in the foreground; returns Promise that resolves to activity, or undefined if there was no matching activity on the stack.</p>\n","declType":"PromiseLike<Activity | undefined>","isAsync":true},{"id":"App.ActivityStack/Transition","name":"Transition","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/App/Activity/ActivityStack.d.ts","line":31,"code":"readonly Transition: Signal.Emittable<ActivityTransition>;","doc":"<p>Signal that is emitted when a transition occurs (after Starting/Resuming/Suspending but before Started/Resumed).</p>\n","declType":"Signal.Emittable<ActivityTransition>","isSignal":true}],"isNamespace":true},{"id":"App.ActivityTransition","name":"ActivityTransition","isInterface":true,"file":"dist/core/typings/App/Activity/ActivityStack.d.ts","line":60,"code":"interface ActivityTransition","doc":"<p>Represents a transition from one foreground activity to another.</p>\n","items":[{"id":"App.ActivityTransition.Operation","name":"Operation","isEnum":true,"file":"dist/core/typings/App/Activity/ActivityStack.d.ts","line":76,"code":"enum Operation","doc":"<p>Operation type that triggered a transition.</p>\n","isStatic":true,"items":[{"id":"App.ActivityTransition.Operation.Pop","name":"Pop","isStatic":true,"isConst":true,"file":"dist/core/typings/App/Activity/ActivityStack.d.ts","line":82,"code":"enum Operation { ...Pop }","doc":"<p>Pop operation</p>\n"},{"id":"App.ActivityTransition.Operation.Push","name":"Push","isStatic":true,"isConst":true,"file":"dist/core/typings/App/Activity/ActivityStack.d.ts","line":78,"code":"enum Operation { ...Push }","doc":"<p>Push operation</p>\n"},{"id":"App.ActivityTransition.Operation.Replace","name":"Replace","isStatic":true,"isConst":true,"file":"dist/core/typings/App/Activity/ActivityStack.d.ts","line":80,"code":"enum Operation { ...Replace }","doc":"<p>Replace operation</p>\n"}]},{"id":"App.ActivityTransition/activityStack","name":"activityStack","isProperty":true,"file":"dist/core/typings/App/Activity/ActivityStack.d.ts","line":64,"code":"activityStack: ActivityStack;","doc":"<p>The activity stack that is transitioning.</p>\n","declType":"ActivityStack"},{"id":"App.ActivityTransition/from","name":"from","isProperty":true,"file":"dist/core/typings/App/Activity/ActivityStack.d.ts","line":66,"code":"from: Activity;","doc":"<p>The activity that is currently in the foreground, if any.</p>\n","declType":"Activity"},{"id":"App.ActivityTransition/id","name":"id","isProperty":true,"file":"dist/core/typings/App/Activity/ActivityStack.d.ts","line":62,"code":"id: string;","doc":"<p>Unique ID for this transition.</p>\n","declType":"string"},{"id":"App.ActivityTransition/op","name":"op","isProperty":true,"file":"dist/core/typings/App/Activity/ActivityStack.d.ts","line":70,"code":"op: ActivityTransition.Operation;","doc":"<p>The stack operation being performed: push, replace, or pop.</p>\n","declType":"ActivityTransition.Operation"},{"id":"App.ActivityTransition/previous","name":"previous","isProperty":true,"file":"dist/core/typings/App/Activity/ActivityStack.d.ts","line":72,"code":"previous: ActivityTransition;","doc":"<p>The previous transition that is part of the same operation (pop/push/pop/up).</p>\n","declType":"ActivityTransition"},{"id":"App.ActivityTransition/to","name":"to","isProperty":true,"file":"dist/core/typings/App/Activity/ActivityStack.d.ts","line":68,"code":"to: Activity;","doc":"<p>The new foreground activity, if any.</p>\n","declType":"Activity"}],"isNamespace":true},{"id":"App.AppBarLayout","name":"AppBarLayout","isClass":true,"file":"dist/core/typings/App/View/Layout/App.d.ts","line":2,"code":"class AppBarLayout extends AppBarLayout_base\nAppBarLayout_base: typeof Container & ComponentFactory<Container>","doc":"<p>Represents the top header row of an application page, contains only one Row instance; all content passed into the initializer is automatically added to this row, not the container itself.</p>\n","extends":["Container"],"items":[{"id":"App.AppBarLayout/appendChild","name":"appendChild","hasParams":true,"isMethod":true,"file":"dist/core/typings/App/View/Layout/App.d.ts","line":4,"code":"appendChild(child: Component): this;","doc":"<p>No description</p>\n","declType":"this"}]},{"id":"App.AppViewLayout","name":"AppViewLayout","isClass":true,"file":"dist/core/typings/App/View/Layout/App.d.ts","line":6,"code":"class AppViewLayout extends VerticalLayout","doc":"<p>Represents a full-page application layout that contains a header app bar fragment and a footer container fragment.</p>\n","extends":["App.VerticalLayout"],"items":[{"id":"App.AppViewLayout.Footer","name":"Footer","isStatic":true,"isProperty":true,"file":"dist/core/typings/App/View/Layout/App.d.ts","line":10,"code":"static Footer: typeof VerticalLayout.Footer;","doc":"<p>Layout fragment for the application container’s fixed footer.</p>\n","declType":"typeof VerticalLayout.Footer"},{"id":"App.AppViewLayout.Header","name":"Header","isStatic":true,"isProperty":true,"file":"dist/core/typings/App/View/Layout/App.d.ts","line":8,"code":"static Header: typeof AppBarLayout;","doc":"<p>Layout fragment for the application bar at the top of the screen, contains only one Row instance; all content passed into the initializer is automatically added to this row, not the container itself.</p>\n","declType":"typeof AppBarLayout"}],"inherits":["App.BaseLayout.constructor","App.BaseLayout/appendChild","App.BaseLayout/bindFragment","App.BaseLayout/fragments"]},{"id":"App.Application","name":"Application","isClass":true,"file":"dist/core/typings/App/Application.d.ts","line":2,"code":"class Application extends Async.ObservableObject","doc":"<p>Encapsulates the application as a singleton object; to be overridden with a platform-specific implementation, do not instantiate directly.</p>\n","extends":["Async.ObservableObject"],"items":[{"id":"App.Application.current","name":"current","isStatic":true,"isProperty":true,"file":"dist/core/typings/App/Application.d.ts","line":4,"code":"static current: Application;","doc":"<p>The current (and only) Application instance, when created.</p>\n","declType":"Application"},{"id":"App.Application.ready","name":"ready","isStatic":true,"isProperty":true,"file":"dist/core/typings/App/Application.d.ts","line":6,"code":"static ready: PromiseLike<Application>;","doc":"<p>Promise that resolves to the application instance after it has been created.</p>\n","declType":"PromiseLike<Application>","isAsync":true},{"id":"App.Application.constructor","name":"new Application","hasParams":true,"isCtor":true,"file":"dist/core/typings/App/Application.d.ts","line":9,"code":"constructor(title?: string);","doc":"<p>Create the application instance (from a derived class); can be called only once.</p>\n"},{"id":"App.Application/activationIndex","name":"activationIndex","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/App/Application.d.ts","line":35,"code":"readonly activationIndex: number | undefined;","doc":"<p>Counter that is incremented every time <code>.reactivate</code> is called.</p>\n","declType":"number | undefined"},{"id":"App.Application/activities","name":"activities","isProperty":true,"file":"dist/core/typings/App/Application.d.ts","line":19,"code":"activities: ActivityStack;","doc":"<p>Activity stack instance.</p>\n","declType":"ActivityStack"},{"id":"App.Application/culture","name":"culture","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/App/Application.d.ts","line":13,"code":"readonly culture: CultureService;","doc":"<p>The currently active i18n culture service (<code>CultureService</code> instance), referred to by ID <code>culture</code>; to activate another culture, use <code>addServiceAlias</code> to alias another culture to the <code>culture</code> identifier; changes will be reflected in this property asynchronously, and will also be reflected in the UI flow direction (<code>ltr</code> or <code>rtl</code>) and translations using <code>UI.tl</code>.</p>\n","declType":"CultureService"},{"id":"App.Application/dropActivityAsync","name":"dropActivityAsync","hasParams":true,"isMethod":true,"file":"dist/core/typings/App/Application.d.ts","line":25,"code":"dropActivityAsync(ActivityClass?: typeof Activity): PromiseLike<Activity | undefined>;","doc":"<p>Go back in activity history; either to previous activity or to activity of given class; returns promise that resolves to the new foreground activity, or undefined if activity was not found; the NoActivity signal is emitted if all activities have been dropped and there is no current activity anymore.</p>\n","declType":"PromiseLike<Activity | undefined>","isAsync":true},{"id":"App.Application/getTopActivity","name":"getTopActivity","hasParams":false,"isMethod":true,"file":"dist/core/typings/App/Application.d.ts","line":21,"code":"getTopActivity(): Activity | undefined;","doc":"<p>Returns the activity that is currently in the foreground (observable).</p>\n","declType":"Activity | undefined"},{"id":"App.Application/isActive","name":"isActive","hasParams":true,"isMethod":true,"file":"dist/core/typings/App/Application.d.ts","line":27,"code":"isActive(path: string): boolean;\nisActive(activityClass: typeof Activity): boolean;\nisActive(activity: Activity): boolean;","doc":"<p>[1]. Returns true if the given path matches or is a prefix of the currently active path (e.g. <code>#/items</code> is considered active if the current path is <code>#/items/123</code> or <code>#/items</code>).</p>\n<p>[2]. Returns true if the current activity or one of its parent activities is an instance of the given activity class.</p>\n<p>[3]. Returns true if the given activity matches the current activity or one of its parent activities.</p>\n","declType":"boolean | boolean | boolean","count":3},{"id":"App.Application/reactivate","name":"reactivate","hasParams":false,"isMethod":true,"file":"dist/core/typings/App/Application.d.ts","line":33,"code":"reactivate(): PromiseLike<ActivityTransition | undefined>;","doc":"<p>Remove the activity that is currently in the foreground, and reinstantiate a new activity using the <code>Activation</code> object that was used to instantiate the current activity; this also re-displays the view, if any; also increments the <code>.activationIndex</code> property; returns a promise that is fulfilled after the activity has been started.</p>\n","declType":"PromiseLike<ActivityTransition | undefined>","isAsync":true},{"id":"App.Application/startActivityAsync","name":"startActivityAsync","hasParams":true,"isMethod":true,"file":"dist/core/typings/App/Application.d.ts","line":23,"code":"startActivityAsync(activatable: Activity | typeof Activity | Activation | string, replace?: boolean, navigateIfNotFound?: boolean): PromiseLike<ActivityTransition | undefined>;","doc":"<p>Start given activity as foreground activity (push/replace, same as calling <code>.activities.push/replace(...)</code> directly), or start activity using given resource path or string (<code>#/...</code> or <code>/...</code>, or relative path as <code>#./...</code>, <code>#../...</code>, <code>./...</code> or <code>../...</code>); if <code>navigateIfNotFound</code> is not false, then the browser/app will navigate to the new location if no matching activity is found (automatic for external URLs), otherwise invokes onPageNotFound handler; note that activities transition asynchronously and any updates will not be reflected until a few milliseconds after calling this method.</p>\n","declType":"PromiseLike<ActivityTransition | undefined>","isAsync":true},{"id":"App.Application/title","name":"title","isProperty":true,"file":"dist/core/typings/App/Application.d.ts","line":11,"code":"title: string;","doc":"<p>The application name to be displayed in the window title bar (observed).</p>\n","declType":"string"},{"id":"App.Application/normalizePath","name":"normalizePath","hasParams":true,"isMethod":true,"file":"dist/core/typings/App/Application.d.ts","line":37,"code":"protected normalizePath(path?: string): string | undefined;","doc":"<p>Returns a normalized version of given path/URL, i.e. either <code>/...</code> or <code>#/...</code>, or undefined if given path/URL cannot be normalized; relative paths are also supported (e.g. <code>../foo</code> or <code>#../foo</code>).</p>\n","isProtected":true,"declType":"string | undefined"},{"id":"App.Application/getCurrentUrl","name":"getCurrentUrl","hasParams":false,"isMethod":true,"file":"dist/core/typings/App/Application.d.ts","line":39,"code":"protected getCurrentUrl(): string;","doc":"<p>Returns the (browser/app) platform’s current URI as a string, if available.</p>\n","isProtected":true,"declType":"string"},{"id":"App.Application/navigateToUrl","name":"navigateToUrl","hasParams":true,"isMethod":true,"file":"dist/core/typings/App/Application.d.ts","line":41,"code":"protected navigateToUrl(url: string): void;","doc":"<p>Directs the (browser/app) platform to given URL, e.g. a full URL to navigate away from the current application.</p>\n","isProtected":true,"declType":"void"},{"id":"App.Application/NoActivity","name":"NoActivity","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/App/Application.d.ts","line":17,"code":"readonly NoActivity: Signal.VoidEmittable;","doc":"<p>Signal that is emitted when all activities have been dropped and none have been started.</p>\n","declType":"Signal.VoidEmittable","isSignal":true},{"id":"App.Application/PageNotFound","name":"PageNotFound","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/App/Application.d.ts","line":15,"code":"readonly PageNotFound: Signal.Emittable<string>;","doc":"<p>Signal that is emitted when no activity is found for a location.</p>\n","declType":"Signal.Emittable<string>","isSignal":true,"text":[{"title":"Example","content":"<pre><code class=\"language-typescript\">// Redirect to #/ and log a warning message\nApp.Application.current.PageNotFound.connect(path =&gt; {\n    console.log(&quot;Page not found: &quot; + path);\n    App.startActivityAsync(&quot;#/&quot;);\n})\n</code></pre>\n"}],"sourceIdx":1}],"text":[{"content":"<p>See <code>App.DOMApplication</code> for a non-abstract implementation.</p>\n"},{"title":"Purpose","content":"<p>The Application object in Typescene plays a major role when dealing with Activities. It keeps track of activities in a stack-like model, automatically activating and suspending activities as they become the topmost item on the activity stack (an instance of <code>App.ActivityStack</code>).</p>\n<ul>\n<li>Use the <code>.startActivityAsync</code> method to start an activity explicitly, either using an <code>App.Activity</code> reference, an <code>App.Activation</code> object, or by route (URL path) – if activities are mapped to routes using the <code>App.mapRoute</code> decorator.</li>\n<li>Use the <code>.dropActivityAsync</code> method to remove an activity from the stack.</li>\n<li>Use the <code>.getTopActivity</code> method to obtain a reference to the current topmost activity.</li>\n<li>Use <code>.activities</code> to invoke the <code>ActivityStack</code> <a href=\"~/App.ActivityStack/getCursor\">.getCursor</a> method, which can be used to traverse the activities currently on the stack.</li>\n</ul>\n<p>The <code>.startActivityAsync</code> method is also aliased as <code>App.startActivityAsync</code>.</p>\n<p>Additionally, the Application object maintains a reference to the currently active <code>App.CultureService</code> in <code>.culture</code>, and observes changes to be applied to the UI.</p>\n"}],"sourceIdx":0,"inherits":["Async.ObservableObject/addObservableProperty","Async.ObservableObject/hasObservableProperty","Async.ObservableObject/PropertyChange"]},{"id":"App.BaseDialogLayout","name":"BaseDialogLayout","isClass":true,"file":"dist/core/typings/App/View/Layout/Base.d.ts","line":16,"code":"class BaseDialogLayout extends DialogContainer","doc":"<p>Represents a dialog layout, can be extended to define dialog container-based layouts and their associated layout fragments (using <code>layoutFragment</code> on static properties).</p>\n","extends":["DialogContainer"],"items":[{"id":"App.BaseDialogLayout.isLayoutClass","name":"isLayoutClass","isStatic":true,"isProperty":true,"isReadOnly":true,"file":"dist/core/typings/App/View/Layout/Base.d.ts","line":18,"code":"static readonly isLayoutClass: true;","doc":"<p>Dummy property for duck typing of layout classes.</p>\n","declType":"true"},{"id":"App.BaseDialogLayout.constructor","name":"new BaseDialogLayout","hasParams":false,"isCtor":true,"file":"dist/core/typings/App/View/Layout/Base.d.ts","line":20,"code":"constructor();","doc":"<p>Create a new instance of this layout view.</p>\n"},{"id":"App.BaseDialogLayout/appendChild","name":"appendChild","hasParams":true,"isMethod":true,"file":"dist/core/typings/App/View/Layout/Base.d.ts","line":26,"code":"appendChild(child?: Component): this;","doc":"<p>Add a child component to this component, or store a view fragment in the <code>.fragments</code> object; returns this.</p>\n","declType":"this"},{"id":"App.BaseDialogLayout/bindFragment","name":"bindFragment","hasParams":true,"isMethod":true,"file":"dist/core/typings/App/View/Layout/Base.d.ts","line":28,"code":"bindFragment(propertyName: keyof this, fragmentName: string, transform?: (fragment: Component | undefined) => any): void;","doc":"<p>Set given observable property of this component to given named fragment (observed property of <code>.fragments</code> object), with optional transformation function (run inside the observable context, for e.g. conditional assignment).</p>\n","declType":"void"},{"id":"App.BaseDialogLayout/fragments","name":"fragments","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/App/View/Layout/Base.d.ts","line":22,"code":"readonly fragments: { [name: string]: Component | undefined; } & Async.ObservableObject;","doc":"<p>Observable object that contains all fragments that have been added using <code>.appendChild(...)</code> or through a component factory (i.e. static <code>.with(...)</code> method), indexed by ID.</p>\n","declType":"{\n        [name: string]: Component | undefined;\n    } & Async.ObservableObject"}]},{"id":"App.BaseLayout","name":"BaseLayout","isClass":true,"file":"dist/core/typings/App/View/Layout/Base.d.ts","line":1,"code":"class BaseLayout extends LayoutContainer","doc":"<p>Represents a container layout, can be extended to define container-based layouts and their associated layout fragments (using <code>layoutFragment</code> on static properties).</p>\n","extends":["LayoutContainer"],"items":[{"id":"App.BaseLayout.isLayoutClass","name":"isLayoutClass","isStatic":true,"isProperty":true,"isReadOnly":true,"file":"dist/core/typings/App/View/Layout/Base.d.ts","line":3,"code":"static readonly isLayoutClass: true;","doc":"<p>Dummy property for duck typing of layout classes.</p>\n","declType":"true"},{"id":"App.BaseLayout.constructor","name":"new BaseLayout","hasParams":false,"isCtor":true,"file":"dist/core/typings/App/View/Layout/Base.d.ts","line":5,"code":"constructor();","doc":"<p>Create a new instance of this layout view.</p>\n"},{"id":"App.BaseLayout/appendChild","name":"appendChild","hasParams":true,"isMethod":true,"file":"dist/core/typings/App/View/Layout/Base.d.ts","line":11,"code":"appendChild(child?: Component): this;","doc":"<p>Add a child component to this component, or store a view fragment in the <code>.fragments</code> object; returns this.</p>\n","declType":"this"},{"id":"App.BaseLayout/bindFragment","name":"bindFragment","hasParams":true,"isMethod":true,"file":"dist/core/typings/App/View/Layout/Base.d.ts","line":13,"code":"bindFragment(propertyName: keyof this, fragmentName: string, transform?: (fragment: Component | undefined) => Component | undefined): void;","doc":"<p>Set given observable property of this component to given named fragment (observed property of <code>.fragments</code> object), with optional transformation function (run inside the observable context, for e.g. conditional assignment).</p>\n","declType":"void"},{"id":"App.BaseLayout/fragments","name":"fragments","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/App/View/Layout/Base.d.ts","line":7,"code":"readonly fragments: { [name: string]: Component | undefined; } & Async.ObservableObject;","doc":"<p>Observable object that contains all fragments that have been added using <code>.appendChild(...)</code> or through a component factory (i.e. static <code>.with(...)</code> method), indexed by ID.</p>\n","declType":"{\n        [name: string]: Component | undefined;\n    } & Async.ObservableObject"}]},{"id":"App.CultureService","name":"CultureService","isClass":true,"file":"dist/core/typings/App/Culture/CultureService.d.ts","line":0,"code":"class CultureService extends Service","doc":"<p>Base culture service (mapped on <code>culture-neutral</code> and <code>culture</code> initially); to be overridden with a language and region specific culture service, mapped as <code>culture-xx-YY/zz</code>, and aliased as <code>culture</code> using <code>addServiceAlias</code> to set as the current culture.</p>\n","extends":["App.Service"],"items":[{"id":"App.CultureService.DateTimeFormatters","name":"DateTimeFormatters","isInterface":true,"file":"dist/core/typings/App/Culture/CultureService.d.ts","line":54,"code":"interface DateTimeFormatters","doc":"<p>Collection of date/time formatter function, indexed by placeholder name (e.g. <code>M</code>, <code>MM</code>, <code>MMM</code>), which return the relevant string representation of a given date argument.</p>\n","isStatic":true,"items":[{"id":"App.CultureService.DateTimeFormatters.-index-string","name":"[string]","isProperty":true,"file":"dist/core/typings/App/Culture/CultureService.d.ts","line":56,"code":"[s: string]: (this: DateTimeFormatters, d: Date, s: CultureService) => string;","doc":"<p>No description</p>\n","declType":"(this: DateTimeFormatters, d: Date, s: CultureService) => string"}]},{"id":"App.CultureService/formatCurrency","name":"formatCurrency","hasParams":true,"isMethod":true,"file":"dist/core/typings/App/Culture/CultureService.d.ts","line":12,"code":"formatCurrency(n: number | string, currencySymbol?: string, fixedDecimals?: number): string;","doc":"<p>Returns given number formatted as a currency, with given currency symbol and fixed number of decimals; defaults to “$”, non-breaking space, and number with 2 fixed decimals; specific culture implementations should override defaults but still accept the same arguments.</p>\n","declType":"string"},{"id":"App.CultureService/formatDateTime","name":"formatDateTime","hasParams":true,"isMethod":true,"file":"dist/core/typings/App/Culture/CultureService.d.ts","line":18,"code":"formatDateTime(d: Date, format?: string): string;","doc":"<p>Returns given date/time formatted using given format string (e.g. <code>dd/MMM/yyyy HH:mm</code>) using the following default placeholders, which may be (re-) defined by the culture service (defaults to <code>%dd %t</code>):</p>\n<ul>\n<li><code>%d</code>: short date, e.g. 20/1/17,</li>\n<li><code>%dd</code>: medium date, e.g. 20 Jan 2017</li>\n<li><code>%ddd</code>: long date, e.g. 20 January 2017</li>\n<li><code>%dddd</code>: full date, e.g. Friday, 20 January 2017</li>\n<li><code>%t</code>: time, e.g. 2:20 PM</li>\n<li><code>%tt</code>: time with seconds, e.g. 2:20:00 PM</li>\n<li><code>%T</code>: 24-hour time, e.g. 14:20</li>\n<li><code>%TT</code>: 24-hour time with seconds, e.g. 14:20:00</li>\n<li><code>d</code>: date 0-31,</li>\n<li><code>dd</code>: date 00-31,</li>\n<li><code>ddd</code>: abbreviated weekday name,</li>\n<li><code>dddd</code>: full weekday name,</li>\n<li><code>h</code>: hours 0-12,</li>\n<li><code>hh</code>: hours 00-12,</li>\n<li><code>H</code>: hours 0-23,</li>\n<li><code>HH</code>: hours 00-23,</li>\n<li><code>m</code>: minutes 0-59,</li>\n<li><code>mm</code>: minutes 00-59,</li>\n<li><code>M</code>: month 0-12,</li>\n<li><code>MM</code>: month 00-12,</li>\n<li><code>MMM</code>: abbreviated month name,</li>\n<li><code>MMMM</code>: full month name,</li>\n<li><code>s</code>: seconds 0-59,</li>\n<li><code>ss</code>: seconds 00-59,</li>\n<li><code>t</code>: a/p,</li>\n<li><code>tt</code>: AM/PM,</li>\n<li><code>y</code>: year 0-99,</li>\n<li><code>yy</code>: year 00-99,</li>\n<li><code>yyyy</code>: year 0000-9999,</li>\n<li><code>/</code>: date separator,</li>\n<li><code>:</code>: time separator.</li>\n</ul>\n","declType":"string"},{"id":"App.CultureService/formatNumber","name":"formatNumber","hasParams":true,"isMethod":true,"file":"dist/core/typings/App/Culture/CultureService.d.ts","line":10,"code":"formatNumber(n: number | string, fixedDecimals?: number, roundDecimals?: number): string;","doc":"<p>Returns given number formatted using culture specific rules, and using given precision (i.e. fixed number of decimals to display e.g. <code>2.00</code>, and/or rounding at given number of decimals, default 8, to avoid binary-to-decimal rounding errors such as <code>1.99999999</code>…); default implementation uses decimal point (<code>.</code>) and no thousands separators, but may revert to scientific notation for numbers with more than 20 digits (platform default).</p>\n","declType":"string"},{"id":"App.CultureService/formatPercentage","name":"formatPercentage","hasParams":true,"isMethod":true,"file":"dist/core/typings/App/Culture/CultureService.d.ts","line":14,"code":"formatPercentage(n: number | string, percSymbol?: string, fixedDecimals?: number): string;","doc":"<p>Returns given number formatted as a percentage, with given percentage symbol and fixed number of decimals; defaults to number without fixed decimals and “%” character; specific culture implementations should override defaults but still accept the same arguments.</p>\n","declType":"string"},{"id":"App.CultureService/name","name":"name","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/App/Culture/CultureService.d.ts","line":2,"code":"readonly name: string;","doc":"<p>The name of this culture, defaults to “none” but should be set to <em>languagecode-countrycode/regioncode</em> and/or shorter forms such as <em>languagecode-countrycode</em> and <em>languagecode</em>.</p>\n","declType":"string"},{"id":"App.CultureService/pluralizeText","name":"pluralizeText","hasParams":true,"isMethod":true,"file":"dist/core/typings/App/Culture/CultureService.d.ts","line":8,"code":"pluralizeText(n: number, forms: string[]): string;","doc":"<p>Pluralize text based on given number and substitution form(s); defaults to English singular/plural rules without automatic pluralization (i.e. both singular and plural forms need to be specified in the placeholder).</p>\n","declType":"string"},{"id":"App.CultureService/textFlowDirection","name":"textFlowDirection","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/App/Culture/CultureService.d.ts","line":4,"code":"readonly textFlowDirection?: \"ltr\" | \"rtl\";","doc":"<p>Text flow direction for this culture’s language, either <code>ltr</code> or <code>rtl</code>, or undefined (platform default).</p>\n","declType":"\"ltr\" | \"rtl\""},{"id":"App.CultureService/translateText","name":"translateText","hasParams":true,"isMethod":true,"file":"dist/core/typings/App/Culture/CultureService.d.ts","line":6,"code":"translateText(text: string): string;","doc":"<p>Translate given text (may include placeholders and prefixes used by <code>UI.tl</code>).</p>\n","declType":"string"},{"id":"App.CultureService/dateTimeFormatters","name":"dateTimeFormatters","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/App/Culture/CultureService.d.ts","line":16,"code":"protected readonly dateTimeFormatters: CultureService.DateTimeFormatters;","doc":"<p>Collection of date/time formatters specific to this culture, used by <code>.formatDateTime</code>; defaults to a mostly international English format; replacement algorithm requires inclusion of all lengths of possible placeholders (including e.g. <code>yyy</code> and <code>%</code>).</p>\n","isProtected":true,"declType":"CultureService.DateTimeFormatters"}],"isNamespace":true,"inherits":["App.Service.getInstance","App.Service.constructor","Async.ObservableObject/addObservableProperty","Async.ObservableObject/hasObservableProperty","Async.ObservableObject/PropertyChange"]},{"id":"App.DOMApplication","name":"DOMApplication","isClass":true,"file":"dist/dom/typings/App/DOMApplication.d.ts","line":0,"code":"class DOMApplication extends Application","doc":"<p>Platform specific encapsulation of the application as a singleton object.</p>\n","extends":["App.Application"],"items":[{"id":"App.DOMApplication.disableBrowserHistory","name":"disableBrowserHistory","hasParams":false,"isStatic":true,"isMethod":true,"file":"dist/dom/typings/App/DOMApplication.d.ts","line":2,"code":"static disableBrowserHistory(): void;","doc":"<p>Disable synchronization of activity stack with browser history.</p>\n","declType":"void"},{"id":"App.DOMApplication.constructor","name":"new DOMApplication","hasParams":true,"isCtor":true,"file":"dist/dom/typings/App/DOMApplication.d.ts","line":4,"code":"constructor(title?: string);","doc":"<p>Create the application instance (either from a derived class or from the Application class itself); can be called only once.</p>\n"},{"id":"App.DOMApplication/getCurrentUrl","name":"getCurrentUrl","hasParams":false,"isMethod":true,"file":"dist/dom/typings/App/DOMApplication.d.ts","line":6,"code":"protected getCurrentUrl(): string;","doc":"<p>Returns the full URL from <code>window.location.href</code>; used to resolve relative URLs to start routed activities.</p>\n","isProtected":true,"declType":"string"},{"id":"App.DOMApplication/navigateToUrl","name":"navigateToUrl","hasParams":true,"isMethod":true,"file":"dist/dom/typings/App/DOMApplication.d.ts","line":8,"code":"protected navigateToUrl(url: string): void;","doc":"<p>Sets the browser’s current URL (using <code>window.location.href</code>), to navigate to another page or website.</p>\n","isProtected":true,"declType":"void"}],"text":[{"content":"<p>See also <code>App.Application</code>.</p>\n"},{"title":"Usage","content":"<p>Find the current application instance, if any, using the static <code>App.Application.current</code> property. There can be only one active instance at any time. Calling the constructor twice is not allowed.</p>\n<p>To create a basic DOM Application instance and start a root activity, use <code>new DOMApplication</code> directly:</p>\n<pre><code class=\"language-typescript\">class MyRootActivity extends UI.RootActivity {\n    // ...\n}\n\n// start the application\nvar app = new App.DOMApplication();\napp.startActivityAsync(MyRootActivity);\n</code></pre>\n<p>To customize the Application class, simply derive from it:</p>\n<pre><code class=\"language-typescript\">class MyApplication extends App.DOMApplication {\n    constructor() {\n        super(&quot;My Application&quot;);\n        this.startActivityAsync(MyRootActivity);\n    }\n\n    // e.g. public properties and methods here...\n}\n\n// start the application\nnew MyApplication();\n</code></pre>\n"}],"sourceIdx":29,"inherits":["App.Application/activationIndex","App.Application/activities","Async.ObservableObject/addObservableProperty","App.Application/culture","App.Application/dropActivityAsync","App.Application/getTopActivity","Async.ObservableObject/hasObservableProperty","App.Application/isActive","App.Application/reactivate","App.Application/startActivityAsync","App.Application/title","App.Application/normalizePath","App.Application/NoActivity","App.Application/PageNotFound","Async.ObservableObject/PropertyChange"]},{"id":"App.Http","name":"Http","isNamespace":true,"file":"dist/dom/typings/App/Http.d.ts","line":0,"code":"namespace Http","doc":"<p>Namespace that encapsulates <code>.fetch</code> and related functionality.</p>\n","items":[{"id":"App.Http.FetchHeaders","name":"FetchHeaders","isInterface":true,"file":"dist/dom/typings/App/Http.d.ts","line":19,"code":"interface FetchHeaders","doc":"<p>Interface definition for the simple read-only methods of a native Headers instance.</p>\n","isStatic":true,"items":[{"id":"App.Http.FetchHeaders/get","name":"get","hasParams":true,"isMethod":true,"file":"dist/dom/typings/App/Http.d.ts","line":21,"code":"get(name: string): string;","doc":"<p>Returns the first value of a single header by name.</p>\n","declType":"string"},{"id":"App.Http.FetchHeaders/getAll","name":"getAll","hasParams":true,"isMethod":true,"file":"dist/dom/typings/App/Http.d.ts","line":23,"code":"getAll(name: string): string[];","doc":"<p>Returns all values of a single header by name (e.g. <code>Accept-Encoding</code>).</p>\n","declType":"string[]"},{"id":"App.Http.FetchHeaders/has","name":"has","hasParams":true,"isMethod":true,"file":"dist/dom/typings/App/Http.d.ts","line":25,"code":"has(name: string): boolean;","doc":"<p>Returns true if this instance contains the given header.</p>\n","declType":"boolean"},{"id":"App.Http.FetchHeaders/keys","name":"keys","hasParams":false,"isMethod":true,"file":"dist/dom/typings/App/Http.d.ts","line":27,"code":"keys(): { next(): { done?: boolean; value?: string; }; };","doc":"<p>Returns an iterator that lists all headers by name (polyfill only supports manual iteration with the <code>next</code> method for compatibility).</p>\n","declType":"{\n            next(): {\n                done?: boolean;\n                value?: string;\n            };\n        }"}]},{"id":"App.Http.FetchOptions","name":"FetchOptions","isInterface":true,"file":"dist/dom/typings/App/Http.d.ts","line":35,"code":"interface FetchOptions","doc":"<p>Interface definition for supported fetch options.</p>\n","isStatic":true,"items":[{"id":"App.Http.FetchOptions/body","name":"body","isProperty":true,"file":"dist/dom/typings/App/Http.d.ts","line":43,"code":"body?: string | Blob;","doc":"<p>Request body (string, or possibly a Blob if using the native <code>fetch</code> implementation).</p>\n","declType":"string | Blob"},{"id":"App.Http.FetchOptions/headers","name":"headers","isProperty":true,"file":"dist/dom/typings/App/Http.d.ts","line":41,"code":"headers?: Headers | FetchHeaders;","doc":"<p>Request headers (object literal or native Headers instance).</p>\n","declType":"Headers | FetchHeaders"},{"id":"App.Http.FetchOptions/method","name":"method","isProperty":true,"file":"dist/dom/typings/App/Http.d.ts","line":37,"code":"method?: string;","doc":"<p>The HTTP method (GET, PUT, POST, DELETE, etc).</p>\n","declType":"string"},{"id":"App.Http.FetchOptions/url","name":"url","isProperty":true,"file":"dist/dom/typings/App/Http.d.ts","line":39,"code":"url?: string;","doc":"<p>The URL to send a request to.</p>\n","declType":"string"}]},{"id":"App.Http.FetchResponse","name":"FetchResponse","isInterface":true,"file":"dist/dom/typings/App/Http.d.ts","line":46,"code":"interface FetchResponse","doc":"<p>Interface definition for Response properties available in the native Fetch implementation as well as the polyfill implementation.</p>\n","isStatic":true,"items":[{"id":"App.Http.FetchResponse/blob","name":"blob","hasParams":false,"isMethod":true,"file":"dist/dom/typings/App/Http.d.ts","line":56,"code":"blob(): PromiseLike<Blob>;","doc":"<p>Returns a promise for the response body read into a Blob, if supported.</p>\n","declType":"PromiseLike<Blob>","isAsync":true},{"id":"App.Http.FetchResponse/headers","name":"headers","isProperty":true,"isReadOnly":true,"file":"dist/dom/typings/App/Http.d.ts","line":48,"code":"readonly headers: FetchHeaders;","doc":"<p>Headers returned to the client.</p>\n","declType":"FetchHeaders"},{"id":"App.Http.FetchResponse/json","name":"json","hasParams":false,"isMethod":true,"file":"dist/dom/typings/App/Http.d.ts","line":60,"code":"json(): PromiseLike<any>;","doc":"<p>Returns a promise for the response body, parsed as JSON.</p>\n","declType":"PromiseLike<any>","isAsync":true},{"id":"App.Http.FetchResponse/ok","name":"ok","isProperty":true,"isReadOnly":true,"file":"dist/dom/typings/App/Http.d.ts","line":50,"code":"readonly ok: boolean;","doc":"<p>True if the response was successful (status 200-299).</p>\n","declType":"boolean"},{"id":"App.Http.FetchResponse/status","name":"status","isProperty":true,"isReadOnly":true,"file":"dist/dom/typings/App/Http.d.ts","line":52,"code":"readonly status: number;","doc":"<p>Status code of the response.</p>\n","declType":"number"},{"id":"App.Http.FetchResponse/statusText","name":"statusText","isProperty":true,"isReadOnly":true,"file":"dist/dom/typings/App/Http.d.ts","line":54,"code":"readonly statusText: string;","doc":"<p>Status message</p>\n","declType":"string"},{"id":"App.Http.FetchResponse/text","name":"text","hasParams":false,"isMethod":true,"file":"dist/dom/typings/App/Http.d.ts","line":58,"code":"text(): PromiseLike<string>;","doc":"<p>Returns a promise for the response body.</p>\n","declType":"PromiseLike<string>","isAsync":true}]},{"id":"App.Http.GlobalConfig","name":"GlobalConfig","isInterface":true,"file":"dist/dom/typings/App/Http.d.ts","line":4,"code":"interface GlobalConfig","doc":"<p>Configuration options (for exported <code>config</code> variable).</p>\n","isStatic":true,"items":[{"id":"App.Http.GlobalConfig/FETCH_INCLUDE_CREDENTIALS","name":"FETCH_INCLUDE_CREDENTIALS","isProperty":true,"file":"dist/dom/typings/App/Http.d.ts","line":8,"code":"FETCH_INCLUDE_CREDENTIALS: boolean;","doc":"<p>Automatically set <code>fetch</code> credentials mode to “include” (defaults to true).</p>\n","declType":"boolean"},{"id":"App.Http.GlobalConfig/FORCE_XHR_FETCH","name":"FORCE_XHR_FETCH","isProperty":true,"file":"dist/dom/typings/App/Http.d.ts","line":6,"code":"FORCE_XHR_FETCH: boolean;","doc":"<p>Force <code>fetch</code> to use XMLHttpRequest instead of native <code>fetch</code> implementation (defaults to false).</p>\n","declType":"boolean"}]},{"id":"App.Http.Headers","name":"Headers","isInterface":true,"file":"dist/dom/typings/App/Http.d.ts","line":15,"code":"interface Headers","doc":"<p>Definition of a collection of HTTP headers as an object.</p>\n","isStatic":true,"items":[{"id":"App.Http.Headers.-index-string","name":"[string]","isProperty":true,"file":"dist/dom/typings/App/Http.d.ts","line":17,"code":"[headerName: string]: string;","doc":"<p>No description</p>\n","declType":"string"}]},{"id":"App.Http.MockResponse","name":"MockResponse","isClass":true,"file":"dist/dom/typings/App/Http.d.ts","line":63,"code":"class MockResponse implements FetchResponse","doc":"<p>Implements the FetchResponse interface, can be used to mock responses or initialize a response from an XMLHttpRequest.</p>\n","isStatic":true,"items":[{"id":"App.Http.MockResponse.withJSONContent","name":"withJSONContent","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/dom/typings/App/Http.d.ts","line":65,"code":"static withJSONContent(data: any): MockResponse;","doc":"<p>Create a response with given data encoded as JSON, the <code>application/json</code> content type, and status 200.</p>\n","declType":"MockResponse"},{"id":"App.Http.MockResponse.constructor","name":"new MockResponse","hasParams":true,"isCtor":true,"file":"dist/dom/typings/App/Http.d.ts","line":67,"code":"constructor(init?: { status?: number; statusText?: string; responseText?: string; response?: Blob; }, headers?: FetchHeaders);","doc":"<p>Create a response with given properties (an XMLHttpRequest object can be passed in directly, along with a native fetch <code>Headers</code> instance or a MockResponseHeaders instance); the response itself is taken from <code>.responseText</code> if it is not undefined, or from <code>.response</code> if it is a Blob.</p>\n"},{"id":"App.Http.MockResponse/blob","name":"blob","hasParams":false,"isMethod":true,"file":"dist/dom/typings/App/Http.d.ts","line":82,"code":"blob(): PromiseLike<Blob>;","doc":"<p>Returns a promise for the response body read into a Blob, if supported.</p>\n","declType":"PromiseLike<Blob>","isAsync":true},{"id":"App.Http.MockResponse/headers","name":"headers","isProperty":true,"isReadOnly":true,"file":"dist/dom/typings/App/Http.d.ts","line":74,"code":"readonly headers: FetchHeaders;","doc":"<p>Headers returned to the client.</p>\n","declType":"FetchHeaders"},{"id":"App.Http.MockResponse/json","name":"json","hasParams":false,"isMethod":true,"file":"dist/dom/typings/App/Http.d.ts","line":86,"code":"json(): PromiseLike<any>;","doc":"<p>Returns a promise for the response body, parsed as JSON.</p>\n","declType":"PromiseLike<any>","isAsync":true},{"id":"App.Http.MockResponse/ok","name":"ok","isProperty":true,"isReadOnly":true,"file":"dist/dom/typings/App/Http.d.ts","line":76,"code":"readonly ok: boolean;","doc":"<p>True if the response was successful (status 200-299).</p>\n","declType":"boolean"},{"id":"App.Http.MockResponse/status","name":"status","isProperty":true,"isReadOnly":true,"file":"dist/dom/typings/App/Http.d.ts","line":78,"code":"readonly status: number;","doc":"<p>Status code of the response.</p>\n","declType":"number"},{"id":"App.Http.MockResponse/statusText","name":"statusText","isProperty":true,"isReadOnly":true,"file":"dist/dom/typings/App/Http.d.ts","line":80,"code":"readonly statusText: string;","doc":"<p>Status message</p>\n","declType":"string"},{"id":"App.Http.MockResponse/text","name":"text","hasParams":false,"isMethod":true,"file":"dist/dom/typings/App/Http.d.ts","line":84,"code":"text(): PromiseLike<string>;","doc":"<p>Returns a promise for the response body.</p>\n","declType":"PromiseLike<string>","isAsync":true}]},{"id":"App.Http.MockResponseHeaders","name":"MockResponseHeaders","isClass":true,"file":"dist/dom/typings/App/Http.d.ts","line":91,"code":"class MockResponseHeaders implements FetchHeaders","doc":"<p>Implements the FetchResponse interface, can be used to mock response headers or initialize response headers from an XMLHttpRequest.</p>\n","isStatic":true,"items":[{"id":"App.Http.MockResponseHeaders.constructor","name":"new MockResponseHeaders","hasParams":true,"isCtor":true,"file":"dist/dom/typings/App/Http.d.ts","line":93,"code":"constructor(allResponseHeaders?: string);","doc":"<p>Initialize the list of headers using given HTTP header text (i.e. one or more lines with header name, colon, and header value; strips all whitespace around names and values).</p>\n"},{"id":"App.Http.MockResponseHeaders/get","name":"get","hasParams":true,"isMethod":true,"file":"dist/dom/typings/App/Http.d.ts","line":96,"code":"get(name: string): string;","doc":"<p>No description</p>\n","declType":"string"},{"id":"App.Http.MockResponseHeaders/getAll","name":"getAll","hasParams":true,"isMethod":true,"file":"dist/dom/typings/App/Http.d.ts","line":97,"code":"getAll(name: string): string[];","doc":"<p>No description</p>\n","declType":"string[]"},{"id":"App.Http.MockResponseHeaders/has","name":"has","hasParams":true,"isMethod":true,"file":"dist/dom/typings/App/Http.d.ts","line":98,"code":"has(name: string): boolean;","doc":"<p>No description</p>\n","declType":"boolean"},{"id":"App.Http.MockResponseHeaders/keys","name":"keys","hasParams":false,"isMethod":true,"file":"dist/dom/typings/App/Http.d.ts","line":99,"code":"keys(): { next: () => { done?: boolean | undefined; value?: string | undefined; }; };","doc":"<p>No description</p>\n","declType":"{\n            next: () => {\n                done?: boolean | undefined;\n                value?: string | undefined;\n            };\n        }"}]},{"id":"App.Http.Requesting","name":"Requesting","isStatic":true,"isProperty":true,"file":"dist/dom/typings/App/Http.d.ts","line":13,"code":"Requesting: Signal.Emittable<FetchOptions>","doc":"<p>Signal that is emitted before sending a request; can be used to intercept requests, modify request options, and provide an alternate response; if one of the connected handlers returns a (promise for) an alternate response, i.e. an object that implements <code>FetchResponse</code>, then the request will not be sent, and the (first) resulting alternate response is used instead; if one of the connected handlers throws an exception, the original promise for the request is rejected; otherwise the request is sent as per normal.</p>\n","declType":"Signal.Emittable<FetchOptions>","isSignal":true},{"id":"App.Http.Responded","name":"Responded","isStatic":true,"isProperty":true,"file":"dist/dom/typings/App/Http.d.ts","line":15,"code":"Responded: Signal.Emittable<FetchResponse>","doc":"<p>Signal that is emitted after obtaining a remote response (from an actual request, not an alternate response provided by a connected handler of <code>.Requesting</code>).</p>\n","declType":"Signal.Emittable<FetchResponse>","isSignal":true},{"id":"App.Http.config","name":"config","isStatic":true,"isProperty":true,"file":"dist/dom/typings/App/Http.d.ts","line":4,"code":"config: GlobalConfig","doc":"<p>Configuration options</p>\n","declType":"GlobalConfig"},{"id":"App.Http.deleteAsync","name":"deleteAsync","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/dom/typings/App/Http.d.ts","line":122,"code":"function deleteAsync(url: string, data?: any, headers?: Headers): PromiseLike<any>;","doc":"<p>Perform a DELETE request with given object (sent as JSON) and headers, if any; returns a promise that resolves to the parsed JSON response (or undefined if response was empty), or gets rejected if the request fails or response status is not in 2xx range.</p>\n","declType":"PromiseLike<any>","isAsync":true},{"id":"App.Http.fetch","name":"fetch","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/dom/typings/App/Http.d.ts","line":106,"code":"function fetch(inputUrl: string, init?: FetchOptions): PromiseLike<FetchResponse>;\nfunction fetch(inputRequest: any): PromiseLike<FetchResponse>;","doc":"<p>[1]. Perform a request to fetch a resource at given URL; provides a partial polyfill for the Fetch standard using XMLHttpRequest, but uses native <code>fetch()</code> internally if available.</p>\n<p>[2]. Perform a request to fetch a resource; provides a partial polyfill for the Fetch standard using XMLHttpRequest, but uses native <code>fetch</code> internally if available.</p>\n","declType":"PromiseLike<FetchResponse> | PromiseLike<FetchResponse>","isAsync":true,"count":2},{"id":"App.Http.getAsync","name":"getAsync","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/dom/typings/App/Http.d.ts","line":116,"code":"function getAsync(url: string, params?: any, headers?: Headers | FetchHeaders): PromiseLike<any>;","doc":"<p>Perform a GET request with given parameters and headers, if any; returns a promise that resolves to the parsed JSON response (or undefined if response was empty), or gets rejected if the request fails or response status is not in 2xx range.</p>\n","declType":"PromiseLike<any>","isAsync":true},{"id":"App.Http.getBlobAsync","name":"getBlobAsync","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/dom/typings/App/Http.d.ts","line":112,"code":"function getBlobAsync(url: string, params?: any, headers?: Headers | FetchHeaders): PromiseLike<Blob>;","doc":"<p>Perform a GET request with given parameters and headers, if any; returns a promise that resolves to a blob, or gets rejected if the request fails or response status is not in 2xx range; requires a browser that supports Blob constructors.</p>\n","declType":"PromiseLike<Blob>","isAsync":true},{"id":"App.Http.getHtmlContentAsync","name":"getHtmlContentAsync","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/dom/typings/App/Http.d.ts","line":114,"code":"function getHtmlContentAsync(url: string, params?: any, headers?: Headers | FetchHeaders): PromiseLike<DocumentFragment>;","doc":"<p>Perform a GET request with given parameters and headers, if any; returns a promise that resolves to the parsed HTML result body as a document fragment (ignores everything before and after body tag, if any; inserts everything if no body tag is found, i.e. partial HTML), or gets rejected if the request fails or response status is not in 2xx range.</p>\n","declType":"PromiseLike<DocumentFragment>","isAsync":true},{"id":"App.Http.getTextAsync","name":"getTextAsync","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/dom/typings/App/Http.d.ts","line":110,"code":"function getTextAsync(url: string, params?: any, headers?: Headers | FetchHeaders): PromiseLike<string>;","doc":"<p>Perform a GET request with given parameters and headers, if any; returns a promise that resolves to the response text, or gets rejected if the request fails or response status is not in 2xx range.</p>\n","declType":"PromiseLike<string>","isAsync":true},{"id":"App.Http.postAsync","name":"postAsync","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/dom/typings/App/Http.d.ts","line":118,"code":"function postAsync(url: string, data?: any, headers?: Headers): PromiseLike<any>;","doc":"<p>Perform a POST request with given object (sent as JSON) and headers, if any; returns a promise that resolves to the parsed JSON response (or undefined if response was empty), or gets rejected if the request fails or response status is not in 2xx range.</p>\n","declType":"PromiseLike<any>","isAsync":true},{"id":"App.Http.putAsync","name":"putAsync","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/dom/typings/App/Http.d.ts","line":120,"code":"function putAsync(url: string, data?: any, headers?: Headers): PromiseLike<any>;","doc":"<p>Perform a PUT request with given object (sent as JSON) and headers, if any; returns a promise that resolves to the parsed JSON response (or undefined if response was empty), or gets rejected if the request fails or response status is not in 2xx range.</p>\n","declType":"PromiseLike<any>","isAsync":true}],"text":[{"content":"<p>This mini-toolkit is provided to simplify development of single-page applications that rely on asynchronous HTTP communication with their Web server. This toolkit library is <em>not</em> intended to be a full framework for all types of client-server communication.</p>\n<p>However, since most applications won’t need much more than simple “Ajax”-style REST requests to transfer HTML or JSON data anyway, and there are no simple ways to achieve this in a cross-browser solution using Promises, the Http toolkit at least provides the basics.</p>\n"},{"title":"Exported members","content":"<p>This namespace module exports the following classes and methods:</p>\n<ul>\n<li><code>.fetch</code> function — mimics the <code>window.fetch</code> function in modern browsers. Internally uses either XMLHttpRequest <em>or</em> the native fetch implementation (when available) to process requests and responses, and always returns a Promise for a response object.</li>\n<li><code>.getTextAsync</code> and <code>.getBlobAsync</code> — to perform a GET request and return a Promise for the text or blob response data.</li>\n<li><code>.getHtmlContentAsync</code> — to perform a GET request and return a Promise for a document fragment that contains everything in the HTML response’s <code>&lt;body&gt;</code>.</li>\n<li><code>.getAsync</code>, <code>.postAsync</code>, <code>.putAsync</code>, and <code>.deleteAsync</code> — wrapper functions that send JSON data and return a promise for a parsed JSON response.</li>\n<li><code>Http.MockResponse</code> and <code>Http.MockResponseHeaders</code> — can be used to generate mock responses, and used internally to transform XMLHttpRequest data.</li>\n<li><code>Http.Requesting</code> and <code>Http.Responded</code> signals — for intercepting requests and responses.</li>\n<li><code>Http.config</code> object — contains options for default behavior of the <code>fetch</code> function.</li>\n</ul>\n<p>Refer to the <a href=\"~/samples/Http\">samples</a> for common usage patterns.</p>\n"}],"sourceIdx":30},{"id":"App.HubViewLayout","name":"HubViewLayout","isClass":true,"file":"dist/core/typings/App/View/Layout/App.d.ts","line":13,"code":"class HubViewLayout extends AppViewLayout","doc":"<p>Represents a full-page application layout that contains a header app bar fragment and a footer container fragment, as well as a scrollable navigation sidebar; the sidebar is automatically collapsed while <code>.sidebarCollapsed</code> is set (defaults to true on small screens, observable) but is also wrapped in a drawer container in the <code>.drawer</code> property, which can be opened using its <code>openAsync()</code> method (e.g. from a click handler on a button available in the <code>.AppBar</code> fragment).</p>\n","extends":["App.AppViewLayout"],"items":[{"id":"App.HubViewLayout.Footer","name":"Footer","isStatic":true,"isProperty":true,"file":"dist/core/typings/App/View/Layout/App.d.ts","line":17,"code":"static Footer: typeof AppViewLayout.Footer;","doc":"<p>Layout fragment for the application container’s fixed footer.</p>\n","declType":"typeof AppViewLayout.Footer"},{"id":"App.HubViewLayout.Header","name":"Header","isStatic":true,"isProperty":true,"file":"dist/core/typings/App/View/Layout/App.d.ts","line":15,"code":"static Header: typeof AppViewLayout.Header;","doc":"<p>Layout fragment for the application bar at the top of the screen, contains only one Row instance; all content passed into the initializer is automatically added to this row, not the container itself.</p>\n","declType":"typeof AppViewLayout.Header"},{"id":"App.HubViewLayout.Sidebar","name":"Sidebar","isStatic":true,"isProperty":true,"file":"dist/core/typings/App/View/Layout/App.d.ts","line":19,"code":"static Sidebar: typeof ScrollableLayout;","doc":"<p>Layout fragment for sidebar content.</p>\n","declType":"typeof ScrollableLayout"},{"id":"App.HubViewLayout.constructor","name":"new HubViewLayout","hasParams":false,"isCtor":true,"file":"dist/core/typings/App/View/Layout/App.d.ts","line":21,"code":"constructor();","doc":"<p>Create a view instance and initialize the sidebar/drawer combination.</p>\n"},{"id":"App.HubViewLayout/drawer","name":"drawer","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/App/View/Layout/App.d.ts","line":25,"code":"readonly drawer: DrawerContainer;","doc":"<p>Drawer compononent containing only the sidebar, for small viewports.</p>\n","declType":"DrawerContainer"},{"id":"App.HubViewLayout/sidebarCollapsed","name":"sidebarCollapsed","isProperty":true,"isReadOnly":true,"file":"dist/core/typings/App/View/Layout/App.d.ts","line":23,"code":"readonly sidebarCollapsed: boolean;","doc":"<p>True if the sidebar should be hidden, normally only on small screens but can be overridden by defining a getter for this property (observed, readonly).</p>\n","declType":"boolean"}],"inherits":["App.BaseLayout/appendChild","App.BaseLayout/bindFragment","App.BaseLayout/fragments"]},{"id":"App.LayoutClass","name":"LayoutClass","isInterface":true,"file":"dist/core/typings/App/View/ViewLayout.d.ts","line":0,"code":"interface LayoutClass","doc":"<p>Base interface for layout view classes, implemented by typeof <code>Blank</code>, <code>BlankDialog</code>, and all derived classes.</p>\n","items":[]},{"id":"App.MessageBoxLayout","name":"MessageBoxLayout","isClass":true,"file":"dist/core/typings/App/View/MessageBox.d.ts","line":1,"code":"class MessageBoxLayout extends BaseDialogLayout","doc":"<p>Modal dialog layout view used by <code>showMessageBox</code> that contains a title row fragment and a button row fragment, and all messages as separate rows in the main content area.</p>\n","extends":["App.BaseDialogLayout"],"items":[{"id":"App.MessageBoxLayout.ButtonRow","name":"ButtonRow","isStatic":true,"isProperty":true,"isReadOnly":true,"file":"dist/core/typings/App/View/MessageBox.d.ts","line":5,"code":"static readonly ButtonRow: typeof Row & ComponentFactory<Row>;","doc":"<p>Layout fragment for the message box button row, used by <code>showMessageBox</code> as a footer row on message box dialogs; can be used to apply global style overrides.</p>\n","declType":"typeof Row & ComponentFactory<Row>"},{"id":"App.MessageBoxLayout.DISMISS_LABEL","name":"DISMISS_LABEL","isStatic":true,"isProperty":true,"file":"dist/core/typings/App/View/MessageBox.d.ts","line":11,"code":"static DISMISS_LABEL: TextLabelFactory;","doc":"<p>Label used for the default “Dismiss” button when the arguments to <code>showMessageBox</code> do not include a single button; can be changed but must be a <code>UI.TextLabelFactory</code> (i.e. result of <code>UI.tl</code>).</p>\n","declType":"TextLabelFactory"},{"id":"App.MessageBoxLayout.FirstMessageRow","name":"FirstMessageRow","isStatic":true,"isProperty":true,"isReadOnly":true,"file":"dist/core/typings/App/View/MessageBox.d.ts","line":7,"code":"static readonly FirstMessageRow: typeof Row & ComponentFactory<Row>;","doc":"<p>Message row component factory (NOT a fragment), used by <code>showMessageBox</code> to construct the <em>first</em> message row; can be used to apply global style overrides.</p>\n","declType":"typeof Row & ComponentFactory<Row>"},{"id":"App.MessageBoxLayout.MessageRow","name":"MessageRow","isStatic":true,"isProperty":true,"isReadOnly":true,"file":"dist/core/typings/App/View/MessageBox.d.ts","line":9,"code":"static readonly MessageRow: typeof Row & ComponentFactory<Row>;","doc":"<p>Message row component factory (NOT a fragment), used by <code>showMessageBox</code> to construct the all message rows <em>other than the first row</em>; can be used to apply global style overrides.</p>\n","declType":"typeof Row & ComponentFactory<Row>"},{"id":"App.MessageBoxLayout.TitleRow","name":"TitleRow","isStatic":true,"isProperty":true,"isReadOnly":true,"file":"dist/core/typings/App/View/MessageBox.d.ts","line":3,"code":"static readonly TitleRow: typeof Row & ComponentFactory<Row>;","doc":"<p>Layout fragment for the message box title row, used by <code>showMessageBox</code> as the header of message box dialogs that contain a title; can be used to apply global style overrides.</p>\n","declType":"typeof Row & ComponentFactory<Row>"},{"id":"App.MessageBoxLayout.constructor","name":"new MessageBoxLayout","hasParams":false,"isCtor":true,"file":"dist/core/typings/App/View/MessageBox.d.ts","line":13,"code":"constructor();","doc":"<p>Create a new message box (without content); use <code>showMessageBox</code> function instead, to initialize and display a message box with a title, message, and predefined buttons.</p>\n"}],"inherits":["App.BaseDialogLayout/appendChild","App.BaseDialogLayout/bindFragment","App.BaseDialogLayout/fragments"]},{"id":"App.RootActivity","name":"RootActivity","isClass":true,"file":"dist/core/typings/App/Activity/Activity.d.ts","line":61,"code":"class RootActivity extends SingletonActivity","doc":"<p>Represents a singleton activity that is both a root activity (i.e. may exist only once on the activity stack, starting/replacing the activity again transitions the stack up to the existing activity instead), and a hub activity (i.e. starting any activity that specifies this activity as its parent activity, transitions the stack up to the hub activity first, suspending all other activities that used to be in the foreground), created only once and re-used if required (overrides .getInstance static method); abstract class, to be overridden.</p>\n","extends":["App.SingletonActivity"],"items":[{"id":"App.RootActivity.constructor","name":"new RootActivity","hasParams":true,"isCtor":true,"file":"dist/core/typings/App/Activity/Activity.d.ts","line":63,"code":"constructor(activation?: Activation | object);","doc":"<p>No description</p>\n"}],"inherits":["App.SingletonActivity.getInstance","App.Activity/activation","Async.ObservableObject/addObservableProperty","Async.ObservableObject/hasObservableProperty","App.Activity/options","App.Activity/title","App.Activity/uid","App.Activity/onCreateAsync","App.Activity/Deactivated","Async.ObservableObject/PropertyChange","App.Activity/Resumed","App.Activity/Resuming","App.Activity/Started","App.Activity/Starting","App.Activity/Suspended","App.Activity/Suspending"]},{"id":"App.ScrollableLayout","name":"ScrollableLayout","isClass":true,"file":"dist/core/typings/App/View/Layout/Single.d.ts","line":10,"code":"class ScrollableLayout extends ScrollableLayout_base\nScrollableLayout_base: typeof VerticalLayout & ComponentFactory<VerticalLayout>","doc":"<p>Represents a strictly vertical layout that contains a header container fragment and a footer container fragment, all other content will be added to the <em>scrollable</em> main content container.</p>\n","extends":["App.VerticalLayout"],"items":[{"id":"App.ScrollableLayout.Footer","name":"Footer","isStatic":true,"isProperty":true,"file":"dist/core/typings/App/View/Layout/Single.d.ts","line":14,"code":"static Footer: typeof VerticalLayout.Footer;","doc":"<p>Layout fragment for the scrollable container’s fixed footer.</p>\n","declType":"typeof VerticalLayout.Footer"},{"id":"App.ScrollableLayout.Header","name":"Header","isStatic":true,"isProperty":true,"file":"dist/core/typings/App/View/Layout/Single.d.ts","line":12,"code":"static Header: typeof VerticalLayout.Header;","doc":"<p>Layout fragment for the scrollable container’s fixed header.</p>\n","declType":"typeof VerticalLayout.Header"}],"inherits":["App.BaseLayout.constructor","App.BaseLayout/appendChild","App.BaseLayout/bindFragment","App.BaseLayout/fragments"]},{"id":"App.Service","name":"Service","isClass":true,"file":"dist/core/typings/App/Service/Service.d.ts","line":0,"code":"class Service extends Async.ObservableObject","doc":"<p>Service base class, to be extended to represent a service of which a singleton instance can be injected as a property of any other class (e.g. a view or activity class, or another service); service classes must be registered by ID, using the <code>mapService</code> decorator.</p>\n","extends":["Async.ObservableObject"],"items":[{"id":"App.Service.getInstance","name":"getInstance","hasParams":false,"isStatic":true,"isMethod":true,"file":"dist/core/typings/App/Service/Service.d.ts","line":2,"code":"static getInstance(): any;","doc":"<p>Get the singleton instance of this service class, can be overridden; by default returns a single instance, constructed without parameters only when needed, and never dereferenced.</p>\n"},{"id":"App.Service.constructor","name":"new Service","hasParams":false,"isCtor":true,"file":"dist/core/typings/App/Service/Service.d.ts","line":4,"code":"constructor();","doc":"<p>Singleton constructor; do not use directly, use <code>getInstance</code> instead.</p>\n"}],"inherits":["Async.ObservableObject/addObservableProperty","Async.ObservableObject/hasObservableProperty","Async.ObservableObject/PropertyChange"]},{"id":"App.SingletonActivity","name":"SingletonActivity","isClass":true,"file":"dist/core/typings/App/Activity/Activity.d.ts","line":48,"code":"class SingletonActivity extends Activity","doc":"<p>Represents an activity that should be created only once and re-used if required (overrides .getInstance static method); abstract class, to be overridden.</p>\n","extends":["App.Activity"],"items":[{"id":"App.SingletonActivity.getInstance","name":"getInstance","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/core/typings/App/Activity/Activity.d.ts","line":50,"code":"static getInstance(activation?: Activation | object): any;","doc":"<p>Get the instance of this activity class, constructs the instance without parameters once and returns this instance every time.</p>\n"},{"id":"App.SingletonActivity.constructor","name":"new SingletonActivity","hasParams":true,"isCtor":true,"file":"dist/core/typings/App/Activity/Activity.d.ts","line":52,"code":"constructor(activation?: Activation | object);","doc":"<p>Create a new activity; can be used only once.</p>\n"}],"inherits":["App.Activity/activation","Async.ObservableObject/addObservableProperty","Async.ObservableObject/hasObservableProperty","App.Activity/options","App.Activity/title","App.Activity/uid","App.Activity/onCreateAsync","App.Activity/Deactivated","Async.ObservableObject/PropertyChange","App.Activity/Resumed","App.Activity/Resuming","App.Activity/Started","App.Activity/Starting","App.Activity/Suspended","App.Activity/Suspending"]},{"id":"App.SupportActivity","name":"SupportActivity","isClass":true,"file":"dist/core/typings/App/Activity/Activity.d.ts","line":57,"code":"class SupportActivity extends SingletonActivity","doc":"<p>Represents a singleton activity that may only exist in the background (i.e. it should not be started directly, and it should be skipped when navigating back in history, enforced by <code>Application</code>), created only once and re-used if required (overrides .getInstance static method); abstract class, needs to be overridden.</p>\n","extends":["App.SingletonActivity"],"items":[{"id":"App.SupportActivity.constructor","name":"new SupportActivity","hasParams":true,"isCtor":true,"file":"dist/core/typings/App/Activity/Activity.d.ts","line":59,"code":"constructor(activation?: Activation | object);","doc":"<p>No description</p>\n"}],"inherits":["App.SingletonActivity.getInstance","App.Activity/activation","Async.ObservableObject/addObservableProperty","Async.ObservableObject/hasObservableProperty","App.Activity/options","App.Activity/title","App.Activity/uid","App.Activity/onCreateAsync","App.Activity/Deactivated","Async.ObservableObject/PropertyChange","App.Activity/Resumed","App.Activity/Resuming","App.Activity/Started","App.Activity/Starting","App.Activity/Suspended","App.Activity/Suspending"]},{"id":"App.VerticalLayout","name":"VerticalLayout","isClass":true,"file":"dist/core/typings/App/View/Layout/Single.d.ts","line":2,"code":"class VerticalLayout extends VerticalLayout_base\nVerticalLayout_base: typeof BaseLayout & ComponentFactory<BaseLayout>","doc":"<p>Represents a strictly vertical layout that contains a header container fragment and a footer container fragment; all other content will be added to the main content area.</p>\n","extends":["App.BaseLayout"],"items":[{"id":"App.VerticalLayout.Footer","name":"Footer","isStatic":true,"isProperty":true,"file":"dist/core/typings/App/View/Layout/Single.d.ts","line":6,"code":"static Footer: typeof Container;","doc":"<p>Layout fragment for the container’s fixed footer.</p>\n","declType":"typeof Container"},{"id":"App.VerticalLayout.Header","name":"Header","isStatic":true,"isProperty":true,"file":"dist/core/typings/App/View/Layout/Single.d.ts","line":4,"code":"static Header: typeof Container;","doc":"<p>Layout fragment for the container’s fixed header.</p>\n","declType":"typeof Container"}],"inherits":["App.BaseLayout.constructor","App.BaseLayout/appendChild","App.BaseLayout/bindFragment","App.BaseLayout/fragments"]},{"id":"App.addServiceAlias","name":"addServiceAlias","hasParams":true,"isFunction":true,"file":"dist/core/typings/App/Service/Service.d.ts","line":9,"code":"function addServiceAlias(newId: string, serviceId: string): void;","doc":"<p>Add an alias for the given service by ID, so that the aliased service <em>also</em> becomes available using the given alias; the aliased service does not need to have been mapped yet.</p>\n","declType":"void"},{"id":"App.findActivity","name":"findActivity","hasParams":true,"isFunction":true,"file":"dist/core/typings/App/Application.d.ts","line":48,"code":"function findActivity<T>(ActivityClass: typeof Activity & { new (...args: any[]): T; }): T | undefined;","doc":"<p>Get the activity closest to the foreground of given type, if any.</p>\n","typeParams":["T"],"declType":"T | undefined"},{"id":"App.isLayoutFragment","name":"isLayoutFragment","hasParams":true,"isFunction":true,"file":"dist/core/typings/App/View/ViewLayout.d.ts","line":9,"code":"function isLayoutFragment(component: Component): boolean;\nfunction isLayoutFragment(component: Component, layout: Component): boolean;","doc":"<p>[1]. Returns true if given component is a layout fragment, i.e. an instantiation of a component class (or factory) that is referenced using the <code>layoutFragment</code> decorator on a layout view class.</p>\n<p>[2]. Returns true if given component can be used as a layout fragment on given layout view, i.e. the component is an instantiation of a component class (or factory) that is referenced using the <code>layoutFragment</code> decorator on given layout view class.</p>\n","declType":"boolean | boolean","count":2},{"id":"App.showMessageBox","name":"showMessageBox","hasParams":true,"isFunction":true,"file":"dist/core/typings/App/View/MessageBox.d.ts","line":16,"code":"function showMessageBox(message: string | TextLabelFactory | Array<string | TextLabelFactory>): PromiseLike<number | undefined>;\nfunction showMessageBox(title: string | TextLabelFactory, message: string | TextLabelFactory | Array<string | TextLabelFactory>): PromiseLike<number | undefined>;\nfunction showMessageBox(message: string | TextLabelFactory | Array<string | TextLabelFactory>, ...buttons: ComponentFactory<Button>[]): PromiseLike<number | undefined>;\nfunction showMessageBox(title: string | TextLabelFactory, message: string | TextLabelFactory | Array<string | TextLabelFactory>, ...buttons: ComponentFactory<Button>[]): PromiseLike<number | undefined>;","doc":"<p>[1]. Show a modal message dialog box with given message(s) and a “Dismiss” button; returns a promise that is fulfilled when the dialog is closed.</p>\n<p>[2]. Show a modal message dialog box with given title and message(s) and a “Dismiss” button; returns a promise that is fulfilled when the dialog is closed.</p>\n<p>[3]. Show a modal message dialog box with given message(s) and buttons (as result(s) of <code>Button.with(...)</code>); returns a promise that resolves to the index of the button that was clicked, or undefined if the dialog was dismissed otherwise (e.g. ESC key).</p>\n<p>[4]. Show a modal message dialog box with given title, message(s), and buttons (as result(s) of <code>Button.with(...)</code>); returns a promise that resolves to the index of the button that was clicked, or undefined if the dialog was dismissed otherwise (e.g. ESC key).</p>\n","declType":"PromiseLike<number | undefined> | PromiseLike<number | undefined> | PromiseLike<number | undefined> | PromiseLike<number | undefined>","isAsync":true,"count":4},{"id":"App.startActivityAsync","name":"startActivityAsync","hasParams":true,"isFunction":true,"file":"dist/core/typings/App/Application.d.ts","line":46,"code":"function startActivityAsync(activityOrPath: Activity | typeof Activity | Activation | string, replace?: boolean, navigateIfNotFound?: boolean): PromiseLike<ActivityTransition | undefined>;","doc":"<p>Alias for <code>Application#startActivityAsync</code> on the current <code>Application</code> instance; if there is no current instance, this function waits for an Application instance to be created first.</p>\n","declType":"PromiseLike<ActivityTransition | undefined>","isAsync":true},{"id":"App.injectService","name":"injectService","hasParams":true,"isFunction":true,"file":"dist/core/typings/App/Service/Service.d.ts","line":11,"code":"function injectService(target: object, propertyKey: string): void;\nfunction injectService(id: string): PropertyDecorator;","doc":"<p>[1]. <em>Property decorator</em>, injects an instance of the <code>Service</code> class that is registered with the same ID as the name of the decorated propety (lowerCamelCase is converted to UpperCamelCase) into this property as and when it becomes available [decorator].</p>\n<p>[2]. <em>Property decorator</em>, injects an instance of the <code>Service</code> class that is registered with given ID (must be UpperCamelCase) into this property as and when it becomes available [decorator].</p>\n","declType":"void | PropertyDecorator","isDecorator":true,"count":2},{"id":"App.layoutFragment","name":"layoutFragment","hasParams":true,"isFunction":true,"file":"dist/core/typings/App/View/ViewLayout.d.ts","line":13,"code":"function layoutFragment(target: LayoutClass, id: string): void;","doc":"<p><em>Property decorator</em>, defines the UI Component class (or factory) referenced by the decorated static property as a layout fragment, for use with layout views (i.e. classes defined on <code>Layout</code> namespace and derived classes), such that instances of the referenced component class are added to the <code>fragments</code> object on layout view instances [decorator].</p>\n","declType":"void","isDecorator":true},{"id":"App.mapActivation","name":"mapActivation","hasParams":true,"isFunction":true,"file":"dist/core/typings/App/Activity/Activation.d.ts","line":16,"code":"function mapActivation(activationType: typeof Activation): (target: typeof Activity & { getInstance(activation: Activation): Activity; }) => void;","doc":"<p><em>Class decorator</em>, maps the decorated <code>Activity</code> class to given <code>Activation</code> type, so that routed (path/URL) and manual activations (using an activation object) lead to the instantiation of the decorated <code>Activity</code> [decorator].</p>\n","declType":"(target: typeof Activity & {\n    getInstance(activation: Activation): Activity;\n}) => void","isDecorator":true},{"id":"App.mapParentActivity","name":"mapParentActivity","hasParams":true,"isFunction":true,"file":"dist/core/typings/App/Activity/Activity.d.ts","line":65,"code":"function mapParentActivity(parentActivityClass: typeof Activity): (target: typeof Activity) => void;","doc":"<p><em>Class decorator</em>, associates a parent activity class with the decorated <code>Activity</code> class: whenever an activity instance of the class decorated with this decorator is started, an instance of the given parent activity class must already exist on the stack, or a (new) instance will be started in advance [decorator].</p>\n","declType":"(target: typeof Activity) => void","isDecorator":true},{"id":"App.mapRoute","name":"mapRoute","hasParams":true,"isFunction":true,"file":"dist/core/typings/App/Activity/Activation.d.ts","line":14,"code":"function mapRoute(route: string, name?: string): (target: typeof Activity | typeof Activation | (new (activity: Activity) => Component | Page)) => void;","doc":"<p><em>Class decorator</em>, maps the decorated <code>Activation</code> (sub) class OR <code>Activity</code> class OR <code>Component</code> (ui module) class to the given route (e.g <code>dashboard</code>, <code>/users/:userID/post/:postID</code> or <code>#/docs/*docName</code>); if a name is provided, it can be used at the start of sub routes, using <code>&amp;name/sub/route</code> (without leading hash/slash chars); multiple routes can be added per class; if the decorated class is an <code>Activity</code> class, a unique <code>Activation</code> sub class is generated automatically, and if the decorated class is a UI <code>Component</code> or <code>Page</code> class, a unique <code>Activity</code> class is also generated [decorator].</p>\n","declType":"(target: typeof Activity | typeof Activation | (new (activity: Activity) => Component | Page)) => void","isDecorator":true},{"id":"App.mapService","name":"mapService","hasParams":true,"isFunction":true,"file":"dist/core/typings/App/Service/Service.d.ts","line":7,"code":"function mapService(...id: string[]): (target: typeof Service) => void;","doc":"<p><em>Class decorator</em>, registers the decorated <code>Service</code> class using given UpperCamelCase ID(s), so that injected properties (see <code>injectService</code>) decorated with a matching service ID automatically contain a reference to a singleton instance of the decorated <code>Service</code> [decorator].</p>\n","declType":"(target: typeof Service) => void","isDecorator":true},{"id":"App.mapViewActivity","name":"mapViewActivity","hasParams":true,"isFunction":true,"file":"dist/core/typings/App/View/ViewMapping.d.ts","line":1,"code":"function mapViewActivity<ActivityT extends Activity>(activityClass: { new (...args: any[]): ActivityT; }, dereferenceTimeout?: number): (target: new (activity: ActivityT) => Component | Page) => void;","doc":"<p><em>Class decorator</em>, maps the decorated view class to an <code>Activity</code> class; the view class should be a UI <code>Component</code> or <code>Page</code> class with a constructor that has a single matching activity argument, possibly a view layout or fragment class that derives from the types in the <code>Layout</code> namespace; if the view class is a fragment, it is automatically added to the (parent) activity’s matching view; re-uses view instances when possible, but views are dereferenced within given timeout when no longer in use (in ms, defaults to 2s, set to 0 to disable) [decorator].</p>\n","typeParams":["ActivityT extends Activity"],"declType":"(target: new (activity: ActivityT) => Component | Page) => void","isDecorator":true},{"id":"App.CultureChanged","name":"CultureChanged","isVar":true,"file":"dist/core/typings/App/Culture/Observer.d.ts","line":3,"code":"CultureChanged: Signal.Emittable<CultureService>","doc":"<p>Signal that is emitted when the global i18n culture changes (through <code>CultureService</code>).</p>\n","declType":"Signal.Emittable<CultureService>","isSignal":true}],"text":[{"content":"<p>This sub module exports classes and functions that can be used to create full featured web applications.</p>\n<p><a href=\"~/start/app\"><i class=\"fa fa-play\"></i>Get started with the <code>App</code> module</a></p>\n"}],"isNamespace":true,"sourceIdx":2},{"name":"Factory bindings","id":"start/ui/bindings/factories","textSort":"03","text":[],"sourceIdx":38,"textParent":"start/ui/bindings"},{"name":"Event handling","id":"start/ui/events","textSort":"03","text":[{"type":"intro","content":"<p>Respond to user input by connecting to event signals.</p>\n"}],"sourceIdx":42,"textParent":"start/ui"},{"name":"Samples","id":"samples","textSort":"03","text":[{"content":"<p>The following sections provide a number of complete samples, demonstrating one or more aspects of developing web applications with Typescene.</p>\n"}],"sourceIdx":50,"toc":["samples/hello","samples/bindComponents"]},{"name":"Bindings","id":"start/ui/bindings","textSort":"04","textSkipTOC":"true","text":[{"type":"intro","content":"<p>Use value, array, and factory bindings to reflect your components’ view state asynchronously.</p>\n"},{"title":"About bindings","content":"<p>“One-way” bindings can be used for keeping your user interface up to date, as the data inside your (view) model changes. The updated data is read automatically, passed through one or more transformation functions, and displayed asynchronously by one of your UI components.</p>\n<p>“Two-way” bindings work the other way around as well: they update your model data from values captured by UI components, e.g. text field input values.</p>\n<p>When you provide bindings as part of the structure provided to the static <code>.with</code> functions, they are automatically connected and activated.</p>\n"},{"title":"Topics","content":"<dl>\n<dt><a href=\"~/start/ui/bindings/properties\"><i class=\"fa fa-file-text-o\"></i>Property bindings</a></dt>\n<dd>Bind single values between components using the <code>bind</code> and <code>bind2</code> functions.</dd>\n<dt><a href=\"~/start/ui/bindings/arrays\"><i class=\"fa fa-file-text-o\"></i>Array bindings</a></dt>\n<dd>Bind lists of values to asynchronous component arrays using the <code>bindComponents</code> function.</dd>\n<dt><a href=\"~/start/ui/bindings/factories\"><i class=\"fa fa-file-text-o\"></i>Factory bindings</a></dt>\n<dd>Understand the recursive nature of component factories, and learn how to bind factories within component factories.</dd>\n</dl>\n"}],"sourceIdx":40,"toc":["start/ui/bindings/properties","start/ui/bindings/arrays","start/ui/bindings/factories"],"textParent":"start/ui"},{"name":"Component list binding and animations","id":"samples/bindComponents","textSort":"10","text":[{"content":"<p>The following example shows that the components really are bound to distinct model objects when using <code>UI.bindComponents</code>. Components move around visually when the array changes, with some asynchronous animation magic.</p>\n"},{"type":"example","displayResult":"View","content":"<pre><code class=\"language-typescript\">/** Model representation */\nclass MyNumber {\n    constructor(public n: number) { }\n}\n\n/** Represents each item in the list of numbers */\nclass ListItem extends UI.Row.with(\n    { spacing: &quot;.5rem&quot;, style: { display: &quot;inline-block&quot; } },\n    UI.Label.with({\n        text: UI.bind(&quot;myNumber.n&quot;),\n        style: { padding: &quot;.5rem&quot;, background: &quot;#ccc&quot; }\n    })\n) {\n    // this constructor is called by `UI.bindComponents`\n    constructor(public myNumber: number) {\n        super();\n        this.animations = { appear: UI.DOM.DOMAnimation.basic.in.fadeDown }\n    }\n}\n\n/** The container view component */\nclass View extends UI.Container.with(\n    UI.Row.with(\n        UI.tl`{h4}Random numbers`,\n        UI.Spacer,\n        UI.Button.withLabel(&quot;Randomize&quot;, &quot;randomize&quot;),\n        UI.PrimaryButton.withLabel(&quot;Shuffle&quot;, &quot;shuffle&quot;)\n    ),\n    UI.Divider,\n    UI.List.with({\n        height: &quot;14rem&quot;,\n        items: UI.bindComponents(&quot;numbers&quot;, ListItem, true),\n        renderOptions: { animateListItems: 500 }\n    })\n) {\n    /** Create a new view and randomize the array */\n    constructor() {\n        super();\n        this.randomize();\n    }\n    \n    /** An observable array of numbers */\n    @Async.observable numbers: MyNumber[];\n    \n    /** Randomize numbers one by one */\n    async randomize() {\n        this.numbers = [];\n        var a = this.numbers;\n        for (var i = 0; i &lt; 10; i++) {\n            a.push(new MyNumber(Math.random()));\n            await Async.sleep(100);\n        }\n    }\n    \n    /** Randomize positions, with a touch of async for effect */\n    async shuffle() {\n        var a = this.numbers;\n        for (var i = a.length - 1; i &gt; 0; i--) {\n            var j = Math.floor(Math.random() * (i + 1));\n            [a[i], a[j]] = [a[j], a[i]];\n            await Async.sleep(150);\n        }\n    }\n}\n</code></pre>\n"}],"sourceIdx":48,"textParent":"samples"},{"name":"API Reference","id":"reference","textTopic":"Reference","textAutoOpen":"true","textSkipTOC":"true","textSummary":"Reference Index","textSort":"99","text":[{"type":"intro","content":"<p>This section lists all namespaces, classes, functions, interfaces, and other types included in the Typescene API.</p>\n"},{"type":"note","content":"<p><strong>Tip:</strong> To search for or filter by the name of a public identifier in this reference, use the ‘Filter’ field on the left.</p>\n"},{"title":"In this section","content":"<dl>\n<dt><a href=\"~/Async\"><i class=\"fa fa-cubes\"></i><code>Async</code> module</a></dt>\n<dd>This module contains tools and constructs that streamline asynchronous programming.</dd>\n<dt><a href=\"~/UI\"><i class=\"fa fa-cubes\"></i><code>UI</code> module</a></dt>\n<dd>This module contains all UI components along with supporting classes and functions.</dd>\n<dt><a href=\"~/App\"><i class=\"fa fa-cubes\"></i><code>App</code> module</a></dt>\n<dd>This module contains tools and constructs that can be used to make single-page web applications.</dd>\n</dl>\n"}],"sourceIdx":51,"toc":["Async","UI","App"]},{"name":"DOM","id":"UI.DOM","items":[{"id":"UI.DOM.DOMAnimation","name":"DOMAnimation","isClass":true,"file":"dist/dom/typings/UI/DOM/DOMAnimation.d.ts","line":0,"code":"class DOMAnimation extends Animation","doc":"<p>Represents a CSS keyframe animation.</p>\n","extends":["UI.Animation"],"items":[{"id":"UI.DOM.DOMAnimation.Keyframe","name":"Keyframe","isInterface":true,"file":"dist/dom/typings/UI/DOM/DOMAnimation.d.ts","line":18,"code":"interface Keyframe","doc":"<p>Represents a single keyframe in an animation.</p>\n","isStatic":true,"items":[{"id":"UI.DOM.DOMAnimation.Keyframe/style","name":"style","isProperty":true,"file":"dist/dom/typings/UI/DOM/DOMAnimation.d.ts","line":22,"code":"style: Style.StyleSet | Style;","doc":"<p>Keyframe style properties.</p>\n","declType":"Style.StyleSet | Style"},{"id":"UI.DOM.DOMAnimation.Keyframe/t","name":"t","isProperty":true,"file":"dist/dom/typings/UI/DOM/DOMAnimation.d.ts","line":20,"code":"t?: number;","doc":"<p>Keyframe position (fraction, 0-1), defaults to the relative position of this keyframe from 0 to 1 (i.e. first keyframe to 0, second in a set of three keyframes to 0.5, second in a set of four keyframes to 0.25, etc).</p>\n","declType":"number"}]},{"id":"UI.DOM.DOMAnimation.Options","name":"Options","isInterface":true,"file":"dist/dom/typings/UI/DOM/DOMAnimation.d.ts","line":25,"code":"interface Options","doc":"<p>Keyframe animation options.</p>\n","isStatic":true,"items":[{"id":"UI.DOM.DOMAnimation.Options/count","name":"count","isProperty":true,"file":"dist/dom/typings/UI/DOM/DOMAnimation.d.ts","line":33,"code":"count?: number;","doc":"<p>Number of iterations to play (default 1; can be Infinity).</p>\n","declType":"number"},{"id":"UI.DOM.DOMAnimation.Options/delay","name":"delay","isProperty":true,"file":"dist/dom/typings/UI/DOM/DOMAnimation.d.ts","line":31,"code":"delay?: number;","doc":"<p>Delay in milliseconds before starting the animation (default 0).</p>\n","declType":"number"},{"id":"UI.DOM.DOMAnimation.Options/direction","name":"direction","isProperty":true,"file":"dist/dom/typings/UI/DOM/DOMAnimation.d.ts","line":35,"code":"direction?: \"normal\" | \"reverse\" | \"alternate\" | \"alternate-reverse\";","doc":"<p>Direction to play the keyframes in (normal, reverse, alternate, or alternate-reverse; default normal).</p>\n","declType":"\"normal\" | \"reverse\" | \"alternate\" | \"alternate-reverse\""},{"id":"UI.DOM.DOMAnimation.Options/duration","name":"duration","isProperty":true,"file":"dist/dom/typings/UI/DOM/DOMAnimation.d.ts","line":27,"code":"duration?: number;","doc":"<p>Duration in milliseconds (default 500).</p>\n","declType":"number"},{"id":"UI.DOM.DOMAnimation.Options/ease","name":"ease","isProperty":true,"file":"dist/dom/typings/UI/DOM/DOMAnimation.d.ts","line":37,"code":"ease?: boolean;","doc":"<p>Set to true to ease the animation timing.</p>\n","declType":"boolean"},{"id":"UI.DOM.DOMAnimation.Options/specDuration","name":"specDuration","isProperty":true,"file":"dist/dom/typings/UI/DOM/DOMAnimation.d.ts","line":29,"code":"specDuration?: number;","doc":"<p>Duration specified in CSS (copied from duration if unspecified).</p>\n","declType":"number"}]},{"id":"UI.DOM.DOMAnimation.together","name":"together","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/dom/typings/UI/DOM/DOMAnimation.d.ts","line":2,"code":"static together(...animations: DOMAnimation[]): Animation;","doc":"<p>Create a combined animation out of given key frame animations.</p>\n","declType":"Animation"},{"id":"UI.DOM.DOMAnimation.constructor","name":"new DOMAnimation","hasParams":true,"isCtor":true,"file":"dist/dom/typings/UI/DOM/DOMAnimation.d.ts","line":4,"code":"constructor(name: string, keyframes?: DOMAnimation.Keyframe[], options?: DOMAnimation.Options);","doc":"<p>Get an animation with given keyframes and given playback options ready for use.</p>\n"},{"id":"UI.DOM.DOMAnimation/clone","name":"clone","hasParams":true,"isMethod":true,"file":"dist/dom/typings/UI/DOM/DOMAnimation.d.ts","line":6,"code":"clone(options: DOMAnimation.Options): DOMAnimation;","doc":"<p>Clone the animation with the same keyframes but with extra options.</p>\n","declType":"DOMAnimation"},{"id":"UI.DOM.DOMAnimation/play","name":"play","hasParams":true,"isMethod":true,"file":"dist/dom/typings/UI/DOM/DOMAnimation.d.ts","line":14,"code":"play(component: Component): Animation.AnimationControl<DOMAnimation>;","doc":"<p>Play the animation once on given component.</p>\n","declType":"Animation.AnimationControl<DOMAnimation>"},{"id":"UI.DOM.DOMAnimation/reverse","name":"reverse","hasParams":false,"isMethod":true,"file":"dist/dom/typings/UI/DOM/DOMAnimation.d.ts","line":12,"code":"reverse(): DOMAnimation;","doc":"<p>Clone this animation and specify to be played in reverse.</p>\n","declType":"DOMAnimation"},{"id":"UI.DOM.DOMAnimation/togetherWith","name":"togetherWith","hasParams":true,"isMethod":true,"file":"dist/dom/typings/UI/DOM/DOMAnimation.d.ts","line":8,"code":"togetherWith(...animations: DOMAnimation[]): Animation;","doc":"<p>Combine this animation with given key frame animations; this does <em>not</em> work for animations that use the same CSS property, such as <code>transform</code> (rotate, scale, translate…).</p>\n","declType":"Animation"},{"id":"UI.DOM.DOMAnimation/withTiming","name":"withTiming","hasParams":true,"isMethod":true,"file":"dist/dom/typings/UI/DOM/DOMAnimation.d.ts","line":10,"code":"withTiming(msDuration: number, msDelay?: number): DOMAnimation;","doc":"<p>Clone this animation and override timings.</p>\n","declType":"DOMAnimation"}],"isNamespace":true,"inherits":["UI.Animation.disableAll","UI.Animation.enableAll","UI.Animation/duration","UI.Animation/id","UI.Animation/name","UI.Animation/playOnce"]},{"id":"UI.DOM.DOMBlock","name":"DOMBlock","isClass":true,"file":"dist/dom/typings/UI/DOM/DOMBlock.d.ts","line":1,"code":"class DOMBlock extends Block","doc":"<p>Platform specific Block base class: full-width horizontal block containing DOM element(s).</p>\n","extends":["UI.Block"],"items":[{"id":"UI.DOM.DOMBlock.constructor","name":"new DOMBlock","hasParams":true,"isCtor":true,"file":"dist/dom/typings/UI/DOM/DOMBlock.d.ts","line":3,"code":"constructor(...elements: Array<Node | Async.ObservableValue<Node>>);\nconstructor(documentFragment: DocumentFragment);","doc":"<p>[1]. Create a new block component with given content.</p>\n<p>[2]. Create a new block component with elements from the given DOM fragment.</p>\n","count":2},{"id":"UI.DOM.DOMBlock/nodes","name":"nodes","isProperty":true,"file":"dist/dom/typings/UI/DOM/DOMBlock.d.ts","line":7,"code":"nodes: Array<Node | undefined>;","doc":"<p>Array of DOM nodes (observed).</p>\n","declType":"Array<Node | undefined>"}],"inherits":["UI.Component.addStyleOverride","Async.ObservableObject/addObservableProperty","UI.Component/addShadowEffectOnFocus","UI.Component/addShadowEffectOnHover","UI.Component/animate","UI.Component/animations","UI.Component/appendChild","UI.Component/contains","UI.Component/displayOptions","UI.Component/flowDirection","UI.Component/focusMode","UI.Component/getActualDimensions","UI.Component/getChildren","UI.Component/getComponentById","UI.Component/getComponentsByType","UI.Component/getFormValues","UI.Component/getLastRenderedOutput","UI.Component/getLastSelectedChild","UI.Component/getRenderedOutputAsync","UI.Component/getSelectedChildren","UI.Component/hasFocus","Async.ObservableObject/hasObservableProperty","UI.Component/height","UI.Component/hidden","UI.Component/hoverState","UI.Component/id","UI.Component/initialize","UI.Block/initializeWith","UI.Component/out","UI.Block/overlayPosition","UI.Component/render","UI.Component/renderOptions","UI.Component/selected","UI.Component/selectionMode","UI.Component/setFormValues","UI.Component/shadowEffect","UI.Component/style","UI.Component/uid","UI.Component/width","UI.Component/createComponentSignal","UI.Component/Renderer","UI.Component/beforeFirstRender","UI.Component/ArrowDownKeyPressed","UI.Component/ArrowLeftKeyPressed","UI.Component/ArrowRightKeyPressed","UI.Component/ArrowUpKeyPressed","UI.Component/BackspaceKeyPressed","UI.Component/Blur","UI.Component/Click","UI.Component/Clicked","UI.Component/DeleteKeyPressed","UI.Component/DoubleClick","UI.Component/DoubleClicked","UI.Component/DragDrop","UI.Component/DragEnter","UI.Component/DragLeave","UI.Component/DragStart","UI.Component/EnterKeyPressed","UI.Component/EscapeKeyPressed","UI.Component/Focus","UI.Component/FocusGained","UI.Component/FocusLost","UI.Component/KeyDown","UI.Component/KeyPress","UI.Component/MouseContextMenu","UI.Component/MouseEnter","UI.Component/MouseLeave","UI.Component/Press","UI.Component/Pressed","Async.ObservableObject/PropertyChange","UI.Component/Rendered","UI.Component/SpaceBarPressed"]},{"id":"UI.DOM.DOMPageOptions","name":"DOMPageOptions","isInterface":true,"file":"dist/dom/typings/UI/DOM/DOMPageOptions.d.ts","line":0,"code":"interface DOMPageOptions","doc":"<p>Collection of options that control page rendering.</p>\n","items":[{"id":"UI.DOM.DOMPageOptions/baseZIndex","name":"baseZIndex","isProperty":true,"file":"dist/dom/typings/UI/DOM/DOMPageOptions.d.ts","line":1,"code":"baseZIndex: number;","doc":"<p>The z-index style property of the page and all content (default 1000).</p>\n","declType":"number"},{"id":"UI.DOM.DOMPageOptions/shadeColor","name":"shadeColor","isProperty":true,"file":"dist/dom/typings/UI/DOM/DOMPageOptions.d.ts","line":7,"code":"shadeColor: string;","doc":"<p>CSS base color for the modal “shade” backdrop (default “#000”).</p>\n","declType":"string"},{"id":"UI.DOM.DOMPageOptions/shadeOpacity","name":"shadeOpacity","isProperty":true,"file":"dist/dom/typings/UI/DOM/DOMPageOptions.d.ts","line":5,"code":"shadeOpacity: number;","doc":"<p>Opacity level (0-1) for the modal “shade” backdrop (default 0.2).</p>\n","declType":"number"},{"id":"UI.DOM.DOMPageOptions/shadeTransition","name":"shadeTransition","isProperty":true,"file":"dist/dom/typings/UI/DOM/DOMPageOptions.d.ts","line":3,"code":"shadeTransition: number;","doc":"<p>Timing (ms) for the modal “shade” in/out animation (default 200).</p>\n","declType":"number"}]},{"id":"UI.DOM.PAGE_OPTIONS","name":"PAGE_OPTIONS","isVar":true,"file":"dist/dom/typings/UI/DOM/DOMPageOptions.d.ts","line":12,"code":"PAGE_OPTIONS: DOMPageOptions","doc":"<p>Options that control page rendering.</p>\n","declType":"DOMPageOptions"},{"id":"UI.DOM.Styles","name":"Styles","isNamespace":true,"file":"dist/dom/typings/UI/DOM/Styles.d.ts","line":1,"code":"namespace Styles","doc":"<p>A set of predefined styles and style sheets that are used by specific components; these may be modified to apply a “theme”, which will generally update all styles in the DOM asynchronously; <em>however</em>, styles defined here are subject to change for now and it is not guaranteed that selectors and class names will continue to exist across versions.</p>\n","items":[{"id":"UI.DOM.Styles.color","name":"color","isStatic":true,"isProperty":true,"file":"dist/dom/typings/UI/DOM/Styles.d.ts","line":26,"code":"color: { black: string; white: string; darkerGray: string; darkGray: string; lightGray: string; slate: string; lightSlate: string; red: string; orange: string; yellow: string; lime: string; green: string; turquoise: string; cyan: string; blue: string; violet: string; purple: string; magenta: string; background: string; text: string; textFaded: string; divider: string; primary: string; primaryText: string; primaryDark: string; primaryLight: string; accent: string; accentText: string; accentDark: string; accentLight: string; linkText: string; linkVisitedText: string; titleBarBackground: string; titleBarText: string; listSelectionBackground: string; listSelectionText: string; listSelectionFocusBackground: string; listSelectionFocusText: string; controlBase: string; controlBaseText: string; controlFocus: string; controlFocusText: string; } & ObservableObject","doc":"<p>Contains an observable color scheme based on the color wheel, with a selection of primary and accent colors; custom observable properties can be added here if required.</p>\n","declType":"{\n        black: string;\n        white: string;\n        darkerGray: string;\n        darkGray: string;\n        lightGray: string;\n        slate: string;\n        lightSlate: string;\n        red: string;\n        orange: string;\n        yellow: string;\n        lime: string;\n        green: string;\n        turquoise: string;\n        cyan: string;\n        blue: string;\n        violet: string;\n        purple: string;\n        magenta: string;\n        background: string;\n        text: string;\n        textFaded: string;\n        divider: string;\n        primary: string;\n        primaryText: string;\n        primaryDark: string;\n        primaryLight: string;\n        accent: string;\n        accentText: string;\n        accentDark: string;\n        accentLight: string;\n        linkText: string;\n        linkVisitedText: string;\n        titleBarBackground: string;\n        titleBarText: string;\n        listSelectionBackground: string;\n        listSelectionText: string;\n        listSelectionFocusBackground: string;\n        listSelectionFocusText: string;\n        controlBase: string;\n        controlBaseText: string;\n        controlFocus: string;\n        controlFocusText: string;\n    } & ObservableObject"},{"id":"UI.DOM.Styles.components","name":"components","isStatic":true,"isProperty":true,"file":"dist/dom/typings/UI/DOM/Styles.d.ts","line":5,"code":"components: { readonly [className: string]: Stylesheet; }","doc":"<p>Groups basic component style sheet definitions together, indexed by class name (e.g. “UI-Container”).</p>\n","declType":"{\n        readonly [className: string]: Stylesheet;\n    }"},{"id":"UI.DOM.Styles.controlStyles","name":"controlStyles","isStatic":true,"isProperty":true,"file":"dist/dom/typings/UI/DOM/Styles.d.ts","line":73,"code":"controlStyles: Stylesheet","doc":"<p>Basic control theme stylesheet that uses colors from the <code>.color</code> object, <em>enabled by default</em>: applied as a live stylesheet at the page level for this instance; can be modified to adjust or add CSS reset styles, or disabled using the <code>.disable()</code> method if external CSS styles are already loaded.</p>\n","declType":"Stylesheet"},{"id":"UI.DOM.Styles.font","name":"font","isStatic":true,"isProperty":true,"file":"dist/dom/typings/UI/DOM/Styles.d.ts","line":9,"code":"font: { family: string; } & ObservableObject","doc":"<p>Contains basic font settings that are applied globally for this instance; to disable, either set value(s) to <code>inherit</code>, or disable <code>cssReset</code> altogether.</p>\n","declType":"{\n        family: string;\n    } & ObservableObject"},{"id":"UI.DOM.Styles.rebootStyles","name":"rebootStyles","isStatic":true,"isProperty":true,"file":"dist/dom/typings/UI/DOM/Styles.d.ts","line":71,"code":"rebootStyles: Stylesheet","doc":"<p>CSS reboot stylesheet that defines basic styles for common HTML elements (except those already overridden by <code>Component</code> renderers), <em>enabled by default</em>: applied as a live stylesheet at the page level for this instance; can be modified to adjust or add CSS reset styles, or disabled using the <code>.disable()</code> method if an external CSS reset stylesheet is already loaded.</p>\n","declType":"Stylesheet"},{"id":"UI.DOM.Styles.size","name":"size","isStatic":true,"isProperty":true,"file":"dist/dom/typings/UI/DOM/Styles.d.ts","line":13,"code":"size: { text: string; paragraphLineHeight: string; controlSpacing: string; listSelectionFocusOutline: string; dialogBorderRadius: string; cardBorderRadius: string; badgeBorderRadius: string; buttonBorderRadius: string; inputBorderRadius: string; controlBorderWidth: string; } & ObservableObject","doc":"<p>Contains basic measurements that determine the sizing of text and certain components; custom observable properties can be added here if required.</p>\n","declType":"{\n        text: string;\n        paragraphLineHeight: string;\n        controlSpacing: string;\n        listSelectionFocusOutline: string;\n        dialogBorderRadius: string;\n        cardBorderRadius: string;\n        badgeBorderRadius: string;\n        buttonBorderRadius: string;\n        inputBorderRadius: string;\n        controlBorderWidth: string;\n    } & ObservableObject"}]},{"id":"UI.DOM.Stylesheet","name":"Stylesheet","isClass":true,"file":"dist/dom/typings/UI/DOM/Stylesheet.d.ts","line":2,"code":"class Stylesheet","doc":"<p>Represents a (live updating) style sheet, with an optional base class name; the style sheet consists of one or more CSS selectors that each contain a reference to a <code>Style</code> instance.</p>\n","items":[{"id":"UI.DOM.Stylesheet.isBrightColor","name":"isBrightColor","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/dom/typings/UI/DOM/Stylesheet.d.ts","line":4,"code":"static isBrightColor(color: string): boolean;","doc":"<p>Returns true if the pseudo-luminance of given color (in hex format <code>#112233</code> or <code>#123</code> or rgb format <code>rgb(255, 255, 255)</code> or hsl format <code>hsl(255, 0%, 0%)</code>) is greater than 55%; can be used e.g. to decide on a contrasting text color for a given background color.</p>\n","declType":"boolean"},{"id":"UI.DOM.Stylesheet.mixColors","name":"mixColors","hasParams":true,"isStatic":true,"isMethod":true,"file":"dist/dom/typings/UI/DOM/Stylesheet.d.ts","line":6,"code":"static mixColors(color1: string, color2: string, p: number): string;","doc":"<p>Returns a color in hex format (e.g. <code>#112233</code>) that lies between given colors (in hex format <code>#112233</code> or <code>#123</code> or rgb format <code>rgb(255, 255, 255)</code>) at given point (0-1, with 0 being the same as the first color, 1 being the same as the second color, and 0.5 being an equal mix).</p>\n","declType":"string"},{"id":"UI.DOM.Stylesheet.constructor","name":"new Stylesheet","hasParams":true,"isCtor":true,"file":"dist/dom/typings/UI/DOM/Stylesheet.d.ts","line":8,"code":"constructor(baseClassName?: string, sheet?: { [selector: string]: Style.StyleSet | Style | undefined; });","doc":"<p>Create a new style sheet, with given base class name(s) (optional) and given selectors and styles; selectors may be written as <code>&quot;@... { selector }&quot;</code> for e.g. @keyframe and @media nested at-rules; also, <code>.~~</code> will be replaced with the full base class name and <code>.~</code> with the final part, or if not included then the base class name will be prepended.</p>\n"},{"id":"UI.DOM.Stylesheet/baseClassName","name":"baseClassName","isProperty":true,"isReadOnly":true,"file":"dist/dom/typings/UI/DOM/Stylesheet.d.ts","line":12,"code":"readonly baseClassName: string;","doc":"<p>Base class name for this style sheet (set using constructor call).</p>\n","declType":"string"},{"id":"UI.DOM.Stylesheet/define","name":"define","hasParams":true,"isMethod":true,"file":"dist/dom/typings/UI/DOM/Stylesheet.d.ts","line":20,"code":"define(text: string): this;\ndefine(selector: string, style: Style.StyleSet | Style): this;","doc":"<p>[1]. Append a rule to this style sheet; returns this.</p>\n<p>[2]. Define or override styles for given selector, based on the properties stored in given <code>Style</code> instance (class names are ignored); selectors may be written as <code>&quot;@... { selector }&quot;</code> for e.g. @keyframe and @media nested at-rules; returns this.</p>\n","declType":"this | this","count":2},{"id":"UI.DOM.Stylesheet/disable","name":"disable","hasParams":false,"isMethod":true,"file":"dist/dom/typings/UI/DOM/Stylesheet.d.ts","line":14,"code":"disable(): this;","doc":"<p>Disable all style rules in one go without removing them (use <code>.enable()</code> to reverse the effect); returns this.</p>\n","declType":"this"},{"id":"UI.DOM.Stylesheet/enable","name":"enable","hasParams":false,"isMethod":true,"file":"dist/dom/typings/UI/DOM/Stylesheet.d.ts","line":16,"code":"enable(): this;","doc":"<p>Re-enable all style rules (after using <code>.disable()</code> to disable them); returns this.</p>\n","declType":"this"},{"id":"UI.DOM.Stylesheet/forEach","name":"forEach","hasParams":true,"isMethod":true,"file":"dist/dom/typings/UI/DOM/Stylesheet.d.ts","line":26,"code":"forEach(callback: (selector: string, style?: Style) => void): void;","doc":"<p>Invoke given function for each selector of this style sheet, including instance identifier class and base class (except for keyframe selectors), if any, and the referenced <code>Style</code> instance, if any; to be used in an observable context to watch for changes.</p>\n","declType":"void"},{"id":"UI.DOM.Stylesheet/listSelectors","name":"listSelectors","hasParams":false,"isMethod":true,"file":"dist/dom/typings/UI/DOM/Stylesheet.d.ts","line":18,"code":"listSelectors(): string[];","doc":"<p>Returns a list of selectors defined in this style sheet (observable).</p>\n","declType":"string[]"},{"id":"UI.DOM.Stylesheet/remove","name":"remove","hasParams":true,"isMethod":true,"file":"dist/dom/typings/UI/DOM/Stylesheet.d.ts","line":24,"code":"remove(selector: string | RegExp): this;","doc":"<p>Remove defined styles for given selector or pattern; returns this.</p>\n","declType":"this"}]},{"id":"UI.DOM.applyStyleTo","name":"applyStyleTo","hasParams":true,"isFunction":true,"file":"dist/dom/typings/UI/DOM/Stylesheet.d.ts","line":36,"code":"function applyStyleTo(style: Style, element: HTMLElement): void;","doc":"<p>Helper function to apply Style properties to given DOM element; returns the Style object (does not observe styles directly, but can be used in an observable getter, e.g. using <code>ComponentRenderer#watch</code> to reapply styles when they change).</p>\n","declType":"void"},{"id":"UI.DOM.applyStylesheet","name":"applyStylesheet","hasParams":true,"isFunction":true,"file":"dist/dom/typings/UI/DOM/Stylesheet.d.ts","line":32,"code":"function applyStylesheet(sheet: Stylesheet | { [selector: string]: Style.StyleSet | Style; }, liveUpdate?: boolean): void;","doc":"<p>Define global CSS styles from given style sheet, in the context of the current runtime instance; if the <code>liveUpdate</code> argument is set to true, changes to the style sheet and any of its observable properties are observed and reflected in the DOM asynchronously (and the <code>.disable</code> method can be used to remove the stylesheet from the DOM temporarily or permanently).</p>\n","declType":"void"},{"id":"UI.DOM.blur","name":"blur","hasParams":true,"isFunction":true,"file":"dist/dom/typings/UI/DOM/Focus.d.ts","line":2,"code":"function blur(component?: Component): void;","doc":"<p>Remove focus from given component, or the currently focused element.</p>\n","declType":"void"},{"id":"UI.DOM.contains","name":"contains","hasParams":true,"isFunction":true,"file":"dist/dom/typings/UI/DOM/main.d.ts","line":0,"code":"function contains(component: Component, node: Node): boolean;","doc":"<p>Returns true if given component contains given DOM node.</p>\n","declType":"boolean"},{"id":"UI.DOM.focus","name":"focus","hasParams":true,"isFunction":true,"file":"dist/dom/typings/UI/DOM/Focus.d.ts","line":0,"code":"function focus(component: Component): void;","doc":"<p>Try to focus given component, its live element (from rendered output), or the first focusable element within given component, as soon as it becomes available.</p>\n","declType":"void"},{"id":"UI.DOM.getSelectionClass","name":"getSelectionClass","hasParams":false,"isFunction":true,"file":"dist/dom/typings/UI/DOM/Stylesheet.d.ts","line":42,"code":"function getSelectionClass(): string;","doc":"<p>Get the class name globally applied to selected items (if any).</p>\n","declType":"string"},{"id":"UI.DOM.loadExternalCSS","name":"loadExternalCSS","hasParams":true,"isFunction":true,"file":"dist/dom/typings/UI/DOM/Stylesheet.d.ts","line":44,"code":"function loadExternalCSS(...urls: string[]): PromiseLike<any>;","doc":"<p>Load external stylesheet(s) by URL; returns a promise that resolves after the style sheet(s) have been applied OR after a 1 second wait (e.g. when offline or browser does not support this function).</p>\n","declType":"PromiseLike<any>","isAsync":true},{"id":"UI.DOM.setCSSRemSize","name":"setCSSRemSize","hasParams":true,"isFunction":true,"file":"dist/dom/typings/UI/DOM/Stylesheet.d.ts","line":38,"code":"function setCSSRemSize(px: number | string): void;","doc":"<p>Set the global root-em unit size in pixels or using a CSS value string; the <code>rem</code> unit size is defined at the HTML level and should be set to <code>16px</code> on all browsers, however some CSS frameworks (e.g. Bootstrap 3) modify this unit; use this method to override the <code>rem</code> unit size again.</p>\n","declType":"void"},{"id":"UI.DOM.setSelectionClass","name":"setSelectionClass","hasParams":true,"isFunction":true,"file":"dist/dom/typings/UI/DOM/Stylesheet.d.ts","line":40,"code":"function setSelectionClass(className: string): void;","doc":"<p>Set the class name globally applied to selected items (in addition to the <code>selected</code> DOM attribute), i.e. those items selected using <code>Style.select</code>.</p>\n","declType":"void"},{"id":"UI.DOM.uid","name":"uid","isVar":true,"file":"dist/dom/typings/UI/DOM/Stylesheet.d.ts","line":2,"code":"uid: string","doc":"<p>Unique random identifier for this runtime instance of the library, used as an identifier on page root elements.</p>\n","declType":"string"}],"textParent":"UI","textSummary":"Web application (DOM) platform-specific sub module","text":[{"content":"<p>This sub module contains platform-specific code for rendering components using the Document Object Model (DOM) in a browser.</p>\n"}],"isNamespace":true,"sourceIdx":31},{"name":"UI.DOM.DOMAnimation.basic","id":"UI.DOM.DOMAnimation.basic","textParent":"UI.DOM.DOMAnimation","text":[{"content":"<p>This is a list of predefined animations that can be assigned to properties of <code>UI.Component.Animations</code>.</p>\n<p>The following animations are available:</p>\n<p><strong><code>basic.in.</code></strong> – <code>fade</code>, <code>fadeUp</code>, <code>fadeDown</code>, <code>fadeLeft</code>, <code>fadeRight</code>, <code>slideUp</code>, <code>slideDown</code>, <code>slideLeft</code>, <code>slideRight</code>, <code>scale</code>, <code>scaleOver</code>, <code>turnX</code>, <code>turnY</code>, <code>maxHeight</code>, <code>maxWidth</code></p>\n<p><strong><code>basic.out.</code></strong> – <code>fade</code>, <code>fadeUp</code>, <code>fadeDown</code>, <code>fadeLeft</code>, <code>fadeRight</code>, <code>slideUp</code>, <code>slideDown</code>, <code>slideLeft</code>, <code>slideRight</code>, <code>scale</code>, <code>scaleOver</code>, <code>turnX</code>, <code>turnY</code>, <code>maxHeight</code>, <code>maxWidth</code></p>\n<p><strong><code>basic.highlight.</code></strong> – <code>yellow</code>, <code>jumpIn</code>, <code>jumpOut</code></p>\n<p>For an example, see <code>UI.Animation</code>.</p>\n"}],"sourceIdx":32}]}